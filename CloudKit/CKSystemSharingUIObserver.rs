//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::CloudKit::*;
use crate::CoreLocation::*;
use crate::Foundation::*;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "CloudKit_CKSystemSharingUIObserver")]
    pub struct CKSystemSharingUIObserver;

    #[cfg(feature = "CloudKit_CKSystemSharingUIObserver")]
    unsafe impl ClassType for CKSystemSharingUIObserver {
        type Super = NSObject;
    }
);

#[cfg(feature = "CloudKit_CKSystemSharingUIObserver")]
unsafe impl NSObjectProtocol for CKSystemSharingUIObserver {}

extern_methods!(
    #[cfg(feature = "CloudKit_CKSystemSharingUIObserver")]
    unsafe impl CKSystemSharingUIObserver {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Id<Self>;

        #[cfg(feature = "CloudKit_CKContainer")]
        #[method_id(@__retain_semantics Init initWithContainer:)]
        pub unsafe fn initWithContainer(
            this: Option<Allocated<Self>>,
            container: &CKContainer,
        ) -> Id<Self>;

        #[cfg(all(
            feature = "CloudKit_CKRecordID",
            feature = "CloudKit_CKShare",
            feature = "Foundation_NSError"
        ))]
        /**
          @abstract Called on success or failure of a @c CKShare save after user modifications via the system sharing UI

          @discussion Following a successful share save by the system sharing UI in the provided @c CKContainer, this callback will be invoked with a nonnull @c recordID, a nonnull @c share, and a nil @c error.
          Following a save failure due to a per-item error (@c CKErrorServerRecordChanged, for example), this callback will be invoked with a nonnull @c recordID, a nil @c share, and a nonnull @c error
          Each @c CKSystemSharingUIObserver instance has a private serial queue. This queue is used for all callback block invocations.
        */
        #[method(systemSharingUIDidSaveShareBlock)]
        pub unsafe fn systemSharingUIDidSaveShareBlock(
            &self,
        ) -> *mut Block<(NonNull<CKRecordID>, *mut CKShare, *mut NSError), ()>;

        #[cfg(all(
            feature = "CloudKit_CKRecordID",
            feature = "CloudKit_CKShare",
            feature = "Foundation_NSError"
        ))]
        /**
          @abstract Called on success or failure of a @c CKShare save after user modifications via the system sharing UI

          @discussion Following a successful share save by the system sharing UI in the provided @c CKContainer, this callback will be invoked with a nonnull @c recordID, a nonnull @c share, and a nil @c error.
          Following a save failure due to a per-item error (@c CKErrorServerRecordChanged, for example), this callback will be invoked with a nonnull @c recordID, a nil @c share, and a nonnull @c error
          Each @c CKSystemSharingUIObserver instance has a private serial queue. This queue is used for all callback block invocations.
        */
        #[method(setSystemSharingUIDidSaveShareBlock:)]
        pub unsafe fn setSystemSharingUIDidSaveShareBlock(
            &self,
            system_sharing_ui_did_save_share_block: Option<
                &Block<(NonNull<CKRecordID>, *mut CKShare, *mut NSError), ()>,
            >,
        );

        #[cfg(all(feature = "CloudKit_CKRecordID", feature = "Foundation_NSError"))]
        /**
          @abstract Called on success or failure of a @c CKShare delete when the user decides to stop sharing via the system sharing UI

          @discussion Each @c CKSystemSharingUIObserver instance has a private serial queue. This queue is used for all callback block invocations.
        */
        #[method(systemSharingUIDidStopSharingBlock)]
        pub unsafe fn systemSharingUIDidStopSharingBlock(
            &self,
        ) -> *mut Block<(NonNull<CKRecordID>, *mut NSError), ()>;

        #[cfg(all(feature = "CloudKit_CKRecordID", feature = "Foundation_NSError"))]
        /**
          @abstract Called on success or failure of a @c CKShare delete when the user decides to stop sharing via the system sharing UI

          @discussion Each @c CKSystemSharingUIObserver instance has a private serial queue. This queue is used for all callback block invocations.
        */
        #[method(setSystemSharingUIDidStopSharingBlock:)]
        pub unsafe fn setSystemSharingUIDidStopSharingBlock(
            &self,
            system_sharing_ui_did_stop_sharing_block: Option<
                &Block<(NonNull<CKRecordID>, *mut NSError), ()>,
            >,
        );
    }
);
