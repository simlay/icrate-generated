//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::CloudKit::*;
use crate::CoreLocation::*;
use crate::Foundation::*;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "CloudKit_CKFetchSubscriptionsOperation")]
    pub struct CKFetchSubscriptionsOperation;

    #[cfg(feature = "CloudKit_CKFetchSubscriptionsOperation")]
    unsafe impl ClassType for CKFetchSubscriptionsOperation {
        #[inherits(CKOperation, NSOperation, NSObject)]
        type Super = CKDatabaseOperation;
    }
);

#[cfg(feature = "CloudKit_CKFetchSubscriptionsOperation")]
unsafe impl NSObjectProtocol for CKFetchSubscriptionsOperation {}

extern_methods!(
    #[cfg(feature = "CloudKit_CKFetchSubscriptionsOperation")]
    unsafe impl CKFetchSubscriptionsOperation {
        #[method_id(@__retain_semantics Other fetchAllSubscriptionsOperation)]
        pub unsafe fn fetchAllSubscriptionsOperation() -> Id<Self>;

        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

        #[cfg(feature = "Foundation_NSArray")]
        #[method_id(@__retain_semantics Init initWithSubscriptionIDs:)]
        pub unsafe fn initWithSubscriptionIDs(
            this: Option<Allocated<Self>>,
            subscription_i_ds: &NSArray<CKSubscriptionID>,
        ) -> Id<Self>;

        #[cfg(feature = "Foundation_NSArray")]
        #[method_id(@__retain_semantics Other subscriptionIDs)]
        pub unsafe fn subscriptionIDs(&self) -> Option<Id<NSArray<CKSubscriptionID>>>;

        #[cfg(feature = "Foundation_NSArray")]
        #[method(setSubscriptionIDs:)]
        pub unsafe fn setSubscriptionIDs(
            &self,
            subscription_i_ds: Option<&NSArray<CKSubscriptionID>>,
        );

        #[cfg(all(feature = "CloudKit_CKSubscription", feature = "Foundation_NSError"))]
        /**
          @abstract Called on success or failure for each subscriptionID.

         @discussion Each @c CKOperation instance has a private serial queue. This queue is used for all callback block invocations.
        */
        #[method(perSubscriptionCompletionBlock)]
        pub unsafe fn perSubscriptionCompletionBlock(
            &self,
        ) -> *mut Block<(NonNull<CKSubscriptionID>, *mut CKSubscription, *mut NSError), ()>;

        #[cfg(all(feature = "CloudKit_CKSubscription", feature = "Foundation_NSError"))]
        /**
          @abstract Called on success or failure for each subscriptionID.

         @discussion Each @c CKOperation instance has a private serial queue. This queue is used for all callback block invocations.
        */
        #[method(setPerSubscriptionCompletionBlock:)]
        pub unsafe fn setPerSubscriptionCompletionBlock(
            &self,
            per_subscription_completion_block: Option<
                &Block<(NonNull<CKSubscriptionID>, *mut CKSubscription, *mut NSError), ()>,
            >,
        );

        #[cfg(all(
            feature = "CloudKit_CKSubscription",
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSError"
        ))]
        /**
          @abstract This block is called when the operation completes.

          @discussion The @code -[NSOperation completionBlock] @endcode will also be called if both are set.
          If the error is @c CKErrorPartialFailure, the error's userInfo dictionary contains a dictionary of subscriptionID to errors keyed off of @c CKPartialErrorsByItemIDKey.
          @c subscriptionsBySubscriptionID and any @c CKPartialErrorsByItemIDKey errors are repeats of the data sent back in previous @c perSubscriptionCompletionBlock invocations
          Each @c CKOperation instance has a private serial queue. This queue is used for all callback block invocations.
        */
        #[method(fetchSubscriptionCompletionBlock)]
        pub unsafe fn fetchSubscriptionCompletionBlock(
            &self,
        ) -> *mut Block<
            (
                *mut NSDictionary<CKSubscriptionID, CKSubscription>,
                *mut NSError,
            ),
            (),
        >;

        #[cfg(all(
            feature = "CloudKit_CKSubscription",
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSError"
        ))]
        /**
          @abstract This block is called when the operation completes.

          @discussion The @code -[NSOperation completionBlock] @endcode will also be called if both are set.
          If the error is @c CKErrorPartialFailure, the error's userInfo dictionary contains a dictionary of subscriptionID to errors keyed off of @c CKPartialErrorsByItemIDKey.
          @c subscriptionsBySubscriptionID and any @c CKPartialErrorsByItemIDKey errors are repeats of the data sent back in previous @c perSubscriptionCompletionBlock invocations
          Each @c CKOperation instance has a private serial queue. This queue is used for all callback block invocations.
        */
        #[method(setFetchSubscriptionCompletionBlock:)]
        pub unsafe fn setFetchSubscriptionCompletionBlock(
            &self,
            fetch_subscription_completion_block: Option<
                &Block<
                    (
                        *mut NSDictionary<CKSubscriptionID, CKSubscription>,
                        *mut NSError,
                    ),
                    (),
                >,
            >,
        );
    }
);
