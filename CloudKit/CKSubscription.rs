//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::CloudKit::*;
use crate::CoreLocation::*;
use crate::Foundation::*;

ns_enum!(
    #[underlying(NSInteger)]
    pub enum CKSubscriptionType {
        CKSubscriptionTypeQuery = 1,
        CKSubscriptionTypeRecordZone = 2,
        CKSubscriptionTypeDatabase = 3,
    }
);

pub type CKSubscriptionID = NSString;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "CloudKit_CKSubscription")]
    pub struct CKSubscription;

    #[cfg(feature = "CloudKit_CKSubscription")]
    unsafe impl ClassType for CKSubscription {
        type Super = NSObject;
    }
);

#[cfg(feature = "CloudKit_CKSubscription")]
unsafe impl NSCoding for CKSubscription {}

#[cfg(feature = "CloudKit_CKSubscription")]
unsafe impl NSObjectProtocol for CKSubscription {}

#[cfg(feature = "CloudKit_CKSubscription")]
unsafe impl NSSecureCoding for CKSubscription {}

extern_methods!(
    #[cfg(feature = "CloudKit_CKSubscription")]
    unsafe impl CKSubscription {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Id<Self>;

        #[method_id(@__retain_semantics Other subscriptionID)]
        pub unsafe fn subscriptionID(&self) -> Id<CKSubscriptionID>;

        #[method(subscriptionType)]
        pub unsafe fn subscriptionType(&self) -> CKSubscriptionType;

        #[cfg(feature = "CloudKit_CKNotificationInfo")]
        /**
          @abstract Describes the notification that will be sent when the subscription fires.

          @discussion This property must be set to a non-nil value before saving the @c CKSubscription.
        */
        #[method_id(@__retain_semantics Other notificationInfo)]
        pub unsafe fn notificationInfo(&self) -> Option<Id<CKNotificationInfo>>;

        #[cfg(feature = "CloudKit_CKNotificationInfo")]
        /**
          @abstract Describes the notification that will be sent when the subscription fires.

          @discussion This property must be set to a non-nil value before saving the @c CKSubscription.
        */
        #[method(setNotificationInfo:)]
        pub unsafe fn setNotificationInfo(&self, notification_info: Option<&CKNotificationInfo>);
    }
);

ns_options!(
    #[underlying(NSUInteger)]
    pub enum CKQuerySubscriptionOptions {
        CKQuerySubscriptionOptionsFiresOnRecordCreation = 1 << 0,
        CKQuerySubscriptionOptionsFiresOnRecordUpdate = 1 << 1,
        CKQuerySubscriptionOptionsFiresOnRecordDeletion = 1 << 2,
        CKQuerySubscriptionOptionsFiresOnce = 1 << 3,
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "CloudKit_CKQuerySubscription")]
    /**
      @class CKQuerySubscription

      @abstract A subscription that fires whenever a change matching the predicate occurs.

      @discussion @c CKQuerySubscriptions are not supported in a @c sharedCloudDatabase
    */
    pub struct CKQuerySubscription;

    #[cfg(feature = "CloudKit_CKQuerySubscription")]
    unsafe impl ClassType for CKQuerySubscription {
        #[inherits(NSObject)]
        type Super = CKSubscription;
    }
);

#[cfg(feature = "CloudKit_CKQuerySubscription")]
/**
  @class CKQuerySubscription

  @abstract A subscription that fires whenever a change matching the predicate occurs.

  @discussion @c CKQuerySubscriptions are not supported in a @c sharedCloudDatabase
*/
unsafe impl NSCoding for CKQuerySubscription {}

#[cfg(feature = "CloudKit_CKQuerySubscription")]
/**
  @class CKQuerySubscription

  @abstract A subscription that fires whenever a change matching the predicate occurs.

  @discussion @c CKQuerySubscriptions are not supported in a @c sharedCloudDatabase
*/
unsafe impl NSObjectProtocol for CKQuerySubscription {}

#[cfg(feature = "CloudKit_CKQuerySubscription")]
/**
  @class CKQuerySubscription

  @abstract A subscription that fires whenever a change matching the predicate occurs.

  @discussion @c CKQuerySubscriptions are not supported in a @c sharedCloudDatabase
*/
unsafe impl NSSecureCoding for CKQuerySubscription {}

extern_methods!(
    /**
      @class CKQuerySubscription

      @abstract A subscription that fires whenever a change matching the predicate occurs.

      @discussion @c CKQuerySubscriptions are not supported in a @c sharedCloudDatabase
    */
    #[cfg(feature = "CloudKit_CKQuerySubscription")]
    unsafe impl CKQuerySubscription {
        #[cfg(feature = "Foundation_NSPredicate")]
        #[method_id(@__retain_semantics Init initWithRecordType:predicate:options:)]
        pub unsafe fn initWithRecordType_predicate_options(
            this: Option<Allocated<Self>>,
            record_type: &CKRecordType,
            predicate: &NSPredicate,
            query_subscription_options: CKQuerySubscriptionOptions,
        ) -> Id<Self>;

        #[cfg(feature = "Foundation_NSPredicate")]
        #[method_id(@__retain_semantics Init initWithRecordType:predicate:subscriptionID:options:)]
        pub unsafe fn initWithRecordType_predicate_subscriptionID_options(
            this: Option<Allocated<Self>>,
            record_type: &CKRecordType,
            predicate: &NSPredicate,
            subscription_id: &CKSubscriptionID,
            query_subscription_options: CKQuerySubscriptionOptions,
        ) -> Id<Self>;

        #[cfg(feature = "Foundation_NSCoder")]
        #[method_id(@__retain_semantics Init initWithCoder:)]
        pub unsafe fn initWithCoder(this: Option<Allocated<Self>>, a_decoder: &NSCoder)
            -> Id<Self>;

        /**
          The record type that this subscription watches
        */
        #[method_id(@__retain_semantics Other recordType)]
        pub unsafe fn recordType(&self) -> Id<CKRecordType>;

        #[cfg(feature = "Foundation_NSPredicate")]
        /**
          A predicate that determines when the subscription fires.
        */
        #[method_id(@__retain_semantics Other predicate)]
        pub unsafe fn predicate(&self) -> Id<NSPredicate>;

        #[cfg(feature = "CloudKit_CKRecordZoneID")]
        /**
          Optional property.  If set, a query subscription is scoped to only record changes in the indicated zone.
          Query Subscriptions that do not specify a @c zoneID are scoped to record changes across all zones in the database.
        */
        #[method_id(@__retain_semantics Other zoneID)]
        pub unsafe fn zoneID(&self) -> Option<Id<CKRecordZoneID>>;

        #[cfg(feature = "CloudKit_CKRecordZoneID")]
        /**
          Optional property.  If set, a query subscription is scoped to only record changes in the indicated zone.
          Query Subscriptions that do not specify a @c zoneID are scoped to record changes across all zones in the database.
        */
        #[method(setZoneID:)]
        pub unsafe fn setZoneID(&self, zone_id: Option<&CKRecordZoneID>);

        /**
          @abstract Options flags describing the firing behavior subscription.

          @discussion One of
          @c CKQuerySubscriptionOptionsFiresOnRecordCreation,
          @c CKQuerySubscriptionOptionsFiresOnRecordUpdate, or
          @c CKQuerySubscriptionOptionsFiresOnRecordDeletion must be specified or an @c NSInvalidArgumentException will be thrown.
        */
        #[method(querySubscriptionOptions)]
        pub unsafe fn querySubscriptionOptions(&self) -> CKQuerySubscriptionOptions;
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "CloudKit_CKRecordZoneSubscription")]
    /**
      @class CKRecordZoneSubscription

      @abstract A subscription that fires whenever any change happens in the indicated Record Zone.

      @discussion The RecordZone must have the capability @c CKRecordZoneCapabilityFetchChanges
      @c CKRecordZoneSubscriptions are not supported in a @c sharedCloudDatabase
    */
    pub struct CKRecordZoneSubscription;

    #[cfg(feature = "CloudKit_CKRecordZoneSubscription")]
    unsafe impl ClassType for CKRecordZoneSubscription {
        #[inherits(NSObject)]
        type Super = CKSubscription;
    }
);

#[cfg(feature = "CloudKit_CKRecordZoneSubscription")]
/**
  @class CKRecordZoneSubscription

  @abstract A subscription that fires whenever any change happens in the indicated Record Zone.

  @discussion The RecordZone must have the capability @c CKRecordZoneCapabilityFetchChanges
  @c CKRecordZoneSubscriptions are not supported in a @c sharedCloudDatabase
*/
unsafe impl NSCoding for CKRecordZoneSubscription {}

#[cfg(feature = "CloudKit_CKRecordZoneSubscription")]
/**
  @class CKRecordZoneSubscription

  @abstract A subscription that fires whenever any change happens in the indicated Record Zone.

  @discussion The RecordZone must have the capability @c CKRecordZoneCapabilityFetchChanges
  @c CKRecordZoneSubscriptions are not supported in a @c sharedCloudDatabase
*/
unsafe impl NSObjectProtocol for CKRecordZoneSubscription {}

#[cfg(feature = "CloudKit_CKRecordZoneSubscription")]
/**
  @class CKRecordZoneSubscription

  @abstract A subscription that fires whenever any change happens in the indicated Record Zone.

  @discussion The RecordZone must have the capability @c CKRecordZoneCapabilityFetchChanges
  @c CKRecordZoneSubscriptions are not supported in a @c sharedCloudDatabase
*/
unsafe impl NSSecureCoding for CKRecordZoneSubscription {}

extern_methods!(
    /**
      @class CKRecordZoneSubscription

      @abstract A subscription that fires whenever any change happens in the indicated Record Zone.

      @discussion The RecordZone must have the capability @c CKRecordZoneCapabilityFetchChanges
      @c CKRecordZoneSubscriptions are not supported in a @c sharedCloudDatabase
    */
    #[cfg(feature = "CloudKit_CKRecordZoneSubscription")]
    unsafe impl CKRecordZoneSubscription {
        #[cfg(feature = "CloudKit_CKRecordZoneID")]
        #[method_id(@__retain_semantics Init initWithZoneID:)]
        pub unsafe fn initWithZoneID(
            this: Option<Allocated<Self>>,
            zone_id: &CKRecordZoneID,
        ) -> Id<Self>;

        #[cfg(feature = "CloudKit_CKRecordZoneID")]
        #[method_id(@__retain_semantics Init initWithZoneID:subscriptionID:)]
        pub unsafe fn initWithZoneID_subscriptionID(
            this: Option<Allocated<Self>>,
            zone_id: &CKRecordZoneID,
            subscription_id: &CKSubscriptionID,
        ) -> Id<Self>;

        #[cfg(feature = "Foundation_NSCoder")]
        #[method_id(@__retain_semantics Init initWithCoder:)]
        pub unsafe fn initWithCoder(this: Option<Allocated<Self>>, a_decoder: &NSCoder)
            -> Id<Self>;

        #[cfg(feature = "CloudKit_CKRecordZoneID")]
        #[method_id(@__retain_semantics Other zoneID)]
        pub unsafe fn zoneID(&self) -> Id<CKRecordZoneID>;

        /**
          Optional property. If set, a zone subscription is scoped to record changes for this record type
        */
        #[method_id(@__retain_semantics Other recordType)]
        pub unsafe fn recordType(&self) -> Option<Id<CKRecordType>>;

        /**
          Optional property. If set, a zone subscription is scoped to record changes for this record type
        */
        #[method(setRecordType:)]
        pub unsafe fn setRecordType(&self, record_type: Option<&CKRecordType>);
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "CloudKit_CKDatabaseSubscription")]
    /**
      @class CKDatabaseSubscription

      @abstract A subscription fires whenever any change happens in the database that this subscription was saved in.

      @discussion @c CKDatabaseSubscription is only supported in the Private and Shared databases.
    */
    pub struct CKDatabaseSubscription;

    #[cfg(feature = "CloudKit_CKDatabaseSubscription")]
    unsafe impl ClassType for CKDatabaseSubscription {
        #[inherits(NSObject)]
        type Super = CKSubscription;
    }
);

#[cfg(feature = "CloudKit_CKDatabaseSubscription")]
/**
  @class CKDatabaseSubscription

  @abstract A subscription fires whenever any change happens in the database that this subscription was saved in.

  @discussion @c CKDatabaseSubscription is only supported in the Private and Shared databases.
*/
unsafe impl NSCoding for CKDatabaseSubscription {}

#[cfg(feature = "CloudKit_CKDatabaseSubscription")]
/**
  @class CKDatabaseSubscription

  @abstract A subscription fires whenever any change happens in the database that this subscription was saved in.

  @discussion @c CKDatabaseSubscription is only supported in the Private and Shared databases.
*/
unsafe impl NSObjectProtocol for CKDatabaseSubscription {}

#[cfg(feature = "CloudKit_CKDatabaseSubscription")]
/**
  @class CKDatabaseSubscription

  @abstract A subscription fires whenever any change happens in the database that this subscription was saved in.

  @discussion @c CKDatabaseSubscription is only supported in the Private and Shared databases.
*/
unsafe impl NSSecureCoding for CKDatabaseSubscription {}

extern_methods!(
    /**
      @class CKDatabaseSubscription

      @abstract A subscription fires whenever any change happens in the database that this subscription was saved in.

      @discussion @c CKDatabaseSubscription is only supported in the Private and Shared databases.
    */
    #[cfg(feature = "CloudKit_CKDatabaseSubscription")]
    unsafe impl CKDatabaseSubscription {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Id<Self>;

        #[method_id(@__retain_semantics Init initWithSubscriptionID:)]
        pub unsafe fn initWithSubscriptionID(
            this: Option<Allocated<Self>>,
            subscription_id: &CKSubscriptionID,
        ) -> Id<Self>;

        #[cfg(feature = "Foundation_NSCoder")]
        #[method_id(@__retain_semantics Init initWithCoder:)]
        pub unsafe fn initWithCoder(this: Option<Allocated<Self>>, a_decoder: &NSCoder)
            -> Id<Self>;

        /**
          Optional property. If set, a database subscription is scoped to record changes for this record type
        */
        #[method_id(@__retain_semantics Other recordType)]
        pub unsafe fn recordType(&self) -> Option<Id<CKRecordType>>;

        /**
          Optional property. If set, a database subscription is scoped to record changes for this record type
        */
        #[method(setRecordType:)]
        pub unsafe fn setRecordType(&self, record_type: Option<&CKRecordType>);
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "CloudKit_CKNotificationInfo")]
    /**
      @class CKNotificationInfo

      @discussion The payload of a push notification delivered in the UIApplication @c application:didReceiveRemoteNotification: delegate method contains information about the firing subscription.

      Use @code +[CKNotification notificationFromRemoteNotificationDictionary:] @endcode to parse that payload.
      On tvOS, alerts, badges, sounds, and categories are not handled in push notifications. However, CKSubscriptions remain available to help you avoid polling the server.
    */
    pub struct CKNotificationInfo;

    #[cfg(feature = "CloudKit_CKNotificationInfo")]
    unsafe impl ClassType for CKNotificationInfo {
        type Super = NSObject;
    }
);

#[cfg(feature = "CloudKit_CKNotificationInfo")]
/**
  @class CKNotificationInfo

  @discussion The payload of a push notification delivered in the UIApplication @c application:didReceiveRemoteNotification: delegate method contains information about the firing subscription.

  Use @code +[CKNotification notificationFromRemoteNotificationDictionary:] @endcode to parse that payload.
  On tvOS, alerts, badges, sounds, and categories are not handled in push notifications. However, CKSubscriptions remain available to help you avoid polling the server.
*/
unsafe impl NSCoding for CKNotificationInfo {}

#[cfg(feature = "CloudKit_CKNotificationInfo")]
/**
  @class CKNotificationInfo

  @discussion The payload of a push notification delivered in the UIApplication @c application:didReceiveRemoteNotification: delegate method contains information about the firing subscription.

  Use @code +[CKNotification notificationFromRemoteNotificationDictionary:] @endcode to parse that payload.
  On tvOS, alerts, badges, sounds, and categories are not handled in push notifications. However, CKSubscriptions remain available to help you avoid polling the server.
*/
unsafe impl NSObjectProtocol for CKNotificationInfo {}

#[cfg(feature = "CloudKit_CKNotificationInfo")]
/**
  @class CKNotificationInfo

  @discussion The payload of a push notification delivered in the UIApplication @c application:didReceiveRemoteNotification: delegate method contains information about the firing subscription.

  Use @code +[CKNotification notificationFromRemoteNotificationDictionary:] @endcode to parse that payload.
  On tvOS, alerts, badges, sounds, and categories are not handled in push notifications. However, CKSubscriptions remain available to help you avoid polling the server.
*/
unsafe impl NSSecureCoding for CKNotificationInfo {}

extern_methods!(
    /**
      @class CKNotificationInfo

      @discussion The payload of a push notification delivered in the UIApplication @c application:didReceiveRemoteNotification: delegate method contains information about the firing subscription.

      Use @code +[CKNotification notificationFromRemoteNotificationDictionary:] @endcode to parse that payload.
      On tvOS, alerts, badges, sounds, and categories are not handled in push notifications. However, CKSubscriptions remain available to help you avoid polling the server.
    */
    #[cfg(feature = "CloudKit_CKNotificationInfo")]
    unsafe impl CKNotificationInfo {
        #[cfg(feature = "Foundation_NSString")]
        /**
          Optional alert string to display in a push notification.
        */
        #[method_id(@__retain_semantics Other alertBody)]
        pub unsafe fn alertBody(&self) -> Option<Id<NSString>>;

        #[cfg(feature = "Foundation_NSString")]
        /**
          Optional alert string to display in a push notification.
        */
        #[method(setAlertBody:)]
        pub unsafe fn setAlertBody(&self, alert_body: Option<&NSString>);

        #[cfg(feature = "Foundation_NSString")]
        /**
          Instead of a raw alert string, you may optionally specify a key for a localized string in your app's Localizable.strings file.
        */
        #[method_id(@__retain_semantics Other alertLocalizationKey)]
        pub unsafe fn alertLocalizationKey(&self) -> Option<Id<NSString>>;

        #[cfg(feature = "Foundation_NSString")]
        /**
          Instead of a raw alert string, you may optionally specify a key for a localized string in your app's Localizable.strings file.
        */
        #[method(setAlertLocalizationKey:)]
        pub unsafe fn setAlertLocalizationKey(&self, alert_localization_key: Option<&NSString>);

        #[cfg(feature = "Foundation_NSArray")]
        /**
          A list of field names to take from the matching record that is used as substitution variables in a formatted alert string.
        */
        #[method_id(@__retain_semantics Other alertLocalizationArgs)]
        pub unsafe fn alertLocalizationArgs(&self) -> Option<Id<NSArray<CKRecordFieldKey>>>;

        #[cfg(feature = "Foundation_NSArray")]
        /**
          A list of field names to take from the matching record that is used as substitution variables in a formatted alert string.
        */
        #[method(setAlertLocalizationArgs:)]
        pub unsafe fn setAlertLocalizationArgs(
            &self,
            alert_localization_args: Option<&NSArray<CKRecordFieldKey>>,
        );

        #[cfg(feature = "Foundation_NSString")]
        /**
          Optional title of the alert to display in a push notification.
        */
        #[method_id(@__retain_semantics Other title)]
        pub unsafe fn title(&self) -> Option<Id<NSString>>;

        #[cfg(feature = "Foundation_NSString")]
        /**
          Optional title of the alert to display in a push notification.
        */
        #[method(setTitle:)]
        pub unsafe fn setTitle(&self, title: Option<&NSString>);

        #[cfg(feature = "Foundation_NSString")]
        /**
          Instead of a raw title string, you may optionally specify a key for a localized string in your app's Localizable.strings file.
        */
        #[method_id(@__retain_semantics Other titleLocalizationKey)]
        pub unsafe fn titleLocalizationKey(&self) -> Option<Id<NSString>>;

        #[cfg(feature = "Foundation_NSString")]
        /**
          Instead of a raw title string, you may optionally specify a key for a localized string in your app's Localizable.strings file.
        */
        #[method(setTitleLocalizationKey:)]
        pub unsafe fn setTitleLocalizationKey(&self, title_localization_key: Option<&NSString>);

        #[cfg(feature = "Foundation_NSArray")]
        /**
          A list of field names to take from the matching record that is used as substitution variables in a formatted title string.
        */
        #[method_id(@__retain_semantics Other titleLocalizationArgs)]
        pub unsafe fn titleLocalizationArgs(&self) -> Option<Id<NSArray<CKRecordFieldKey>>>;

        #[cfg(feature = "Foundation_NSArray")]
        /**
          A list of field names to take from the matching record that is used as substitution variables in a formatted title string.
        */
        #[method(setTitleLocalizationArgs:)]
        pub unsafe fn setTitleLocalizationArgs(
            &self,
            title_localization_args: Option<&NSArray<CKRecordFieldKey>>,
        );

        #[cfg(feature = "Foundation_NSString")]
        /**
          Optional subtitle of the alert to display in a push notification.
        */
        #[method_id(@__retain_semantics Other subtitle)]
        pub unsafe fn subtitle(&self) -> Option<Id<NSString>>;

        #[cfg(feature = "Foundation_NSString")]
        /**
          Optional subtitle of the alert to display in a push notification.
        */
        #[method(setSubtitle:)]
        pub unsafe fn setSubtitle(&self, subtitle: Option<&NSString>);

        #[cfg(feature = "Foundation_NSString")]
        /**
          Instead of a raw subtitle string, you may optionally specify a key for a localized string in your app's Localizable.strings file.
        */
        #[method_id(@__retain_semantics Other subtitleLocalizationKey)]
        pub unsafe fn subtitleLocalizationKey(&self) -> Option<Id<NSString>>;

        #[cfg(feature = "Foundation_NSString")]
        /**
          Instead of a raw subtitle string, you may optionally specify a key for a localized string in your app's Localizable.strings file.
        */
        #[method(setSubtitleLocalizationKey:)]
        pub unsafe fn setSubtitleLocalizationKey(
            &self,
            subtitle_localization_key: Option<&NSString>,
        );

        #[cfg(feature = "Foundation_NSArray")]
        /**
          A list of field names to take from the matching record that is used as substitution variables in a formatted subtitle string.
        */
        #[method_id(@__retain_semantics Other subtitleLocalizationArgs)]
        pub unsafe fn subtitleLocalizationArgs(&self) -> Option<Id<NSArray<CKRecordFieldKey>>>;

        #[cfg(feature = "Foundation_NSArray")]
        /**
          A list of field names to take from the matching record that is used as substitution variables in a formatted subtitle string.
        */
        #[method(setSubtitleLocalizationArgs:)]
        pub unsafe fn setSubtitleLocalizationArgs(
            &self,
            subtitle_localization_args: Option<&NSArray<CKRecordFieldKey>>,
        );

        #[cfg(feature = "Foundation_NSString")]
        /**
          A key for a localized string to be used as the alert action in a modal style notification.
        */
        #[method_id(@__retain_semantics Other alertActionLocalizationKey)]
        pub unsafe fn alertActionLocalizationKey(&self) -> Option<Id<NSString>>;

        #[cfg(feature = "Foundation_NSString")]
        /**
          A key for a localized string to be used as the alert action in a modal style notification.
        */
        #[method(setAlertActionLocalizationKey:)]
        pub unsafe fn setAlertActionLocalizationKey(
            &self,
            alert_action_localization_key: Option<&NSString>,
        );

        #[cfg(feature = "Foundation_NSString")]
        /**
          The name of an image in your app bundle to be used as the launch image when launching in response to the notification.
        */
        #[method_id(@__retain_semantics Other alertLaunchImage)]
        pub unsafe fn alertLaunchImage(&self) -> Option<Id<NSString>>;

        #[cfg(feature = "Foundation_NSString")]
        /**
          The name of an image in your app bundle to be used as the launch image when launching in response to the notification.
        */
        #[method(setAlertLaunchImage:)]
        pub unsafe fn setAlertLaunchImage(&self, alert_launch_image: Option<&NSString>);

        #[cfg(feature = "Foundation_NSString")]
        /**
          The name of a sound file in your app bundle to play upon receiving the notification.
        */
        #[method_id(@__retain_semantics Other soundName)]
        pub unsafe fn soundName(&self) -> Option<Id<NSString>>;

        #[cfg(feature = "Foundation_NSString")]
        /**
          The name of a sound file in your app bundle to play upon receiving the notification.
        */
        #[method(setSoundName:)]
        pub unsafe fn setSoundName(&self, sound_name: Option<&NSString>);

        #[cfg(feature = "Foundation_NSArray")]
        /**
          @abstract A list of keys from the matching record to include in the notification payload.

          @discussion Only some keys are allowed.  The value types associated with those keys on the server must be one of these classes:
          - CKReference
          - CLLocation
          - NSDate
          - NSNumber
          - NSString
        */
        #[method_id(@__retain_semantics Other desiredKeys)]
        pub unsafe fn desiredKeys(&self) -> Option<Id<NSArray<CKRecordFieldKey>>>;

        #[cfg(feature = "Foundation_NSArray")]
        /**
          @abstract A list of keys from the matching record to include in the notification payload.

          @discussion Only some keys are allowed.  The value types associated with those keys on the server must be one of these classes:
          - CKReference
          - CLLocation
          - NSDate
          - NSNumber
          - NSString
        */
        #[method(setDesiredKeys:)]
        pub unsafe fn setDesiredKeys(&self, desired_keys: Option<&NSArray<CKRecordFieldKey>>);

        /**
          Indicates that the notification should increment the app's badge count. Default value is @c NO.
        */
        #[method(shouldBadge)]
        pub unsafe fn shouldBadge(&self) -> bool;

        /**
          Indicates that the notification should increment the app's badge count. Default value is @c NO.
        */
        #[method(setShouldBadge:)]
        pub unsafe fn setShouldBadge(&self, should_badge: bool);

        /**
          @abstract Indicates that the notification should be sent with the "content-available" flag to allow for background downloads in the application.

          @discussion Default value is @c NO.
        */
        #[method(shouldSendContentAvailable)]
        pub unsafe fn shouldSendContentAvailable(&self) -> bool;

        /**
          @abstract Indicates that the notification should be sent with the "content-available" flag to allow for background downloads in the application.

          @discussion Default value is @c NO.
        */
        #[method(setShouldSendContentAvailable:)]
        pub unsafe fn setShouldSendContentAvailable(&self, should_send_content_available: bool);

        /**
          @abstract Indicates that the notification should be sent with the "mutable-content" flag to allow a Notification Service app extension to modify or replace the push payload.

          @discussion Default value is @c NO.
        */
        #[method(shouldSendMutableContent)]
        pub unsafe fn shouldSendMutableContent(&self) -> bool;

        /**
          @abstract Indicates that the notification should be sent with the "mutable-content" flag to allow a Notification Service app extension to modify or replace the push payload.

          @discussion Default value is @c NO.
        */
        #[method(setShouldSendMutableContent:)]
        pub unsafe fn setShouldSendMutableContent(&self, should_send_mutable_content: bool);

        #[cfg(feature = "Foundation_NSString")]
        /**
          @abstract Optional property for the category to be sent with the push when this subscription fires.

          @discussion Categories allow you to present custom actions to the user on your push notifications.

          @see UIMutableUserNotificationCategory
        */
        #[method_id(@__retain_semantics Other category)]
        pub unsafe fn category(&self) -> Option<Id<NSString>>;

        #[cfg(feature = "Foundation_NSString")]
        /**
          @abstract Optional property for the category to be sent with the push when this subscription fires.

          @discussion Categories allow you to present custom actions to the user on your push notifications.

          @see UIMutableUserNotificationCategory
        */
        #[method(setCategory:)]
        pub unsafe fn setCategory(&self, category: Option<&NSString>);

        #[cfg(feature = "Foundation_NSString")]
        /**
          @abstract Optional property specifying a field name to take from the matching record whose value is used as the apns-collapse-id header.

          @see APNs Notification API documentation
        */
        #[method_id(@__retain_semantics Other collapseIDKey)]
        pub unsafe fn collapseIDKey(&self) -> Option<Id<NSString>>;

        #[cfg(feature = "Foundation_NSString")]
        /**
          @abstract Optional property specifying a field name to take from the matching record whose value is used as the apns-collapse-id header.

          @see APNs Notification API documentation
        */
        #[method(setCollapseIDKey:)]
        pub unsafe fn setCollapseIDKey(&self, collapse_id_key: Option<&NSString>);
    }
);
