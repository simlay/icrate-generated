//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::CloudKit::*;
use crate::CoreLocation::*;
use crate::Foundation::*;

ns_enum!(
    #[underlying(NSInteger)]
    pub enum CKShareParticipantAcceptanceStatus {
        CKShareParticipantAcceptanceStatusUnknown = 0,
        CKShareParticipantAcceptanceStatusPending = 1,
        CKShareParticipantAcceptanceStatusAccepted = 2,
        CKShareParticipantAcceptanceStatusRemoved = 3,
    }
);

ns_enum!(
    #[underlying(NSInteger)]
    /**
      These permissions determine what share participants can do with records inside that share
    */
    pub enum CKShareParticipantPermission {
        CKShareParticipantPermissionUnknown = 0,
        CKShareParticipantPermissionNone = 1,
        CKShareParticipantPermissionReadOnly = 2,
        CKShareParticipantPermissionReadWrite = 3,
    }
);

ns_enum!(
    #[underlying(NSInteger)]
    /**
      @abstract The participant type determines whether a participant can modify the list of participants on a share.

      @discussion
      - Owners can add private users
      - Private users can access the share
      - Public users are "self-added" when the participant accesses the shareURL.  Owners cannot add public users.
    */
    pub enum CKShareParticipantRole {
        CKShareParticipantRoleUnknown = 0,
        CKShareParticipantRoleOwner = 1,
        CKShareParticipantRolePrivateUser = 3,
        CKShareParticipantRolePublicUser = 4,
    }
);

ns_enum!(
    #[underlying(NSInteger)]
    #[deprecated]
    pub enum CKShareParticipantType {
        #[deprecated]
        CKShareParticipantTypeUnknown = 0,
        #[deprecated]
        CKShareParticipantTypeOwner = 1,
        #[deprecated]
        CKShareParticipantTypePrivateUser = 3,
        #[deprecated]
        CKShareParticipantTypePublicUser = 4,
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "CloudKit_CKShareParticipant")]
    pub struct CKShareParticipant;

    #[cfg(feature = "CloudKit_CKShareParticipant")]
    unsafe impl ClassType for CKShareParticipant {
        type Super = NSObject;
    }
);

#[cfg(feature = "CloudKit_CKShareParticipant")]
unsafe impl NSCoding for CKShareParticipant {}

#[cfg(feature = "CloudKit_CKShareParticipant")]
unsafe impl NSObjectProtocol for CKShareParticipant {}

#[cfg(feature = "CloudKit_CKShareParticipant")]
unsafe impl NSSecureCoding for CKShareParticipant {}

extern_methods!(
    #[cfg(feature = "CloudKit_CKShareParticipant")]
    unsafe impl CKShareParticipant {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Id<Self>;

        #[cfg(feature = "CloudKit_CKUserIdentity")]
        #[method_id(@__retain_semantics Other userIdentity)]
        pub unsafe fn userIdentity(&self) -> Id<CKUserIdentity>;

        /**
          The default participant role is @c CKShareParticipantRolePrivateUser.
        */
        #[method(role)]
        pub unsafe fn role(&self) -> CKShareParticipantRole;

        /**
          The default participant role is @c CKShareParticipantRolePrivateUser.
        */
        #[method(setRole:)]
        pub unsafe fn setRole(&self, role: CKShareParticipantRole);

        /**
          The default participant type is @c CKShareParticipantTypePrivateUser.
        */
        #[deprecated]
        #[method(type)]
        pub unsafe fn r#type(&self) -> CKShareParticipantType;

        /**
          The default participant type is @c CKShareParticipantTypePrivateUser.
        */
        #[deprecated]
        #[method(setType:)]
        pub unsafe fn setType(&self, r#type: CKShareParticipantType);

        #[method(acceptanceStatus)]
        pub unsafe fn acceptanceStatus(&self) -> CKShareParticipantAcceptanceStatus;

        /**
          The default permission for a new participant is @c CKShareParticipantPermissionReadOnly.
        */
        #[method(permission)]
        pub unsafe fn permission(&self) -> CKShareParticipantPermission;

        /**
          The default permission for a new participant is @c CKShareParticipantPermissionReadOnly.
        */
        #[method(setPermission:)]
        pub unsafe fn setPermission(&self, permission: CKShareParticipantPermission);
    }
);
