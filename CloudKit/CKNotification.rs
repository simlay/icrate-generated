//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::CloudKit::*;
use crate::CoreLocation::*;
use crate::Foundation::*;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "CloudKit_CKNotificationID")]
    pub struct CKNotificationID;

    #[cfg(feature = "CloudKit_CKNotificationID")]
    unsafe impl ClassType for CKNotificationID {
        type Super = NSObject;
    }
);

#[cfg(feature = "CloudKit_CKNotificationID")]
unsafe impl NSCoding for CKNotificationID {}

#[cfg(feature = "CloudKit_CKNotificationID")]
unsafe impl NSObjectProtocol for CKNotificationID {}

#[cfg(feature = "CloudKit_CKNotificationID")]
unsafe impl NSSecureCoding for CKNotificationID {}

extern_methods!(
    #[cfg(feature = "CloudKit_CKNotificationID")]
    unsafe impl CKNotificationID {}
);

ns_enum!(
    #[underlying(NSInteger)]
    /**
      @enum CKNotificationType

      @constant CKNotificationTypeQuery Generated by @c CKQuerySubscriptions
      @constant CKNotificationTypeRecordZone Generated by @c CKRecordZoneSubscriptions
      @constant CKNotificationTypeReadNotification Indicates a notification that a client had previously marked as read
      @constant CKNotificationTypeDatabase Generated by @c CKDatabaseSubscriptions
    */
    pub enum CKNotificationType {
        CKNotificationTypeQuery = 1,
        CKNotificationTypeRecordZone = 2,
        CKNotificationTypeReadNotification = 3,
        CKNotificationTypeDatabase = 4,
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "CloudKit_CKNotification")]
    pub struct CKNotification;

    #[cfg(feature = "CloudKit_CKNotification")]
    unsafe impl ClassType for CKNotification {
        type Super = NSObject;
    }
);

#[cfg(feature = "CloudKit_CKNotification")]
unsafe impl NSObjectProtocol for CKNotification {}

extern_methods!(
    #[cfg(feature = "CloudKit_CKNotification")]
    unsafe impl CKNotification {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Id<Self>;

        #[cfg(feature = "Foundation_NSDictionary")]
        #[method_id(@__retain_semantics Other notificationFromRemoteNotificationDictionary:)]
        pub unsafe fn notificationFromRemoteNotificationDictionary(
            notification_dictionary: &NSDictionary,
        ) -> Option<Id<Self>>;

        /**
          When you instantiate a CKNotification from a remote notification dictionary, you will get back a concrete
        subclass defined below.  Use notificationType to avoid -isKindOfClass: checks
        */
        #[method(notificationType)]
        pub unsafe fn notificationType(&self) -> CKNotificationType;

        #[cfg(feature = "CloudKit_CKNotificationID")]
        #[method_id(@__retain_semantics Other notificationID)]
        pub unsafe fn notificationID(&self) -> Option<Id<CKNotificationID>>;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other containerIdentifier)]
        pub unsafe fn containerIdentifier(&self) -> Option<Id<NSString>>;

        #[cfg(feature = "CloudKit_CKRecordID")]
        /**
          The user recordID of the owner of the subscription for which this notification was generated
        */
        #[method_id(@__retain_semantics Other subscriptionOwnerUserRecordID)]
        pub unsafe fn subscriptionOwnerUserRecordID(&self) -> Option<Id<CKRecordID>>;

        /**
          @abstract Whether or not the notification fully represents what the server wanted to send.

         @discussion Push notifications have a limited size.  In some cases, CloudKit servers may not be able to send you a full @c CKNotification's worth of info in one push.  In those cases, isPruned returns YES.  The order in which we'll drop properties is defined in each @c CKNotification subclass below.
         The @c CKNotification can be obtained in full via a @c CKFetchNotificationChangesOperation
        */
        #[method(isPruned)]
        pub unsafe fn isPruned(&self) -> bool;

        #[cfg(feature = "Foundation_NSString")]
        /**
          Optional alert string to display in a push notification.
        */
        #[method_id(@__retain_semantics Other alertBody)]
        pub unsafe fn alertBody(&self) -> Option<Id<NSString>>;

        #[cfg(feature = "Foundation_NSString")]
        /**
          Instead of a raw alert string, you may optionally specify a key for a localized string in your app's Localizable.strings file.
        */
        #[method_id(@__retain_semantics Other alertLocalizationKey)]
        pub unsafe fn alertLocalizationKey(&self) -> Option<Id<NSString>>;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        /**
          A list of field names to take from the matching record that is used as substitution variables in a formatted alert string.
        */
        #[method_id(@__retain_semantics Other alertLocalizationArgs)]
        pub unsafe fn alertLocalizationArgs(&self) -> Option<Id<NSArray<NSString>>>;

        #[cfg(feature = "Foundation_NSString")]
        /**
          Optional title of the alert to display in a push notification.
        */
        #[method_id(@__retain_semantics Other title)]
        pub unsafe fn title(&self) -> Option<Id<NSString>>;

        #[cfg(feature = "Foundation_NSString")]
        /**
          Instead of a raw title string, you may optionally specify a key for a localized string in your app's Localizable.strings file.
        */
        #[method_id(@__retain_semantics Other titleLocalizationKey)]
        pub unsafe fn titleLocalizationKey(&self) -> Option<Id<NSString>>;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        /**
          A list of field names to take from the matching record that is used as substitution variables in a formatted title string.
        */
        #[method_id(@__retain_semantics Other titleLocalizationArgs)]
        pub unsafe fn titleLocalizationArgs(&self) -> Option<Id<NSArray<NSString>>>;

        #[cfg(feature = "Foundation_NSString")]
        /**
          Optional subtitle of the alert to display in a push notification.
        */
        #[method_id(@__retain_semantics Other subtitle)]
        pub unsafe fn subtitle(&self) -> Option<Id<NSString>>;

        #[cfg(feature = "Foundation_NSString")]
        /**
          Instead of a raw subtitle string, you may optionally specify a key for a localized string in your app's Localizable.strings file.
        */
        #[method_id(@__retain_semantics Other subtitleLocalizationKey)]
        pub unsafe fn subtitleLocalizationKey(&self) -> Option<Id<NSString>>;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        /**
          A list of field names to take from the matching record that is used as substitution variables in a formatted subtitle string.
        */
        #[method_id(@__retain_semantics Other subtitleLocalizationArgs)]
        pub unsafe fn subtitleLocalizationArgs(&self) -> Option<Id<NSArray<NSString>>>;

        #[cfg(feature = "Foundation_NSString")]
        /**
          A key for a localized string to be used as the alert action in a modal style notification.
        */
        #[method_id(@__retain_semantics Other alertActionLocalizationKey)]
        pub unsafe fn alertActionLocalizationKey(&self) -> Option<Id<NSString>>;

        #[cfg(feature = "Foundation_NSString")]
        /**
          The name of an image in your app bundle to be used as the launch image when launching in response to the notification.
        */
        #[method_id(@__retain_semantics Other alertLaunchImage)]
        pub unsafe fn alertLaunchImage(&self) -> Option<Id<NSString>>;

        #[cfg(feature = "Foundation_NSNumber")]
        /**
          The number to display as the badge of the application icon
        */
        #[method_id(@__retain_semantics Other badge)]
        pub unsafe fn badge(&self) -> Option<Id<NSNumber>>;

        #[cfg(feature = "Foundation_NSString")]
        /**
          The name of a sound file in your app bundle to play upon receiving the notification.
        */
        #[method_id(@__retain_semantics Other soundName)]
        pub unsafe fn soundName(&self) -> Option<Id<NSString>>;

        /**
          The ID of the subscription that caused this notification to fire
        */
        #[method_id(@__retain_semantics Other subscriptionID)]
        pub unsafe fn subscriptionID(&self) -> Option<Id<CKSubscriptionID>>;

        #[cfg(feature = "Foundation_NSString")]
        /**
          The category for user-initiated actions in the notification
        */
        #[method_id(@__retain_semantics Other category)]
        pub unsafe fn category(&self) -> Option<Id<NSString>>;
    }
);

ns_enum!(
    #[underlying(NSInteger)]
    pub enum CKQueryNotificationReason {
        CKQueryNotificationReasonRecordCreated = 1,
        CKQueryNotificationReasonRecordUpdated = 2,
        CKQueryNotificationReasonRecordDeleted = 3,
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "CloudKit_CKQueryNotification")]
    /**
      @class CKQueryNotification

      @discussion @c notificationType == @c CKNotificationTypeQuery
      When properties must be dropped (see @c isPruned), here's the order of importance.  The most important properties are first, they'll be the last ones to be dropped.
      - notificationID
      - badge
      - alertLocalizationKey
      - alertLocalizationArgs
      - alertBody
      - alertActionLocalizationKey
      - alertLaunchImage
      - soundName
      - content-available
      - desiredKeys
      - queryNotificationReason
      - recordID
      - containerIdentifier
      - subscriptionOwnerUserRecordID
      - titleLocalizationKey
      - titleLocalizationArgs
      - title
      - subtitleLocalizationKey
      - subtitleLocalizationArgs
      - subtitle
    */
    pub struct CKQueryNotification;

    #[cfg(feature = "CloudKit_CKQueryNotification")]
    unsafe impl ClassType for CKQueryNotification {
        #[inherits(NSObject)]
        type Super = CKNotification;
    }
);

#[cfg(feature = "CloudKit_CKQueryNotification")]
/**
  @class CKQueryNotification

  @discussion @c notificationType == @c CKNotificationTypeQuery
  When properties must be dropped (see @c isPruned), here's the order of importance.  The most important properties are first, they'll be the last ones to be dropped.
  - notificationID
  - badge
  - alertLocalizationKey
  - alertLocalizationArgs
  - alertBody
  - alertActionLocalizationKey
  - alertLaunchImage
  - soundName
  - content-available
  - desiredKeys
  - queryNotificationReason
  - recordID
  - containerIdentifier
  - subscriptionOwnerUserRecordID
  - titleLocalizationKey
  - titleLocalizationArgs
  - title
  - subtitleLocalizationKey
  - subtitleLocalizationArgs
  - subtitle
*/
unsafe impl NSObjectProtocol for CKQueryNotification {}

extern_methods!(
    /**
      @class CKQueryNotification

      @discussion @c notificationType == @c CKNotificationTypeQuery
      When properties must be dropped (see @c isPruned), here's the order of importance.  The most important properties are first, they'll be the last ones to be dropped.
      - notificationID
      - badge
      - alertLocalizationKey
      - alertLocalizationArgs
      - alertBody
      - alertActionLocalizationKey
      - alertLaunchImage
      - soundName
      - content-available
      - desiredKeys
      - queryNotificationReason
      - recordID
      - containerIdentifier
      - subscriptionOwnerUserRecordID
      - titleLocalizationKey
      - titleLocalizationArgs
      - title
      - subtitleLocalizationKey
      - subtitleLocalizationArgs
      - subtitle
    */
    #[cfg(feature = "CloudKit_CKQueryNotification")]
    unsafe impl CKQueryNotification {
        #[method(queryNotificationReason)]
        pub unsafe fn queryNotificationReason(&self) -> CKQueryNotificationReason;

        #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSString"))]
        /**
          @abstract A set of key->value pairs for creates and updates.

         @discussion You request the server fill out this property via the @c desiredKeys property of @c CKNotificationInfo
        */
        #[method_id(@__retain_semantics Other recordFields)]
        pub unsafe fn recordFields(&self) -> Option<Id<NSDictionary<NSString, Object>>>;

        #[cfg(feature = "CloudKit_CKRecordID")]
        #[method_id(@__retain_semantics Other recordID)]
        pub unsafe fn recordID(&self) -> Option<Id<CKRecordID>>;

        #[method(databaseScope)]
        pub unsafe fn databaseScope(&self) -> CKDatabaseScope;
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "CloudKit_CKRecordZoneNotification")]
    /**
      @class CKRecordZoneNotification

      @discussion @c notificationType == @c CKNotificationTypeRecordZone
      When properties must be dropped (see @c isPruned), here's the order of importance.  The most important properties are first, they'll be the last ones to be dropped.
      - notificationID
      - badge
      - alertLocalizationKey
      - alertLocalizationArgs
      - alertBody
      - alertActionLocalizationKey
      - alertLaunchImage
      - soundName
      - content-available
      - recordZoneID
      - containerIdentifier
      - subscriptionOwnerUserRecordID
      - titleLocalizationKey
      - titleLocalizationArgs
      - title
      - subtitleLocalizationKey
      - subtitleLocalizationArgs
      - subtitle
    */
    pub struct CKRecordZoneNotification;

    #[cfg(feature = "CloudKit_CKRecordZoneNotification")]
    unsafe impl ClassType for CKRecordZoneNotification {
        #[inherits(NSObject)]
        type Super = CKNotification;
    }
);

#[cfg(feature = "CloudKit_CKRecordZoneNotification")]
/**
  @class CKRecordZoneNotification

  @discussion @c notificationType == @c CKNotificationTypeRecordZone
  When properties must be dropped (see @c isPruned), here's the order of importance.  The most important properties are first, they'll be the last ones to be dropped.
  - notificationID
  - badge
  - alertLocalizationKey
  - alertLocalizationArgs
  - alertBody
  - alertActionLocalizationKey
  - alertLaunchImage
  - soundName
  - content-available
  - recordZoneID
  - containerIdentifier
  - subscriptionOwnerUserRecordID
  - titleLocalizationKey
  - titleLocalizationArgs
  - title
  - subtitleLocalizationKey
  - subtitleLocalizationArgs
  - subtitle
*/
unsafe impl NSObjectProtocol for CKRecordZoneNotification {}

extern_methods!(
    /**
      @class CKRecordZoneNotification

      @discussion @c notificationType == @c CKNotificationTypeRecordZone
      When properties must be dropped (see @c isPruned), here's the order of importance.  The most important properties are first, they'll be the last ones to be dropped.
      - notificationID
      - badge
      - alertLocalizationKey
      - alertLocalizationArgs
      - alertBody
      - alertActionLocalizationKey
      - alertLaunchImage
      - soundName
      - content-available
      - recordZoneID
      - containerIdentifier
      - subscriptionOwnerUserRecordID
      - titleLocalizationKey
      - titleLocalizationArgs
      - title
      - subtitleLocalizationKey
      - subtitleLocalizationArgs
      - subtitle
    */
    #[cfg(feature = "CloudKit_CKRecordZoneNotification")]
    unsafe impl CKRecordZoneNotification {
        #[cfg(feature = "CloudKit_CKRecordZoneID")]
        #[method_id(@__retain_semantics Other recordZoneID)]
        pub unsafe fn recordZoneID(&self) -> Option<Id<CKRecordZoneID>>;

        #[method(databaseScope)]
        pub unsafe fn databaseScope(&self) -> CKDatabaseScope;
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "CloudKit_CKDatabaseNotification")]
    /**
      @class CKDatabaseNotification

      @discussion @c notificationType == @c CKNotificationTypeDatabase
      When properties must be dropped (see @c isPruned), here's the order of importance.  The most important properties are first, they'll be the last ones to be dropped.
      - notificationID
      - badge
      - alertLocalizationKey
      - alertLocalizationArgs
      - alertBody
      - alertActionLocalizationKey
      - alertLaunchImage
      - soundName
      - content-available
      - containerIdentifier
      - subscriptionOwnerUserRecordID
      - titleLocalizationKey
      - titleLocalizationArgs
      - title
      - subtitleLocalizationKey
      - subtitleLocalizationArgs
      - subtitle
    */
    pub struct CKDatabaseNotification;

    #[cfg(feature = "CloudKit_CKDatabaseNotification")]
    unsafe impl ClassType for CKDatabaseNotification {
        #[inherits(NSObject)]
        type Super = CKNotification;
    }
);

#[cfg(feature = "CloudKit_CKDatabaseNotification")]
/**
  @class CKDatabaseNotification

  @discussion @c notificationType == @c CKNotificationTypeDatabase
  When properties must be dropped (see @c isPruned), here's the order of importance.  The most important properties are first, they'll be the last ones to be dropped.
  - notificationID
  - badge
  - alertLocalizationKey
  - alertLocalizationArgs
  - alertBody
  - alertActionLocalizationKey
  - alertLaunchImage
  - soundName
  - content-available
  - containerIdentifier
  - subscriptionOwnerUserRecordID
  - titleLocalizationKey
  - titleLocalizationArgs
  - title
  - subtitleLocalizationKey
  - subtitleLocalizationArgs
  - subtitle
*/
unsafe impl NSObjectProtocol for CKDatabaseNotification {}

extern_methods!(
    /**
      @class CKDatabaseNotification

      @discussion @c notificationType == @c CKNotificationTypeDatabase
      When properties must be dropped (see @c isPruned), here's the order of importance.  The most important properties are first, they'll be the last ones to be dropped.
      - notificationID
      - badge
      - alertLocalizationKey
      - alertLocalizationArgs
      - alertBody
      - alertActionLocalizationKey
      - alertLaunchImage
      - soundName
      - content-available
      - containerIdentifier
      - subscriptionOwnerUserRecordID
      - titleLocalizationKey
      - titleLocalizationArgs
      - title
      - subtitleLocalizationKey
      - subtitleLocalizationArgs
      - subtitle
    */
    #[cfg(feature = "CloudKit_CKDatabaseNotification")]
    unsafe impl CKDatabaseNotification {
        #[method(databaseScope)]
        pub unsafe fn databaseScope(&self) -> CKDatabaseScope;
    }
);

extern_methods!(
    /// Methods declared on superclass `CKNotification`
    /**
      @class CKQueryNotification

      @discussion @c notificationType == @c CKNotificationTypeQuery
      When properties must be dropped (see @c isPruned), here's the order of importance.  The most important properties are first, they'll be the last ones to be dropped.
      - notificationID
      - badge
      - alertLocalizationKey
      - alertLocalizationArgs
      - alertBody
      - alertActionLocalizationKey
      - alertLaunchImage
      - soundName
      - content-available
      - desiredKeys
      - queryNotificationReason
      - recordID
      - containerIdentifier
      - subscriptionOwnerUserRecordID
      - titleLocalizationKey
      - titleLocalizationArgs
      - title
      - subtitleLocalizationKey
      - subtitleLocalizationArgs
      - subtitle
    */
    #[cfg(feature = "CloudKit_CKQueryNotification")]
    unsafe impl CKQueryNotification {
        #[cfg(feature = "Foundation_NSDictionary")]
        #[method_id(@__retain_semantics Other notificationFromRemoteNotificationDictionary:)]
        pub unsafe fn notificationFromRemoteNotificationDictionary(
            notification_dictionary: &NSDictionary,
        ) -> Option<Id<Self>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `CKNotification`
    /**
      @class CKRecordZoneNotification

      @discussion @c notificationType == @c CKNotificationTypeRecordZone
      When properties must be dropped (see @c isPruned), here's the order of importance.  The most important properties are first, they'll be the last ones to be dropped.
      - notificationID
      - badge
      - alertLocalizationKey
      - alertLocalizationArgs
      - alertBody
      - alertActionLocalizationKey
      - alertLaunchImage
      - soundName
      - content-available
      - recordZoneID
      - containerIdentifier
      - subscriptionOwnerUserRecordID
      - titleLocalizationKey
      - titleLocalizationArgs
      - title
      - subtitleLocalizationKey
      - subtitleLocalizationArgs
      - subtitle
    */
    #[cfg(feature = "CloudKit_CKRecordZoneNotification")]
    unsafe impl CKRecordZoneNotification {
        #[cfg(feature = "Foundation_NSDictionary")]
        #[method_id(@__retain_semantics Other notificationFromRemoteNotificationDictionary:)]
        pub unsafe fn notificationFromRemoteNotificationDictionary(
            notification_dictionary: &NSDictionary,
        ) -> Option<Id<Self>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `CKNotification`
    /**
      @class CKDatabaseNotification

      @discussion @c notificationType == @c CKNotificationTypeDatabase
      When properties must be dropped (see @c isPruned), here's the order of importance.  The most important properties are first, they'll be the last ones to be dropped.
      - notificationID
      - badge
      - alertLocalizationKey
      - alertLocalizationArgs
      - alertBody
      - alertActionLocalizationKey
      - alertLaunchImage
      - soundName
      - content-available
      - containerIdentifier
      - subscriptionOwnerUserRecordID
      - titleLocalizationKey
      - titleLocalizationArgs
      - title
      - subtitleLocalizationKey
      - subtitleLocalizationArgs
      - subtitle
    */
    #[cfg(feature = "CloudKit_CKDatabaseNotification")]
    unsafe impl CKDatabaseNotification {
        #[cfg(feature = "Foundation_NSDictionary")]
        #[method_id(@__retain_semantics Other notificationFromRemoteNotificationDictionary:)]
        pub unsafe fn notificationFromRemoteNotificationDictionary(
            notification_dictionary: &NSDictionary,
        ) -> Option<Id<Self>>;
    }
);
