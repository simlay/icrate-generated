//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::CloudKit::*;
use crate::CoreLocation::*;
use crate::Foundation::*;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "CloudKit_CKDiscoverUserIdentitiesOperation")]
    pub struct CKDiscoverUserIdentitiesOperation;

    #[cfg(feature = "CloudKit_CKDiscoverUserIdentitiesOperation")]
    unsafe impl ClassType for CKDiscoverUserIdentitiesOperation {
        #[inherits(NSOperation, NSObject)]
        type Super = CKOperation;
    }
);

#[cfg(feature = "CloudKit_CKDiscoverUserIdentitiesOperation")]
unsafe impl NSObjectProtocol for CKDiscoverUserIdentitiesOperation {}

extern_methods!(
    #[cfg(feature = "CloudKit_CKDiscoverUserIdentitiesOperation")]
    unsafe impl CKDiscoverUserIdentitiesOperation {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

        #[cfg(all(
            feature = "CloudKit_CKUserIdentityLookupInfo",
            feature = "Foundation_NSArray"
        ))]
        #[method_id(@__retain_semantics Init initWithUserIdentityLookupInfos:)]
        pub unsafe fn initWithUserIdentityLookupInfos(
            this: Option<Allocated<Self>>,
            user_identity_lookup_infos: &NSArray<CKUserIdentityLookupInfo>,
        ) -> Id<Self>;

        #[cfg(all(
            feature = "CloudKit_CKUserIdentityLookupInfo",
            feature = "Foundation_NSArray"
        ))]
        #[method_id(@__retain_semantics Other userIdentityLookupInfos)]
        pub unsafe fn userIdentityLookupInfos(&self) -> Id<NSArray<CKUserIdentityLookupInfo>>;

        #[cfg(all(
            feature = "CloudKit_CKUserIdentityLookupInfo",
            feature = "Foundation_NSArray"
        ))]
        #[method(setUserIdentityLookupInfos:)]
        pub unsafe fn setUserIdentityLookupInfos(
            &self,
            user_identity_lookup_infos: &NSArray<CKUserIdentityLookupInfo>,
        );

        #[cfg(all(
            feature = "CloudKit_CKUserIdentity",
            feature = "CloudKit_CKUserIdentityLookupInfo"
        ))]
        /**
          @abstract Called once for each user identity lookup info that was successfully discovered on the server

          @discussion Each @c CKOperation instance has a private serial queue. This queue is used for all callback block invocations.
        */
        #[method(userIdentityDiscoveredBlock)]
        pub unsafe fn userIdentityDiscoveredBlock(
            &self,
        ) -> *mut Block<(NonNull<CKUserIdentity>, NonNull<CKUserIdentityLookupInfo>), ()>;

        #[cfg(all(
            feature = "CloudKit_CKUserIdentity",
            feature = "CloudKit_CKUserIdentityLookupInfo"
        ))]
        /**
          @abstract Called once for each user identity lookup info that was successfully discovered on the server

          @discussion Each @c CKOperation instance has a private serial queue. This queue is used for all callback block invocations.
        */
        #[method(setUserIdentityDiscoveredBlock:)]
        pub unsafe fn setUserIdentityDiscoveredBlock(
            &self,
            user_identity_discovered_block: Option<
                &Block<(NonNull<CKUserIdentity>, NonNull<CKUserIdentityLookupInfo>), ()>,
            >,
        );

        #[cfg(feature = "Foundation_NSError")]
        /**
          @abstract This block is called when the operation completes.

          @discussion The @code -[NSOperation completionBlock] @endcode will also be called if both are set.
          Each @c CKOperation instance has a private serial queue. This queue is used for all callback block invocations.
        */
        #[method(discoverUserIdentitiesCompletionBlock)]
        pub unsafe fn discoverUserIdentitiesCompletionBlock(
            &self,
        ) -> *mut Block<(*mut NSError,), ()>;

        #[cfg(feature = "Foundation_NSError")]
        /**
          @abstract This block is called when the operation completes.

          @discussion The @code -[NSOperation completionBlock] @endcode will also be called if both are set.
          Each @c CKOperation instance has a private serial queue. This queue is used for all callback block invocations.
        */
        #[method(setDiscoverUserIdentitiesCompletionBlock:)]
        pub unsafe fn setDiscoverUserIdentitiesCompletionBlock(
            &self,
            discover_user_identities_completion_block: Option<&Block<(*mut NSError,), ()>>,
        );
    }
);
