//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::CloudKit::*;
use crate::CoreLocation::*;
use crate::Foundation::*;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "CloudKit_CKFetchRecordChangesOperation")]
    /**
      @class CKFetchRecordChangesOperation

      @discussion Use CKFetchRecordZoneChangesOperation instead of this class.

      Any serverChangeTokens saved from a CKFetchRecordChangesOperation are usable as a serverRecordZoneChangeToken in CKFetchRecordZoneChangesOperation

      This operation will fetch records changes in the given record zone.

      If a change token from a previous @c CKFetchRecordChangesOperation is passed in, only the records that have changed since that token will be fetched.
      If this is your first fetch or if you wish to re-fetch all records, pass nil for the change token.
      Change tokens are opaque tokens and clients should not infer any behavior based on their content
    */
    #[deprecated]
    pub struct CKFetchRecordChangesOperation;

    #[cfg(feature = "CloudKit_CKFetchRecordChangesOperation")]
    unsafe impl ClassType for CKFetchRecordChangesOperation {
        #[inherits(CKOperation, NSOperation, NSObject)]
        type Super = CKDatabaseOperation;
    }
);

#[cfg(feature = "CloudKit_CKFetchRecordChangesOperation")]
/**
  @class CKFetchRecordChangesOperation

  @discussion Use CKFetchRecordZoneChangesOperation instead of this class.

  Any serverChangeTokens saved from a CKFetchRecordChangesOperation are usable as a serverRecordZoneChangeToken in CKFetchRecordZoneChangesOperation

  This operation will fetch records changes in the given record zone.

  If a change token from a previous @c CKFetchRecordChangesOperation is passed in, only the records that have changed since that token will be fetched.
  If this is your first fetch or if you wish to re-fetch all records, pass nil for the change token.
  Change tokens are opaque tokens and clients should not infer any behavior based on their content
*/
unsafe impl NSObjectProtocol for CKFetchRecordChangesOperation {}

extern_methods!(
    /**
      @class CKFetchRecordChangesOperation

      @discussion Use CKFetchRecordZoneChangesOperation instead of this class.

      Any serverChangeTokens saved from a CKFetchRecordChangesOperation are usable as a serverRecordZoneChangeToken in CKFetchRecordZoneChangesOperation

      This operation will fetch records changes in the given record zone.

      If a change token from a previous @c CKFetchRecordChangesOperation is passed in, only the records that have changed since that token will be fetched.
      If this is your first fetch or if you wish to re-fetch all records, pass nil for the change token.
      Change tokens are opaque tokens and clients should not infer any behavior based on their content
    */
    #[cfg(feature = "CloudKit_CKFetchRecordChangesOperation")]
    unsafe impl CKFetchRecordChangesOperation {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

        #[cfg(all(
            feature = "CloudKit_CKRecordZoneID",
            feature = "CloudKit_CKServerChangeToken"
        ))]
        #[method_id(@__retain_semantics Init initWithRecordZoneID:previousServerChangeToken:)]
        pub unsafe fn initWithRecordZoneID_previousServerChangeToken(
            this: Option<Allocated<Self>>,
            record_zone_id: &CKRecordZoneID,
            previous_server_change_token: Option<&CKServerChangeToken>,
        ) -> Id<Self>;

        #[cfg(feature = "CloudKit_CKRecordZoneID")]
        #[method_id(@__retain_semantics Other recordZoneID)]
        pub unsafe fn recordZoneID(&self) -> Option<Id<CKRecordZoneID>>;

        #[cfg(feature = "CloudKit_CKRecordZoneID")]
        #[method(setRecordZoneID:)]
        pub unsafe fn setRecordZoneID(&self, record_zone_id: Option<&CKRecordZoneID>);

        #[cfg(feature = "CloudKit_CKServerChangeToken")]
        #[method_id(@__retain_semantics Other previousServerChangeToken)]
        pub unsafe fn previousServerChangeToken(&self) -> Option<Id<CKServerChangeToken>>;

        #[cfg(feature = "CloudKit_CKServerChangeToken")]
        #[method(setPreviousServerChangeToken:)]
        pub unsafe fn setPreviousServerChangeToken(
            &self,
            previous_server_change_token: Option<&CKServerChangeToken>,
        );

        #[method(resultsLimit)]
        pub unsafe fn resultsLimit(&self) -> NSUInteger;

        #[method(setResultsLimit:)]
        pub unsafe fn setResultsLimit(&self, results_limit: NSUInteger);

        #[cfg(feature = "Foundation_NSArray")]
        /**
          @abstract Declares which user-defined keys should be fetched and added to the resulting CKRecords.

          @discussion If nil, declares the entire record should be downloaded. If set to an empty array, declares that no user fields should be downloaded.
          Defaults to @c nil.
        */
        #[method_id(@__retain_semantics Other desiredKeys)]
        pub unsafe fn desiredKeys(&self) -> Option<Id<NSArray<CKRecordFieldKey>>>;

        #[cfg(feature = "Foundation_NSArray")]
        /**
          @abstract Declares which user-defined keys should be fetched and added to the resulting CKRecords.

          @discussion If nil, declares the entire record should be downloaded. If set to an empty array, declares that no user fields should be downloaded.
          Defaults to @c nil.
        */
        #[method(setDesiredKeys:)]
        pub unsafe fn setDesiredKeys(&self, desired_keys: Option<&NSArray<CKRecordFieldKey>>);

        #[cfg(feature = "CloudKit_CKRecord")]
        /**
         ! @discussion Each @c CKOperation instance has a private serial queue. This queue is used for all callback block invocations.
        */
        #[method(recordChangedBlock)]
        pub unsafe fn recordChangedBlock(&self) -> *mut Block<(NonNull<CKRecord>,), ()>;

        #[cfg(feature = "CloudKit_CKRecord")]
        /**
         ! @discussion Each @c CKOperation instance has a private serial queue. This queue is used for all callback block invocations.
        */
        #[method(setRecordChangedBlock:)]
        pub unsafe fn setRecordChangedBlock(
            &self,
            record_changed_block: Option<&Block<(NonNull<CKRecord>,), ()>>,
        );

        #[cfg(feature = "CloudKit_CKRecordID")]
        /**
         ! @discussion Each @c CKOperation instance has a private serial queue. This queue is used for all callback block invocations.
        */
        #[method(recordWithIDWasDeletedBlock)]
        pub unsafe fn recordWithIDWasDeletedBlock(&self) -> *mut Block<(NonNull<CKRecordID>,), ()>;

        #[cfg(feature = "CloudKit_CKRecordID")]
        /**
         ! @discussion Each @c CKOperation instance has a private serial queue. This queue is used for all callback block invocations.
        */
        #[method(setRecordWithIDWasDeletedBlock:)]
        pub unsafe fn setRecordWithIDWasDeletedBlock(
            &self,
            record_with_id_was_deleted_block: Option<&Block<(NonNull<CKRecordID>,), ()>>,
        );

        /**
          @abstract If true, then the server wasn't able to return all the changes in this response.

          @discussion Will be set before fetchRecordChangesCompletionBlock is called.
          Another CKFetchRecordChangesOperation operation should be run with the updated serverChangeToken token from this operation.
        */
        #[method(moreComing)]
        pub unsafe fn moreComing(&self) -> bool;

        #[cfg(all(
            feature = "CloudKit_CKServerChangeToken",
            feature = "Foundation_NSData",
            feature = "Foundation_NSError"
        ))]
        /**
          @abstract This block is called when the operation completes.

          @discussion Clients are responsible for saving the change token at the end of the operation and passing it in to the next call to @c CKFetchRecordChangesOperation.
          Note that a fetch can fail partway. If that happens, an updated change token may be returned in the completion block so that already fetched records don't need to be re-downloaded on a subsequent operation.
          The @c clientChangeTokenData from the most recent @c CKModifyRecordsOperation is also returned, or nil if none was provided.
          If the server returns a @c CKErrorChangeTokenExpired error, the @c previousServerChangeToken value was too old and the client should toss its local cache and re-fetch the changes in this record zone starting with a nil @c previousServerChangeToken.
          Each @c CKOperation instance has a private serial queue. This queue is used for all callback block invocations.
        */
        #[method(fetchRecordChangesCompletionBlock)]
        pub unsafe fn fetchRecordChangesCompletionBlock(
            &self,
        ) -> *mut Block<(*mut CKServerChangeToken, *mut NSData, *mut NSError), ()>;

        #[cfg(all(
            feature = "CloudKit_CKServerChangeToken",
            feature = "Foundation_NSData",
            feature = "Foundation_NSError"
        ))]
        /**
          @abstract This block is called when the operation completes.

          @discussion Clients are responsible for saving the change token at the end of the operation and passing it in to the next call to @c CKFetchRecordChangesOperation.
          Note that a fetch can fail partway. If that happens, an updated change token may be returned in the completion block so that already fetched records don't need to be re-downloaded on a subsequent operation.
          The @c clientChangeTokenData from the most recent @c CKModifyRecordsOperation is also returned, or nil if none was provided.
          If the server returns a @c CKErrorChangeTokenExpired error, the @c previousServerChangeToken value was too old and the client should toss its local cache and re-fetch the changes in this record zone starting with a nil @c previousServerChangeToken.
          Each @c CKOperation instance has a private serial queue. This queue is used for all callback block invocations.
        */
        #[method(setFetchRecordChangesCompletionBlock:)]
        pub unsafe fn setFetchRecordChangesCompletionBlock(
            &self,
            fetch_record_changes_completion_block: Option<
                &Block<(*mut CKServerChangeToken, *mut NSData, *mut NSError), ()>,
            >,
        );
    }
);
