//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::ClassKit::*;
use crate::Foundation::*;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "ClassKit_CLSActivity")]
    /**
     @abstract      CLSActivity represents user generated activity data for a given context.
    @discussion    CLSActivity has three major components.

    (1) Progress, used to measure the amount of activity a user generates as a percentage.
    (2) Duration, used to measure the length of time a user spent on this activity. Use @c -start and @c -stop methods.
    (3) Activity Items, used to gather information about the activity generated by a user.
    */
    pub struct CLSActivity;

    #[cfg(feature = "ClassKit_CLSActivity")]
    unsafe impl ClassType for CLSActivity {
        #[inherits(NSObject)]
        type Super = CLSObject;
    }
);

#[cfg(feature = "ClassKit_CLSActivity")]
/**
 @abstract      CLSActivity represents user generated activity data for a given context.
@discussion    CLSActivity has three major components.

(1) Progress, used to measure the amount of activity a user generates as a percentage.
(2) Duration, used to measure the length of time a user spent on this activity. Use @c -start and @c -stop methods.
(3) Activity Items, used to gather information about the activity generated by a user.
*/
unsafe impl NSCoding for CLSActivity {}

#[cfg(feature = "ClassKit_CLSActivity")]
/**
 @abstract      CLSActivity represents user generated activity data for a given context.
@discussion    CLSActivity has three major components.

(1) Progress, used to measure the amount of activity a user generates as a percentage.
(2) Duration, used to measure the length of time a user spent on this activity. Use @c -start and @c -stop methods.
(3) Activity Items, used to gather information about the activity generated by a user.
*/
unsafe impl NSObjectProtocol for CLSActivity {}

#[cfg(feature = "ClassKit_CLSActivity")]
/**
 @abstract      CLSActivity represents user generated activity data for a given context.
@discussion    CLSActivity has three major components.

(1) Progress, used to measure the amount of activity a user generates as a percentage.
(2) Duration, used to measure the length of time a user spent on this activity. Use @c -start and @c -stop methods.
(3) Activity Items, used to gather information about the activity generated by a user.
*/
unsafe impl NSSecureCoding for CLSActivity {}

extern_methods!(
    /**
     @abstract      CLSActivity represents user generated activity data for a given context.
    @discussion    CLSActivity has three major components.

    (1) Progress, used to measure the amount of activity a user generates as a percentage.
    (2) Duration, used to measure the length of time a user spent on this activity. Use @c -start and @c -stop methods.
    (3) Activity Items, used to gather information about the activity generated by a user.
    */
    #[cfg(feature = "ClassKit_CLSActivity")]
    unsafe impl CLSActivity {
        /**
         @abstract      Current progress as a decimal representation of a percentage.
        @discussion    Should be [0.0, 1.0].
        */
        #[method(progress)]
        pub unsafe fn progress(&self) -> c_double;

        /**
         @abstract      Current progress as a decimal representation of a percentage.
        @discussion    Should be [0.0, 1.0].
        */
        #[method(setProgress:)]
        pub unsafe fn setProgress(&self, progress: c_double);

        /**
         @abstract      Returns the total time tracked in this activity (excluding any previous activities).
        @discussion    The time between calling @c -start and @c -stop.
        */
        #[method(duration)]
        pub unsafe fn duration(&self) -> NSTimeInterval;

        #[cfg(feature = "ClassKit_CLSActivityItem")]
        /**
         @abstract      The primary activityItem to be reported on.
        @discussion    This can be nil indicating @c progress property is the primary data instead of any activityItems.
        */
        #[method_id(@__retain_semantics Other primaryActivityItem)]
        pub unsafe fn primaryActivityItem(&self) -> Option<Id<CLSActivityItem>>;

        #[cfg(feature = "ClassKit_CLSActivityItem")]
        /**
         @abstract      The primary activityItem to be reported on.
        @discussion    This can be nil indicating @c progress property is the primary data instead of any activityItems.
        */
        #[method(setPrimaryActivityItem:)]
        pub unsafe fn setPrimaryActivityItem(
            &self,
            primary_activity_item: Option<&CLSActivityItem>,
        );

        #[method(addProgressRangeFromStart:toEnd:)]
        pub unsafe fn addProgressRangeFromStart_toEnd(&self, start: c_double, end: c_double);

        #[cfg(feature = "ClassKit_CLSActivityItem")]
        #[method(addAdditionalActivityItem:)]
        pub unsafe fn addAdditionalActivityItem(&self, activity_item: &CLSActivityItem);

        #[cfg(all(feature = "ClassKit_CLSActivityItem", feature = "Foundation_NSArray"))]
        /**
         @abstract      Array of all additional activity items on this CLSActivity.
        */
        #[method_id(@__retain_semantics Other additionalActivityItems)]
        pub unsafe fn additionalActivityItems(&self) -> Id<NSArray<CLSActivityItem>>;
    }
);

extern_methods!(
    /// Activation
    #[cfg(feature = "ClassKit_CLSActivity")]
    unsafe impl CLSActivity {
        /**
         @abstract      Returns whether this Activity has been started or not.
        */
        #[method(isStarted)]
        pub unsafe fn isStarted(&self) -> bool;

        #[method(start)]
        pub unsafe fn start(&self);

        #[method(stop)]
        pub unsafe fn stop(&self);

        #[method(removeAllActivityItems)]
        pub unsafe fn removeAllActivityItems(&self);
    }
);

extern_methods!(
    /// Activity
    #[cfg(feature = "ClassKit_CLSContext")]
    unsafe impl CLSContext {
        #[cfg(feature = "ClassKit_CLSActivity")]
        /**
         @abstract      Returns the current activity.
        @discussion    Activity associated with a context.  If no activity was ever created this is nil. See: @c -[CLSContext createNewActivity]; for more details.
        */
        #[method_id(@__retain_semantics Other currentActivity)]
        pub unsafe fn currentActivity(&self) -> Option<Id<CLSActivity>>;

        #[cfg(feature = "ClassKit_CLSActivity")]
        #[method_id(@__retain_semantics Other createNewActivity)]
        pub unsafe fn createNewActivity(&self) -> Id<CLSActivity>;
    }
);
