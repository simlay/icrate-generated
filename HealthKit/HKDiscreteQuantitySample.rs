//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::CoreLocation::*;
use crate::Foundation::*;
use crate::HealthKit::*;
use crate::UniformTypeIdentifiers::*;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "HealthKit_HKDiscreteQuantitySample")]
    /**
     @class         HKDiscreteQuantitySample
    @abstract      An HKQuantitySample subclass representing a quantity measurement with
    discrete aggregation style.
    */
    pub struct HKDiscreteQuantitySample;

    #[cfg(feature = "HealthKit_HKDiscreteQuantitySample")]
    unsafe impl ClassType for HKDiscreteQuantitySample {
        #[inherits(HKSample, HKObject, NSObject)]
        type Super = HKQuantitySample;
    }
);

#[cfg(feature = "HealthKit_HKDiscreteQuantitySample")]
/**
 @class         HKDiscreteQuantitySample
@abstract      An HKQuantitySample subclass representing a quantity measurement with
discrete aggregation style.
*/
unsafe impl NSCoding for HKDiscreteQuantitySample {}

#[cfg(feature = "HealthKit_HKDiscreteQuantitySample")]
/**
 @class         HKDiscreteQuantitySample
@abstract      An HKQuantitySample subclass representing a quantity measurement with
discrete aggregation style.
*/
unsafe impl NSObjectProtocol for HKDiscreteQuantitySample {}

#[cfg(feature = "HealthKit_HKDiscreteQuantitySample")]
/**
 @class         HKDiscreteQuantitySample
@abstract      An HKQuantitySample subclass representing a quantity measurement with
discrete aggregation style.
*/
unsafe impl NSSecureCoding for HKDiscreteQuantitySample {}

extern_methods!(
    /**
     @class         HKDiscreteQuantitySample
    @abstract      An HKQuantitySample subclass representing a quantity measurement with
    discrete aggregation style.
    */
    #[cfg(feature = "HealthKit_HKDiscreteQuantitySample")]
    unsafe impl HKDiscreteQuantitySample {
        #[cfg(feature = "HealthKit_HKQuantity")]
        /**
         @property      minimumQuantity
        @abstract      The minimum of the receiver's quantities
        */
        #[method_id(@__retain_semantics Other minimumQuantity)]
        pub unsafe fn minimumQuantity(&self) -> Id<HKQuantity>;

        #[cfg(feature = "HealthKit_HKQuantity")]
        /**
         @property      averageQuantity
        @abstract      The average of the receiver's quantities
        */
        #[method_id(@__retain_semantics Other averageQuantity)]
        pub unsafe fn averageQuantity(&self) -> Id<HKQuantity>;

        #[cfg(feature = "HealthKit_HKQuantity")]
        /**
         @property      maximumQuantity
        @abstract      The maximum of the receiver's quantities
        */
        #[method_id(@__retain_semantics Other maximumQuantity)]
        pub unsafe fn maximumQuantity(&self) -> Id<HKQuantity>;

        #[cfg(feature = "HealthKit_HKQuantity")]
        /**
         @property      mostRecentQuantity
        @abstract      The receiver's quantity with most recent date interval
        */
        #[method_id(@__retain_semantics Other mostRecentQuantity)]
        pub unsafe fn mostRecentQuantity(&self) -> Id<HKQuantity>;

        #[cfg(feature = "Foundation_NSDateInterval")]
        /**
         @property      mostRecentQuantityDateInterval
        @abstract      The date interval for the receiver's most recent quantity
        */
        #[method_id(@__retain_semantics Other mostRecentQuantityDateInterval)]
        pub unsafe fn mostRecentQuantityDateInterval(&self) -> Id<NSDateInterval>;
    }
);

extern_static!(HKPredicateKeyPathMin: &'static NSString);

extern_static!(HKPredicateKeyPathAverage: &'static NSString);

extern_static!(HKPredicateKeyPathMax: &'static NSString);

extern_static!(HKPredicateKeyPathMostRecent: &'static NSString);

extern_static!(HKPredicateKeyPathMostRecentStartDate: &'static NSString);

extern_static!(HKPredicateKeyPathMostRecentEndDate: &'static NSString);

extern_static!(HKPredicateKeyPathMostRecentDuration: &'static NSString);

extern_methods!(
    /// Methods declared on superclass `HKQuantitySample`
    /**
     @class         HKDiscreteQuantitySample
    @abstract      An HKQuantitySample subclass representing a quantity measurement with
    discrete aggregation style.
    */
    #[cfg(feature = "HealthKit_HKDiscreteQuantitySample")]
    unsafe impl HKDiscreteQuantitySample {
        #[cfg(all(
            feature = "Foundation_NSDate",
            feature = "HealthKit_HKQuantity",
            feature = "HealthKit_HKQuantityType"
        ))]
        #[method_id(@__retain_semantics Other quantitySampleWithType:quantity:startDate:endDate:)]
        pub unsafe fn quantitySampleWithType_quantity_startDate_endDate(
            quantity_type: &HKQuantityType,
            quantity: &HKQuantity,
            start_date: &NSDate,
            end_date: &NSDate,
        ) -> Id<Self>;

        #[cfg(all(
            feature = "Foundation_NSDate",
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSString",
            feature = "HealthKit_HKQuantity",
            feature = "HealthKit_HKQuantityType"
        ))]
        #[method_id(@__retain_semantics Other quantitySampleWithType:quantity:startDate:endDate:metadata:)]
        pub unsafe fn quantitySampleWithType_quantity_startDate_endDate_metadata(
            quantity_type: &HKQuantityType,
            quantity: &HKQuantity,
            start_date: &NSDate,
            end_date: &NSDate,
            metadata: Option<&NSDictionary<NSString, Object>>,
        ) -> Id<Self>;

        #[cfg(all(
            feature = "Foundation_NSDate",
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSString",
            feature = "HealthKit_HKDevice",
            feature = "HealthKit_HKQuantity",
            feature = "HealthKit_HKQuantityType"
        ))]
        #[method_id(@__retain_semantics Other quantitySampleWithType:quantity:startDate:endDate:device:metadata:)]
        pub unsafe fn quantitySampleWithType_quantity_startDate_endDate_device_metadata(
            quantity_type: &HKQuantityType,
            quantity: &HKQuantity,
            start_date: &NSDate,
            end_date: &NSDate,
            device: Option<&HKDevice>,
            metadata: Option<&NSDictionary<NSString, Object>>,
        ) -> Id<Self>;
    }
);
