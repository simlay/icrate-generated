//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::CoreLocation::*;
use crate::Foundation::*;
use crate::HealthKit::*;
use crate::UniformTypeIdentifiers::*;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "HealthKit_HKHeartbeatSeriesBuilder")]
    /**
     @class              HKHeartbeatSeriesBuilder
    @abstract           An HKHeartbeatSeriesBuilder is used to generate an HKHeartbeatSeriesSample.
    @discussion         This class is intended for generating an HKHeartbeatSeriesSample which represents a series of
    heartbeats. If the discard method is called, collected data will be deleted.
    Calling finishSeriesWithcompletion: will stop and complete the series. If the builder is deleted,
    or the client goes away before calling the finish method, data will be lost.
    */
    pub struct HKHeartbeatSeriesBuilder;

    #[cfg(feature = "HealthKit_HKHeartbeatSeriesBuilder")]
    unsafe impl ClassType for HKHeartbeatSeriesBuilder {
        #[inherits(NSObject)]
        type Super = HKSeriesBuilder;
    }
);

#[cfg(feature = "HealthKit_HKHeartbeatSeriesBuilder")]
/**
 @class              HKHeartbeatSeriesBuilder
@abstract           An HKHeartbeatSeriesBuilder is used to generate an HKHeartbeatSeriesSample.
@discussion         This class is intended for generating an HKHeartbeatSeriesSample which represents a series of
heartbeats. If the discard method is called, collected data will be deleted.
Calling finishSeriesWithcompletion: will stop and complete the series. If the builder is deleted,
or the client goes away before calling the finish method, data will be lost.
*/
unsafe impl NSObjectProtocol for HKHeartbeatSeriesBuilder {}

extern_methods!(
    /**
     @class              HKHeartbeatSeriesBuilder
    @abstract           An HKHeartbeatSeriesBuilder is used to generate an HKHeartbeatSeriesSample.
    @discussion         This class is intended for generating an HKHeartbeatSeriesSample which represents a series of
    heartbeats. If the discard method is called, collected data will be deleted.
    Calling finishSeriesWithcompletion: will stop and complete the series. If the builder is deleted,
    or the client goes away before calling the finish method, data will be lost.
    */
    #[cfg(feature = "HealthKit_HKHeartbeatSeriesBuilder")]
    unsafe impl HKHeartbeatSeriesBuilder {
        /**
         @property           maximumCount
        @abstract           The maximum number of heartbeats that can be added to an HKHeartbeatSeriesBuilder.
        @discussion         Any calls to addHeartbeatWithTimeIntervalSinceSeriesStartDate:precededByGap:completion: once
        maximumCount has been reached will fail and an error will be returned in the completion handler.
        */
        #[method(maximumCount)]
        pub unsafe fn maximumCount() -> NSUInteger;

        #[cfg(all(
            feature = "Foundation_NSDate",
            feature = "HealthKit_HKDevice",
            feature = "HealthKit_HKHealthStore"
        ))]
        #[method_id(@__retain_semantics Init initWithHealthStore:device:startDate:)]
        pub unsafe fn initWithHealthStore_device_startDate(
            this: Option<Allocated<Self>>,
            health_store: &HKHealthStore,
            device: Option<&HKDevice>,
            start_date: &NSDate,
        ) -> Id<Self>;

        #[cfg(feature = "Foundation_NSError")]
        #[method(addHeartbeatWithTimeIntervalSinceSeriesStartDate:precededByGap:completion:)]
        pub unsafe fn addHeartbeatWithTimeIntervalSinceSeriesStartDate_precededByGap_completion(
            &self,
            time_interval_since_start: NSTimeInterval,
            preceded_by_gap: bool,
            completion: &Block<(Bool, *mut NSError), ()>,
        );

        #[cfg(all(
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSError",
            feature = "Foundation_NSString"
        ))]
        #[method(addMetadata:completion:)]
        pub unsafe fn addMetadata_completion(
            &self,
            metadata: &NSDictionary<NSString, Object>,
            completion: &Block<(Bool, *mut NSError), ()>,
        );

        #[cfg(all(
            feature = "Foundation_NSError",
            feature = "HealthKit_HKHeartbeatSeriesSample"
        ))]
        #[method(finishSeriesWithCompletion:)]
        pub unsafe fn finishSeriesWithCompletion(
            &self,
            completion: &Block<(*mut HKHeartbeatSeriesSample, *mut NSError), ()>,
        );
    }
);
