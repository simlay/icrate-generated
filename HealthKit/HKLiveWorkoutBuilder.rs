//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::CoreLocation::*;
use crate::Foundation::*;
use crate::HealthKit::*;
use crate::UniformTypeIdentifiers::*;

extern_protocol!(
    pub unsafe trait HKLiveWorkoutBuilderDelegate: NSObjectProtocol {
        #[cfg(all(
            feature = "Foundation_NSSet",
            feature = "HealthKit_HKLiveWorkoutBuilder",
            feature = "HealthKit_HKSampleType"
        ))]
        #[method(workoutBuilder:didCollectDataOfTypes:)]
        unsafe fn workoutBuilder_didCollectDataOfTypes(
            &self,
            workout_builder: &HKLiveWorkoutBuilder,
            collected_types: &NSSet<HKSampleType>,
        );

        #[cfg(feature = "HealthKit_HKLiveWorkoutBuilder")]
        #[method(workoutBuilderDidCollectEvent:)]
        unsafe fn workoutBuilderDidCollectEvent(&self, workout_builder: &HKLiveWorkoutBuilder);

        #[cfg(all(
            feature = "HealthKit_HKLiveWorkoutBuilder",
            feature = "HealthKit_HKWorkoutActivity"
        ))]
        #[optional]
        #[method(workoutBuilder:didBeginActivity:)]
        unsafe fn workoutBuilder_didBeginActivity(
            &self,
            workout_builder: &HKLiveWorkoutBuilder,
            workout_activity: &HKWorkoutActivity,
        );

        #[cfg(all(
            feature = "HealthKit_HKLiveWorkoutBuilder",
            feature = "HealthKit_HKWorkoutActivity"
        ))]
        #[optional]
        #[method(workoutBuilder:didEndActivity:)]
        unsafe fn workoutBuilder_didEndActivity(
            &self,
            workout_builder: &HKLiveWorkoutBuilder,
            workout_activity: &HKWorkoutActivity,
        );
    }

    unsafe impl ProtocolType for dyn HKLiveWorkoutBuilderDelegate {}
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "HealthKit_HKLiveWorkoutBuilder")]
    pub struct HKLiveWorkoutBuilder;

    #[cfg(feature = "HealthKit_HKLiveWorkoutBuilder")]
    unsafe impl ClassType for HKLiveWorkoutBuilder {
        #[inherits(NSObject)]
        type Super = HKWorkoutBuilder;
    }
);

#[cfg(feature = "HealthKit_HKLiveWorkoutBuilder")]
unsafe impl NSObjectProtocol for HKLiveWorkoutBuilder {}

extern_methods!(
    #[cfg(feature = "HealthKit_HKLiveWorkoutBuilder")]
    unsafe impl HKLiveWorkoutBuilder {
        #[cfg(all(
            feature = "HealthKit_HKDevice",
            feature = "HealthKit_HKHealthStore",
            feature = "HealthKit_HKWorkoutConfiguration"
        ))]
        #[method_id(@__retain_semantics Init initWithHealthStore:configuration:device:)]
        pub unsafe fn initWithHealthStore_configuration_device(
            this: Option<Allocated<Self>>,
            health_store: &HKHealthStore,
            configuration: &HKWorkoutConfiguration,
            device: Option<&HKDevice>,
        ) -> Id<Self>;

        /**
         @property      delegate
        @abstract      The delegate object which will be notified of changes to collected data and elapsed workout time.
        */
        #[method_id(@__retain_semantics Other delegate)]
        pub unsafe fn delegate(
            &self,
        ) -> Option<Id<ProtocolObject<dyn HKLiveWorkoutBuilderDelegate>>>;

        /**
         @property      delegate
        @abstract      The delegate object which will be notified of changes to collected data and elapsed workout time.
        */
        #[method(setDelegate:)]
        pub unsafe fn setDelegate(
            &self,
            delegate: Option<&ProtocolObject<dyn HKLiveWorkoutBuilderDelegate>>,
        );

        #[cfg(feature = "HealthKit_HKWorkoutSession")]
        /**
         @property      workoutSession
        @abstract      The workout session with which this builder is associated.
        */
        #[method_id(@__retain_semantics Other workoutSession)]
        pub unsafe fn workoutSession(&self) -> Option<Id<HKWorkoutSession>>;

        /**
         @property      shouldCollectWorkoutEvents
        @abstract      Whether or not the builder should automatically incorporate events generated by the session.
        @discussion    YES if the builder should automatically incorporate events from the associated session. If NO, the client
        is expected to add relevant events directly to the builder and those generated by the session will be
        ignored. Defaults to YES. The result of changing this value after a call to
        beginCollectionWithStartDate:completion: is undefined.
        */
        #[method(shouldCollectWorkoutEvents)]
        pub unsafe fn shouldCollectWorkoutEvents(&self) -> bool;

        /**
         @property      shouldCollectWorkoutEvents
        @abstract      Whether or not the builder should automatically incorporate events generated by the session.
        @discussion    YES if the builder should automatically incorporate events from the associated session. If NO, the client
        is expected to add relevant events directly to the builder and those generated by the session will be
        ignored. Defaults to YES. The result of changing this value after a call to
        beginCollectionWithStartDate:completion: is undefined.
        */
        #[method(setShouldCollectWorkoutEvents:)]
        pub unsafe fn setShouldCollectWorkoutEvents(&self, should_collect_workout_events: bool);

        #[cfg(feature = "HealthKit_HKLiveWorkoutDataSource")]
        /**
         @property      dataSource
        @abstract      The data source that will provide data to this workout builder.
        */
        #[method_id(@__retain_semantics Other dataSource)]
        pub unsafe fn dataSource(&self) -> Option<Id<HKLiveWorkoutDataSource>>;

        #[cfg(feature = "HealthKit_HKLiveWorkoutDataSource")]
        /**
         @property      dataSource
        @abstract      The data source that will provide data to this workout builder.
        */
        #[method(setDataSource:)]
        pub unsafe fn setDataSource(&self, data_source: Option<&HKLiveWorkoutDataSource>);

        /**
         @property      elapsedTime
        @abstract      The elapsed duration of the workout as constructed thus far, considering paused time. When the builder
        is reading events from an active session, it is possible for this value to increase or decrease;
        when this occurs, the workoutBuilderDidCollectEvent: delegate method will be called.
        */
        #[method(elapsedTime)]
        pub unsafe fn elapsedTime(&self) -> NSTimeInterval;

        #[cfg(feature = "HealthKit_HKWorkoutActivity")]
        /**
         @property      currentWorkoutActivity
        @abstract      The latest activity that has been added to this builder.
        @discussion    When an activity is in progress it will be returned by this property. The end date of this activity will always
        be nil. When the activity is ended, the property would be set to nil until a new activity begins.
        */
        #[method_id(@__retain_semantics Other currentWorkoutActivity)]
        pub unsafe fn currentWorkoutActivity(&self) -> Option<Id<HKWorkoutActivity>>;
    }
);
