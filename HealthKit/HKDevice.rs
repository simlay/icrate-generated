//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::CoreLocation::*;
use crate::Foundation::*;
use crate::HealthKit::*;
use crate::UniformTypeIdentifiers::*;

extern_static!(HKDevicePropertyKeyName: &'static NSString);

extern_static!(HKDevicePropertyKeyManufacturer: &'static NSString);

extern_static!(HKDevicePropertyKeyModel: &'static NSString);

extern_static!(HKDevicePropertyKeyHardwareVersion: &'static NSString);

extern_static!(HKDevicePropertyKeyFirmwareVersion: &'static NSString);

extern_static!(HKDevicePropertyKeySoftwareVersion: &'static NSString);

extern_static!(HKDevicePropertyKeyLocalIdentifier: &'static NSString);

extern_static!(HKDevicePropertyKeyUDIDeviceIdentifier: &'static NSString);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "HealthKit_HKDevice")]
    pub struct HKDevice;

    #[cfg(feature = "HealthKit_HKDevice")]
    unsafe impl ClassType for HKDevice {
        type Super = NSObject;
    }
);

#[cfg(feature = "HealthKit_HKDevice")]
unsafe impl NSCoding for HKDevice {}

#[cfg(feature = "HealthKit_HKDevice")]
unsafe impl NSObjectProtocol for HKDevice {}

#[cfg(feature = "HealthKit_HKDevice")]
unsafe impl NSSecureCoding for HKDevice {}

extern_methods!(
    #[cfg(feature = "HealthKit_HKDevice")]
    unsafe impl HKDevice {
        #[cfg(feature = "Foundation_NSString")]
        /**
         @property      name
        @abstract      The name of the receiver.
        @discussion    The user-facing name, such as the one displayed in the Bluetooth Settings for a BLE device.
        */
        #[method_id(@__retain_semantics Other name)]
        pub unsafe fn name(&self) -> Option<Id<NSString>>;

        #[cfg(feature = "Foundation_NSString")]
        /**
         @property      manufacturer
        @abstract      The manufacturer of the receiver.
        */
        #[method_id(@__retain_semantics Other manufacturer)]
        pub unsafe fn manufacturer(&self) -> Option<Id<NSString>>;

        #[cfg(feature = "Foundation_NSString")]
        /**
         @property      model
        @abstract      The model of the receiver.
        */
        #[method_id(@__retain_semantics Other model)]
        pub unsafe fn model(&self) -> Option<Id<NSString>>;

        #[cfg(feature = "Foundation_NSString")]
        /**
         @property      hardwareVersion
        @abstract      The hardware revision of the receiver.
        */
        #[method_id(@__retain_semantics Other hardwareVersion)]
        pub unsafe fn hardwareVersion(&self) -> Option<Id<NSString>>;

        #[cfg(feature = "Foundation_NSString")]
        /**
         @property      firmwareVersion
        @abstract      The firmware revision of the receiver.
        */
        #[method_id(@__retain_semantics Other firmwareVersion)]
        pub unsafe fn firmwareVersion(&self) -> Option<Id<NSString>>;

        #[cfg(feature = "Foundation_NSString")]
        /**
         @property      softwareVersion
        @abstract      The software revision of the receiver.
        */
        #[method_id(@__retain_semantics Other softwareVersion)]
        pub unsafe fn softwareVersion(&self) -> Option<Id<NSString>>;

        #[cfg(feature = "Foundation_NSString")]
        /**
         @property      localIdentifier
        @abstract      A unique identifier for the receiver.
        @discussion    This property is available to clients for a local identifier.
        For example, Bluetooth peripherals managed by HealthKit use this
        for the CoreBluetooth UUID which is valid only on the local
        device and thus distinguish the same Bluetooth peripheral used
        between multiple devices.
        */
        #[method_id(@__retain_semantics Other localIdentifier)]
        pub unsafe fn localIdentifier(&self) -> Option<Id<NSString>>;

        #[cfg(feature = "Foundation_NSString")]
        /**
         @property      UDIDeviceIdentifier
        @abstract      Represents the device identifier portion of a device's FDA UDI (Unique Device Identifier).
        @discussion    The device identifier can be used to reference the FDA's GUDID (Globally Unique Device
        Identifier Database). Note that for user privacy concerns this field should not be used to
        persist the production identifier portion of the device UDI. HealthKit clients should manage
        the production identifier independently, if needed.
        See http://www.fda.gov/MedicalDevices/DeviceRegulationandGuidance/UniqueDeviceIdentification/ for more information.
        */
        #[method_id(@__retain_semantics Other UDIDeviceIdentifier)]
        pub unsafe fn UDIDeviceIdentifier(&self) -> Option<Id<NSString>>;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Init initWithName:manufacturer:model:hardwareVersion:firmwareVersion:softwareVersion:localIdentifier:UDIDeviceIdentifier:)]
        pub unsafe fn initWithName_manufacturer_model_hardwareVersion_firmwareVersion_softwareVersion_localIdentifier_UDIDeviceIdentifier(
            this: Option<Allocated<Self>>,
            name: Option<&NSString>,
            manufacturer: Option<&NSString>,
            model: Option<&NSString>,
            hardware_version: Option<&NSString>,
            firmware_version: Option<&NSString>,
            software_version: Option<&NSString>,
            local_identifier: Option<&NSString>,
            udi_device_identifier: Option<&NSString>,
        ) -> Id<Self>;

        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

        #[method_id(@__retain_semantics Other localDevice)]
        pub unsafe fn localDevice() -> Id<HKDevice>;
    }
);
