//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::CoreLocation::*;
use crate::Foundation::*;
use crate::HealthKit::*;
use crate::UniformTypeIdentifiers::*;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "HealthKit_HKContactsPrescription")]
    /**
     @class         HKContactsPrescription
    @abstract      An object representing a contacts prescription
    */
    pub struct HKContactsPrescription;

    #[cfg(feature = "HealthKit_HKContactsPrescription")]
    unsafe impl ClassType for HKContactsPrescription {
        #[inherits(HKSample, HKObject, NSObject)]
        type Super = HKVisionPrescription;
    }
);

#[cfg(feature = "HealthKit_HKContactsPrescription")]
/**
 @class         HKContactsPrescription
@abstract      An object representing a contacts prescription
*/
unsafe impl NSCoding for HKContactsPrescription {}

#[cfg(feature = "HealthKit_HKContactsPrescription")]
/**
 @class         HKContactsPrescription
@abstract      An object representing a contacts prescription
*/
unsafe impl NSObjectProtocol for HKContactsPrescription {}

#[cfg(feature = "HealthKit_HKContactsPrescription")]
/**
 @class         HKContactsPrescription
@abstract      An object representing a contacts prescription
*/
unsafe impl NSSecureCoding for HKContactsPrescription {}

extern_methods!(
    /**
     @class         HKContactsPrescription
    @abstract      An object representing a contacts prescription
    */
    #[cfg(feature = "HealthKit_HKContactsPrescription")]
    unsafe impl HKContactsPrescription {
        #[cfg(feature = "HealthKit_HKContactsLensSpecification")]
        /**
         @property      rightEye
        @abstract      The right eye lens specification
        */
        #[method_id(@__retain_semantics Other rightEye)]
        pub unsafe fn rightEye(&self) -> Option<Id<HKContactsLensSpecification>>;

        #[cfg(feature = "HealthKit_HKContactsLensSpecification")]
        /**
         @property      leftEye
        @abstract      The left eye lens specification
        */
        #[method_id(@__retain_semantics Other leftEye)]
        pub unsafe fn leftEye(&self) -> Option<Id<HKContactsLensSpecification>>;

        #[cfg(feature = "Foundation_NSString")]
        /**
         @property      brand
        @abstract      The prescribed brand after contact lens fitting
        */
        #[method_id(@__retain_semantics Other brand)]
        pub unsafe fn brand(&self) -> Id<NSString>;

        #[cfg(all(
            feature = "Foundation_NSDate",
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSString",
            feature = "HealthKit_HKContactsLensSpecification",
            feature = "HealthKit_HKDevice"
        ))]
        #[method_id(@__retain_semantics Other prescriptionWithRightEyeSpecification:leftEyeSpecification:brand:dateIssued:expirationDate:device:metadata:)]
        pub unsafe fn prescriptionWithRightEyeSpecification_leftEyeSpecification_brand_dateIssued_expirationDate_device_metadata(
            right_eye_specification: Option<&HKContactsLensSpecification>,
            left_eye_specification: Option<&HKContactsLensSpecification>,
            brand: &NSString,
            date_issued: &NSDate,
            expiration_date: Option<&NSDate>,
            device: Option<&HKDevice>,
            metadata: Option<&NSDictionary<NSString, Object>>,
        ) -> Id<Self>;

        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Id<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `HKVisionPrescription`
    /**
     @class         HKContactsPrescription
    @abstract      An object representing a contacts prescription
    */
    #[cfg(feature = "HealthKit_HKContactsPrescription")]
    unsafe impl HKContactsPrescription {
        #[cfg(all(
            feature = "Foundation_NSDate",
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSString",
            feature = "HealthKit_HKDevice"
        ))]
        #[method_id(@__retain_semantics Other prescriptionWithType:dateIssued:expirationDate:device:metadata:)]
        pub unsafe fn prescriptionWithType_dateIssued_expirationDate_device_metadata(
            r#type: HKVisionPrescriptionType,
            date_issued: &NSDate,
            expiration_date: Option<&NSDate>,
            device: Option<&HKDevice>,
            metadata: Option<&NSDictionary<NSString, Object>>,
        ) -> Id<Self>;
    }
);
