//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::CoreLocation::*;
use crate::Foundation::*;
use crate::HealthKit::*;
use crate::UniformTypeIdentifiers::*;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "HealthKit_HKDocumentQuery")]
    /**
     @class         HKDocumentQuery
    @abstract      A concrete subclass of HKQuery that provides an interface to retrieve documents from the Health store.

    */
    pub struct HKDocumentQuery;

    #[cfg(feature = "HealthKit_HKDocumentQuery")]
    unsafe impl ClassType for HKDocumentQuery {
        #[inherits(NSObject)]
        type Super = HKQuery;
    }
);

#[cfg(feature = "HealthKit_HKDocumentQuery")]
/**
 @class         HKDocumentQuery
@abstract      A concrete subclass of HKQuery that provides an interface to retrieve documents from the Health store.

*/
unsafe impl NSObjectProtocol for HKDocumentQuery {}

extern_methods!(
    /**
     @class         HKDocumentQuery
    @abstract      A concrete subclass of HKQuery that provides an interface to retrieve documents from the Health store.

    */
    #[cfg(feature = "HealthKit_HKDocumentQuery")]
    unsafe impl HKDocumentQuery {
        /**
         @property      limit
        @abstract      The maximum number of documents the receiver will return upon completion.
        */
        #[method(limit)]
        pub unsafe fn limit(&self) -> NSUInteger;

        #[cfg(all(
            feature = "Foundation_NSArray",
            feature = "Foundation_NSSortDescriptor"
        ))]
        /**
         @property      sortDescriptors
        @abstract      An array of NSSortDescriptors.
        */
        #[method_id(@__retain_semantics Other sortDescriptors)]
        pub unsafe fn sortDescriptors(&self) -> Option<Id<NSArray<NSSortDescriptor>>>;

        /**
         @property      includeDocumentData
        @abstract      The XML content for documents may be large.  This property can be used to control whether the query
        returns the XML content for each record.
        */
        #[method(includeDocumentData)]
        pub unsafe fn includeDocumentData(&self) -> bool;

        #[cfg(all(
            feature = "Foundation_NSArray",
            feature = "Foundation_NSError",
            feature = "Foundation_NSPredicate",
            feature = "Foundation_NSSortDescriptor",
            feature = "HealthKit_HKDocumentSample",
            feature = "HealthKit_HKDocumentType"
        ))]
        #[method_id(@__retain_semantics Init initWithDocumentType:predicate:limit:sortDescriptors:includeDocumentData:resultsHandler:)]
        pub unsafe fn initWithDocumentType_predicate_limit_sortDescriptors_includeDocumentData_resultsHandler(
            this: Option<Allocated<Self>>,
            document_type: &HKDocumentType,
            predicate: Option<&NSPredicate>,
            limit: NSUInteger,
            sort_descriptors: Option<&NSArray<NSSortDescriptor>>,
            include_document_data: bool,
            results_handler: &Block<
                (
                    NonNull<HKDocumentQuery>,
                    *mut NSArray<HKDocumentSample>,
                    Bool,
                    *mut NSError,
                ),
                (),
            >,
        ) -> Id<Self>;
    }
);
