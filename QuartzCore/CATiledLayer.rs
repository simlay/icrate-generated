//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::CoreAnimation::*;
use crate::Foundation::*;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "CoreAnimation_CATiledLayer")]
    pub struct CATiledLayer;

    #[cfg(feature = "CoreAnimation_CATiledLayer")]
    unsafe impl ClassType for CATiledLayer {
        #[inherits(NSObject)]
        type Super = CALayer;
    }
);

#[cfg(feature = "CoreAnimation_CATiledLayer")]
unsafe impl CAMediaTiming for CATiledLayer {}

#[cfg(feature = "CoreAnimation_CATiledLayer")]
unsafe impl NSCoding for CATiledLayer {}

#[cfg(feature = "CoreAnimation_CATiledLayer")]
unsafe impl NSObjectProtocol for CATiledLayer {}

#[cfg(feature = "CoreAnimation_CATiledLayer")]
unsafe impl NSSecureCoding for CATiledLayer {}

extern_methods!(
    #[cfg(feature = "CoreAnimation_CATiledLayer")]
    unsafe impl CATiledLayer {
        #[method(fadeDuration)]
        pub unsafe fn fadeDuration() -> CFTimeInterval;

        /**
          The number of levels of detail maintained by this layer. Defaults to
         one. Each LOD is half the resolution of the previous level. If too
         many levels are specified for the current size of the layer, then
         the number of levels is clamped to the maximum value (the bottom
         most LOD must contain at least a single pixel in each dimension).
        */
        #[method(levelsOfDetail)]
        pub unsafe fn levelsOfDetail(&self) -> usize;

        /**
          The number of levels of detail maintained by this layer. Defaults to
         one. Each LOD is half the resolution of the previous level. If too
         many levels are specified for the current size of the layer, then
         the number of levels is clamped to the maximum value (the bottom
         most LOD must contain at least a single pixel in each dimension).
        */
        #[method(setLevelsOfDetail:)]
        pub unsafe fn setLevelsOfDetail(&self, levels_of_detail: usize);

        /**
          The number of magnified levels of detail for this layer. Defaults to
         zero. Each previous level of detail is twice the resolution of the
         later. E.g. specifying 'levelsOfDetailBias' of two means that the
         layer devotes two of its specified levels of detail to
         magnification, i.e. 2x and 4x.
        */
        #[method(levelsOfDetailBias)]
        pub unsafe fn levelsOfDetailBias(&self) -> usize;

        /**
          The number of magnified levels of detail for this layer. Defaults to
         zero. Each previous level of detail is twice the resolution of the
         later. E.g. specifying 'levelsOfDetailBias' of two means that the
         layer devotes two of its specified levels of detail to
         magnification, i.e. 2x and 4x.
        */
        #[method(setLevelsOfDetailBias:)]
        pub unsafe fn setLevelsOfDetailBias(&self, levels_of_detail_bias: usize);

        /**
          The maximum size of each tile used to create the layer's content.
         Defaults to (256, 256). Note that there is a maximum tile size, and
         requests for tiles larger than that limit will cause a suitable
         value to be substituted.
        */
        #[method(tileSize)]
        pub unsafe fn tileSize(&self) -> CGSize;

        /**
          The maximum size of each tile used to create the layer's content.
         Defaults to (256, 256). Note that there is a maximum tile size, and
         requests for tiles larger than that limit will cause a suitable
         value to be substituted.
        */
        #[method(setTileSize:)]
        pub unsafe fn setTileSize(&self, tile_size: CGSize);
    }
);

extern_methods!(
    /// Methods declared on superclass `CALayer`
    #[cfg(feature = "CoreAnimation_CATiledLayer")]
    unsafe impl CATiledLayer {
        #[method_id(@__retain_semantics Other layer)]
        pub unsafe fn layer() -> Id<Self>;

        #[method_id(@__retain_semantics Init initWithLayer:)]
        pub unsafe fn initWithLayer(this: Option<Allocated<Self>>, layer: &Object) -> Id<Self>;
    }
);
