//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::CoreAnimation::*;
use crate::Foundation::*;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "CoreAnimation_CAReplicatorLayer")]
    /**
      The replicator layer creates a specified number of copies of its
     sublayers, each copy potentially having geometric, temporal and
     color transformations applied to it.

     Note: the CALayer -hitTest: method currently only tests the first
     instance of z replicator layer's sublayers. This may change in the
     future.
    */
    pub struct CAReplicatorLayer;

    #[cfg(feature = "CoreAnimation_CAReplicatorLayer")]
    unsafe impl ClassType for CAReplicatorLayer {
        #[inherits(NSObject)]
        type Super = CALayer;
    }
);

#[cfg(feature = "CoreAnimation_CAReplicatorLayer")]
/**
  The replicator layer creates a specified number of copies of its
 sublayers, each copy potentially having geometric, temporal and
 color transformations applied to it.

 Note: the CALayer -hitTest: method currently only tests the first
 instance of z replicator layer's sublayers. This may change in the
 future.
*/
unsafe impl CAMediaTiming for CAReplicatorLayer {}

#[cfg(feature = "CoreAnimation_CAReplicatorLayer")]
/**
  The replicator layer creates a specified number of copies of its
 sublayers, each copy potentially having geometric, temporal and
 color transformations applied to it.

 Note: the CALayer -hitTest: method currently only tests the first
 instance of z replicator layer's sublayers. This may change in the
 future.
*/
unsafe impl NSCoding for CAReplicatorLayer {}

#[cfg(feature = "CoreAnimation_CAReplicatorLayer")]
/**
  The replicator layer creates a specified number of copies of its
 sublayers, each copy potentially having geometric, temporal and
 color transformations applied to it.

 Note: the CALayer -hitTest: method currently only tests the first
 instance of z replicator layer's sublayers. This may change in the
 future.
*/
unsafe impl NSObjectProtocol for CAReplicatorLayer {}

#[cfg(feature = "CoreAnimation_CAReplicatorLayer")]
/**
  The replicator layer creates a specified number of copies of its
 sublayers, each copy potentially having geometric, temporal and
 color transformations applied to it.

 Note: the CALayer -hitTest: method currently only tests the first
 instance of z replicator layer's sublayers. This may change in the
 future.
*/
unsafe impl NSSecureCoding for CAReplicatorLayer {}

extern_methods!(
    /**
      The replicator layer creates a specified number of copies of its
     sublayers, each copy potentially having geometric, temporal and
     color transformations applied to it.

     Note: the CALayer -hitTest: method currently only tests the first
     instance of z replicator layer's sublayers. This may change in the
     future.
    */
    #[cfg(feature = "CoreAnimation_CAReplicatorLayer")]
    unsafe impl CAReplicatorLayer {
        /**
          The number of copies to create, including the source object.
         Default value is one (i.e. no extra copies). Animatable.
        */
        #[method(instanceCount)]
        pub unsafe fn instanceCount(&self) -> NSInteger;

        /**
          The number of copies to create, including the source object.
         Default value is one (i.e. no extra copies). Animatable.
        */
        #[method(setInstanceCount:)]
        pub unsafe fn setInstanceCount(&self, instance_count: NSInteger);

        /**
          Defines whether this layer flattens its sublayers into its plane or
         not (i.e. whether it's treated similarly to a transform layer or
         not). Defaults to NO. If YES, the standard restrictions apply (see
         CATransformLayer.h).
        */
        #[method(preservesDepth)]
        pub unsafe fn preservesDepth(&self) -> bool;

        /**
          Defines whether this layer flattens its sublayers into its plane or
         not (i.e. whether it's treated similarly to a transform layer or
         not). Defaults to NO. If YES, the standard restrictions apply (see
         CATransformLayer.h).
        */
        #[method(setPreservesDepth:)]
        pub unsafe fn setPreservesDepth(&self, preserves_depth: bool);

        /**
          The temporal delay between replicated copies. Defaults to zero.
         Animatable.
        */
        #[method(instanceDelay)]
        pub unsafe fn instanceDelay(&self) -> CFTimeInterval;

        /**
          The temporal delay between replicated copies. Defaults to zero.
         Animatable.
        */
        #[method(setInstanceDelay:)]
        pub unsafe fn setInstanceDelay(&self, instance_delay: CFTimeInterval);

        /**
          The matrix applied to instance k-1 to produce instance k. The matrix
         is applied relative to the center of the replicator layer, i.e. the
         superlayer of each replicated sublayer. Defaults to the identity
         matrix. Animatable.
        */
        #[method(instanceTransform)]
        pub unsafe fn instanceTransform(&self) -> CATransform3D;

        /**
          The matrix applied to instance k-1 to produce instance k. The matrix
         is applied relative to the center of the replicator layer, i.e. the
         superlayer of each replicated sublayer. Defaults to the identity
         matrix. Animatable.
        */
        #[method(setInstanceTransform:)]
        pub unsafe fn setInstanceTransform(&self, instance_transform: CATransform3D);

        /**
          The color components added to the color of instance k-1 to produce
         the modulation color of instance k. Defaults to the clear color (no
         change). Animatable.
        */
        #[method(instanceRedOffset)]
        pub unsafe fn instanceRedOffset(&self) -> c_float;

        /**
          The color components added to the color of instance k-1 to produce
         the modulation color of instance k. Defaults to the clear color (no
         change). Animatable.
        */
        #[method(setInstanceRedOffset:)]
        pub unsafe fn setInstanceRedOffset(&self, instance_red_offset: c_float);

        #[method(instanceGreenOffset)]
        pub unsafe fn instanceGreenOffset(&self) -> c_float;

        #[method(setInstanceGreenOffset:)]
        pub unsafe fn setInstanceGreenOffset(&self, instance_green_offset: c_float);

        #[method(instanceBlueOffset)]
        pub unsafe fn instanceBlueOffset(&self) -> c_float;

        #[method(setInstanceBlueOffset:)]
        pub unsafe fn setInstanceBlueOffset(&self, instance_blue_offset: c_float);

        #[method(instanceAlphaOffset)]
        pub unsafe fn instanceAlphaOffset(&self) -> c_float;

        #[method(setInstanceAlphaOffset:)]
        pub unsafe fn setInstanceAlphaOffset(&self, instance_alpha_offset: c_float);
    }
);

extern_methods!(
    /// Methods declared on superclass `CALayer`
    /**
      The replicator layer creates a specified number of copies of its
     sublayers, each copy potentially having geometric, temporal and
     color transformations applied to it.

     Note: the CALayer -hitTest: method currently only tests the first
     instance of z replicator layer's sublayers. This may change in the
     future.
    */
    #[cfg(feature = "CoreAnimation_CAReplicatorLayer")]
    unsafe impl CAReplicatorLayer {
        #[method_id(@__retain_semantics Other layer)]
        pub unsafe fn layer() -> Id<Self>;

        #[method_id(@__retain_semantics Init initWithLayer:)]
        pub unsafe fn initWithLayer(this: Option<Allocated<Self>>, layer: &Object) -> Id<Self>;
    }
);
