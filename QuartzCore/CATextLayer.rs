//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::CoreAnimation::*;
use crate::Foundation::*;

typed_enum!(
    pub type CATextLayerTruncationMode = NSString;
);

typed_enum!(
    pub type CATextLayerAlignmentMode = NSString;
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "CoreAnimation_CATextLayer")]
    pub struct CATextLayer;

    #[cfg(feature = "CoreAnimation_CATextLayer")]
    unsafe impl ClassType for CATextLayer {
        #[inherits(NSObject)]
        type Super = CALayer;
    }
);

#[cfg(feature = "CoreAnimation_CATextLayer")]
unsafe impl CAMediaTiming for CATextLayer {}

#[cfg(feature = "CoreAnimation_CATextLayer")]
unsafe impl NSCoding for CATextLayer {}

#[cfg(feature = "CoreAnimation_CATextLayer")]
unsafe impl NSObjectProtocol for CATextLayer {}

#[cfg(feature = "CoreAnimation_CATextLayer")]
unsafe impl NSSecureCoding for CATextLayer {}

extern_methods!(
    #[cfg(feature = "CoreAnimation_CATextLayer")]
    unsafe impl CATextLayer {
        /**
          The text to be rendered, should be either an NSString or an
         NSAttributedString. Defaults to nil.
        */
        #[method_id(@__retain_semantics Other string)]
        pub unsafe fn string(&self) -> Option<Id<Object>>;

        /**
          The text to be rendered, should be either an NSString or an
         NSAttributedString. Defaults to nil.
        */
        #[method(setString:)]
        pub unsafe fn setString(&self, string: Option<&Object>);

        /**
          The font size. Defaults to 36. Only used when the `string' property
         is not an NSAttributedString. Animatable (Mac OS X 10.6 and later.)
        */
        #[method(fontSize)]
        pub unsafe fn fontSize(&self) -> CGFloat;

        /**
          The font size. Defaults to 36. Only used when the `string' property
         is not an NSAttributedString. Animatable (Mac OS X 10.6 and later.)
        */
        #[method(setFontSize:)]
        pub unsafe fn setFontSize(&self, font_size: CGFloat);

        /**
          When true the string is wrapped to fit within the layer bounds.
         Defaults to NO.
        */
        #[method(isWrapped)]
        pub unsafe fn isWrapped(&self) -> bool;

        /**
          When true the string is wrapped to fit within the layer bounds.
         Defaults to NO.
        */
        #[method(setWrapped:)]
        pub unsafe fn setWrapped(&self, wrapped: bool);

        /**
          Describes how the string is truncated to fit within the layer
         bounds. The possible options are `none', `start', `middle' and
         `end'. Defaults to `none'.
        */
        #[method_id(@__retain_semantics Other truncationMode)]
        pub unsafe fn truncationMode(&self) -> Id<CATextLayerTruncationMode>;

        /**
          Describes how the string is truncated to fit within the layer
         bounds. The possible options are `none', `start', `middle' and
         `end'. Defaults to `none'.
        */
        #[method(setTruncationMode:)]
        pub unsafe fn setTruncationMode(&self, truncation_mode: &CATextLayerTruncationMode);

        /**
          Describes how individual lines of text are aligned within the layer
         bounds. The possible options are `natural', `left', `right',
         `center' and `justified'. Defaults to `natural'.
        */
        #[method_id(@__retain_semantics Other alignmentMode)]
        pub unsafe fn alignmentMode(&self) -> Id<CATextLayerAlignmentMode>;

        /**
          Describes how individual lines of text are aligned within the layer
         bounds. The possible options are `natural', `left', `right',
         `center' and `justified'. Defaults to `natural'.
        */
        #[method(setAlignmentMode:)]
        pub unsafe fn setAlignmentMode(&self, alignment_mode: &CATextLayerAlignmentMode);

        /**
          Sets allowsFontSubpixelQuantization parameter of CGContextRef
         passed to the -drawInContext: method. Defaults to NO.
        */
        #[method(allowsFontSubpixelQuantization)]
        pub unsafe fn allowsFontSubpixelQuantization(&self) -> bool;

        /**
          Sets allowsFontSubpixelQuantization parameter of CGContextRef
         passed to the -drawInContext: method. Defaults to NO.
        */
        #[method(setAllowsFontSubpixelQuantization:)]
        pub unsafe fn setAllowsFontSubpixelQuantization(
            &self,
            allows_font_subpixel_quantization: bool,
        );
    }
);

extern_static!(kCATruncationNone: &'static CATextLayerTruncationMode);

extern_static!(kCATruncationStart: &'static CATextLayerTruncationMode);

extern_static!(kCATruncationEnd: &'static CATextLayerTruncationMode);

extern_static!(kCATruncationMiddle: &'static CATextLayerTruncationMode);

extern_static!(kCAAlignmentNatural: &'static CATextLayerAlignmentMode);

extern_static!(kCAAlignmentLeft: &'static CATextLayerAlignmentMode);

extern_static!(kCAAlignmentRight: &'static CATextLayerAlignmentMode);

extern_static!(kCAAlignmentCenter: &'static CATextLayerAlignmentMode);

extern_static!(kCAAlignmentJustified: &'static CATextLayerAlignmentMode);

extern_methods!(
    /// Methods declared on superclass `CALayer`
    #[cfg(feature = "CoreAnimation_CATextLayer")]
    unsafe impl CATextLayer {
        #[method_id(@__retain_semantics Other layer)]
        pub unsafe fn layer() -> Id<Self>;

        #[method_id(@__retain_semantics Init initWithLayer:)]
        pub unsafe fn initWithLayer(this: Option<Allocated<Self>>, layer: &Object) -> Id<Self>;
    }
);
