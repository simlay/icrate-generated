//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::Foundation::*;
use crate::GameController::*;

extern_static!(GCKeyboardDidConnectNotification: &'static NSString);

extern_static!(GCKeyboardDidDisconnectNotification: &'static NSString);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "GameController_GCKeyboard")]
    /**
     GCKeyboard is available to an application that links to GameController.framework
    There are 2 ways to access keyboard paired to the system:
    1: Querying for the coalescedKeyboard using [GCKeyboard coalescedKeyboard]
    2: Registering for Connection/Disconnection notifications from NSNotificationCenter

    @note All connected keyboards are coalesced into one keyboard object, so notification about connection/disconnection will only be delivered once.
    */
    pub struct GCKeyboard;

    #[cfg(feature = "GameController_GCKeyboard")]
    unsafe impl ClassType for GCKeyboard {
        type Super = NSObject;
    }
);

#[cfg(feature = "GameController_GCKeyboard")]
/**
 GCKeyboard is available to an application that links to GameController.framework
There are 2 ways to access keyboard paired to the system:
1: Querying for the coalescedKeyboard using [GCKeyboard coalescedKeyboard]
2: Registering for Connection/Disconnection notifications from NSNotificationCenter

@note All connected keyboards are coalesced into one keyboard object, so notification about connection/disconnection will only be delivered once.
*/
unsafe impl GCDevice for GCKeyboard {}

#[cfg(feature = "GameController_GCKeyboard")]
/**
 GCKeyboard is available to an application that links to GameController.framework
There are 2 ways to access keyboard paired to the system:
1: Querying for the coalescedKeyboard using [GCKeyboard coalescedKeyboard]
2: Registering for Connection/Disconnection notifications from NSNotificationCenter

@note All connected keyboards are coalesced into one keyboard object, so notification about connection/disconnection will only be delivered once.
*/
unsafe impl NSObjectProtocol for GCKeyboard {}

extern_methods!(
    /**
     GCKeyboard is available to an application that links to GameController.framework
    There are 2 ways to access keyboard paired to the system:
    1: Querying for the coalescedKeyboard using [GCKeyboard coalescedKeyboard]
    2: Registering for Connection/Disconnection notifications from NSNotificationCenter

    @note All connected keyboards are coalesced into one keyboard object, so notification about connection/disconnection will only be delivered once.
    */
    #[cfg(feature = "GameController_GCKeyboard")]
    unsafe impl GCKeyboard {
        #[cfg(feature = "GameController_GCKeyboardInput")]
        /**
         Unlike GCController GCKeyboard only has one input profile.

        This profile allows you to query buttons and button state
        */
        #[method_id(@__retain_semantics Other keyboardInput)]
        pub unsafe fn keyboardInput(&self) -> Option<Id<GCKeyboardInput>>;

        /**
         Keyboard object that represents all keyboards connected to the device
        Should be used to query key states every time input needs to be handled
        */
        #[method_id(@__retain_semantics Other coalescedKeyboard)]
        pub unsafe fn coalescedKeyboard() -> Option<Id<GCKeyboard>>;
    }
);
