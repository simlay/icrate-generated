//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::Foundation::*;
use crate::GameController::*;

pub type GCExtendedGamepadValueChangedHandler =
    *mut Block<(NonNull<GCExtendedGamepad>, NonNull<GCControllerElement>), ()>;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "GameController_GCExtendedGamepad")]
    pub struct GCExtendedGamepad;

    #[cfg(feature = "GameController_GCExtendedGamepad")]
    unsafe impl ClassType for GCExtendedGamepad {
        #[inherits(NSObject)]
        type Super = GCPhysicalInputProfile;
    }
);

#[cfg(feature = "GameController_GCExtendedGamepad")]
unsafe impl NSObjectProtocol for GCExtendedGamepad {}

extern_methods!(
    #[cfg(feature = "GameController_GCExtendedGamepad")]
    unsafe impl GCExtendedGamepad {
        #[cfg(feature = "GameController_GCController")]
        #[method_id(@__retain_semantics Other controller)]
        pub unsafe fn controller(&self) -> Option<Id<GCController>>;

        #[method(valueChangedHandler)]
        pub unsafe fn valueChangedHandler(&self) -> GCExtendedGamepadValueChangedHandler;

        #[method(setValueChangedHandler:)]
        pub unsafe fn setValueChangedHandler(
            &self,
            value_changed_handler: GCExtendedGamepadValueChangedHandler,
        );

        #[cfg(feature = "GameController_GCExtendedGamepadSnapshot")]
        #[deprecated = "GCExtendedGamepadSnapshot has been deprecated, use [GCController capture] instead"]
        #[method_id(@__retain_semantics Other saveSnapshot)]
        pub unsafe fn saveSnapshot(&self) -> Id<GCExtendedGamepadSnapshot>;

        #[cfg(feature = "GameController_GCControllerDirectionPad")]
        /**
         Required to be analog in the Extended profile. All the elements of this directional input are thus analog.
        */
        #[method_id(@__retain_semantics Other dpad)]
        pub unsafe fn dpad(&self) -> Id<GCControllerDirectionPad>;

        #[cfg(feature = "GameController_GCControllerButtonInput")]
        /**
         All face buttons are required to be analog in the Extended profile. These must be arranged
        in the diamond pattern given below:

        Y
        / \
        X   B
        \
        A

        */
        #[method_id(@__retain_semantics Other buttonA)]
        pub unsafe fn buttonA(&self) -> Id<GCControllerButtonInput>;

        #[cfg(feature = "GameController_GCControllerButtonInput")]
        #[method_id(@__retain_semantics Other buttonB)]
        pub unsafe fn buttonB(&self) -> Id<GCControllerButtonInput>;

        #[cfg(feature = "GameController_GCControllerButtonInput")]
        #[method_id(@__retain_semantics Other buttonX)]
        pub unsafe fn buttonX(&self) -> Id<GCControllerButtonInput>;

        #[cfg(feature = "GameController_GCControllerButtonInput")]
        #[method_id(@__retain_semantics Other buttonY)]
        pub unsafe fn buttonY(&self) -> Id<GCControllerButtonInput>;

        #[cfg(feature = "GameController_GCControllerButtonInput")]
        /**
         Button menu is the primary menu button, and should be used to enter the main menu and pause the game.
        */
        #[method_id(@__retain_semantics Other buttonMenu)]
        pub unsafe fn buttonMenu(&self) -> Id<GCControllerButtonInput>;

        #[cfg(feature = "GameController_GCControllerButtonInput")]
        /**
         Button options is the secondary menu button. It should be used to enter a secondary menu, such as graphics and sound configuration, and pause the game.
        */
        #[method_id(@__retain_semantics Other buttonOptions)]
        pub unsafe fn buttonOptions(&self) -> Option<Id<GCControllerButtonInput>>;

        #[cfg(feature = "GameController_GCControllerButtonInput")]
        /**
         Button home is a special menu button. If the system does not consume button home events, they will be passed to your application and should be used to enter a secondary menu, and pause the game.
        */
        #[method_id(@__retain_semantics Other buttonHome)]
        pub unsafe fn buttonHome(&self) -> Option<Id<GCControllerButtonInput>>;

        #[cfg(feature = "GameController_GCControllerDirectionPad")]
        /**
         A thumbstick is a 2-axis control that is physically required to be analog. All the elements of this directional input are thus analog.
        */
        #[method_id(@__retain_semantics Other leftThumbstick)]
        pub unsafe fn leftThumbstick(&self) -> Id<GCControllerDirectionPad>;

        #[cfg(feature = "GameController_GCControllerDirectionPad")]
        /**
         A thumbstick is a 2-axis control that is physically required to be analog. All the elements of this directional input are thus analog.
        */
        #[method_id(@__retain_semantics Other rightThumbstick)]
        pub unsafe fn rightThumbstick(&self) -> Id<GCControllerDirectionPad>;

        #[cfg(feature = "GameController_GCControllerButtonInput")]
        /**
         Shoulder buttons are required to be analog inputs.
        */
        #[method_id(@__retain_semantics Other leftShoulder)]
        pub unsafe fn leftShoulder(&self) -> Id<GCControllerButtonInput>;

        #[cfg(feature = "GameController_GCControllerButtonInput")]
        /**
         Shoulder buttons are required to be analog inputs.
        */
        #[method_id(@__retain_semantics Other rightShoulder)]
        pub unsafe fn rightShoulder(&self) -> Id<GCControllerButtonInput>;

        #[cfg(feature = "GameController_GCControllerButtonInput")]
        /**
         Triggers are required to be analog inputs. Common uses would be acceleration and decelleration in a driving game for example.
        */
        #[method_id(@__retain_semantics Other leftTrigger)]
        pub unsafe fn leftTrigger(&self) -> Id<GCControllerButtonInput>;

        #[cfg(feature = "GameController_GCControllerButtonInput")]
        #[method_id(@__retain_semantics Other rightTrigger)]
        pub unsafe fn rightTrigger(&self) -> Id<GCControllerButtonInput>;

        #[cfg(feature = "GameController_GCControllerButtonInput")]
        /**
         A thumbstick may also have a clickable component, which is treated as a non-analog button.
        */
        #[method_id(@__retain_semantics Other leftThumbstickButton)]
        pub unsafe fn leftThumbstickButton(&self) -> Option<Id<GCControllerButtonInput>>;

        #[cfg(feature = "GameController_GCControllerButtonInput")]
        #[method_id(@__retain_semantics Other rightThumbstickButton)]
        pub unsafe fn rightThumbstickButton(&self) -> Option<Id<GCControllerButtonInput>>;

        #[method(setStateFromExtendedGamepad:)]
        pub unsafe fn setStateFromExtendedGamepad(&self, extended_gamepad: &GCExtendedGamepad);
    }
);
