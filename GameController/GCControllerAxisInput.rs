//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::Foundation::*;
use crate::GameController::*;

pub type GCControllerAxisValueChangedHandler =
    *mut Block<(NonNull<GCControllerAxisInput>, c_float), ()>;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "GameController_GCControllerAxisInput")]
    pub struct GCControllerAxisInput;

    #[cfg(feature = "GameController_GCControllerAxisInput")]
    unsafe impl ClassType for GCControllerAxisInput {
        #[inherits(NSObject)]
        type Super = GCControllerElement;
    }
);

#[cfg(feature = "GameController_GCControllerAxisInput")]
unsafe impl NSObjectProtocol for GCControllerAxisInput {}

extern_methods!(
    #[cfg(feature = "GameController_GCControllerAxisInput")]
    unsafe impl GCControllerAxisInput {
        #[method(valueChangedHandler)]
        pub unsafe fn valueChangedHandler(&self) -> GCControllerAxisValueChangedHandler;

        #[method(setValueChangedHandler:)]
        pub unsafe fn setValueChangedHandler(
            &self,
            value_changed_handler: GCControllerAxisValueChangedHandler,
        );

        /**
         A normalized value for the input, between -1 and 1 for axis inputs. The values are deadzoned and saturated before they are returned
        so there is no value ouside the range. Deadzoning does not remove values from the range, the full 0 to 1 magnitude of values
        are possible from the input.

        As an axis is often used in a digital sense, you can rely on a value of 0 meaning the axis is inside the deadzone.
        Any value greater than or less than zero is not in the deadzone.
        */
        #[method(value)]
        pub unsafe fn value(&self) -> c_float;

        #[method(setValue:)]
        pub unsafe fn setValue(&self, value: c_float);
    }
);
