//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::Foundation::*;
use crate::GameController::*;

ns_enum!(
    #[underlying(NSInteger)]
    /**
     This is the battery status and it's represented by one of the following values:
    GCControllerBatteryStateUnknown means that the current state of battery is unknown or cannot be determined
    GCControllerBatteryStateDischarging means that controller is on battery and discharging at this moment
    GCControllerBatteryStateCharging means that controller is plugged in, but it's battery level is less than 100%
    GCControllerBatteryStateFull means that controller is plugged in and it's battery level is 100%
    */
    pub enum GCDeviceBatteryState {
        GCDeviceBatteryStateUnknown = -1,
        GCDeviceBatteryStateDischarging = 0,
        GCDeviceBatteryStateCharging = 1,
        GCDeviceBatteryStateFull = 2,
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "GameController_GCDeviceBattery")]
    /**
     A controller battery is an abstract representation of the battery level and battery status of a GCController instance.
    */
    pub struct GCDeviceBattery;

    #[cfg(feature = "GameController_GCDeviceBattery")]
    unsafe impl ClassType for GCDeviceBattery {
        type Super = NSObject;
    }
);

#[cfg(feature = "GameController_GCDeviceBattery")]
/**
 A controller battery is an abstract representation of the battery level and battery status of a GCController instance.
*/
unsafe impl NSObjectProtocol for GCDeviceBattery {}

extern_methods!(
    /**
     A controller battery is an abstract representation of the battery level and battery status of a GCController instance.
    */
    #[cfg(feature = "GameController_GCDeviceBattery")]
    unsafe impl GCDeviceBattery {
        /**
         This is the battery level for controller.
        Battery level ranges from 0.0 (fully discharged) to 1.0 (100% charged) and defaults to 0
        */
        #[method(batteryLevel)]
        pub unsafe fn batteryLevel(&self) -> c_float;

        /**
         A battery state for controller, defaults to GCControllerBatteryStateUnknown

        @note This property might be useful if you display the information about currently connected controller for player's convenience
        */
        #[method(batteryState)]
        pub unsafe fn batteryState(&self) -> GCDeviceBatteryState;

        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;
    }
);
