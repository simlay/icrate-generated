//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::Foundation::*;
use crate::GameController::*;

pub type GCMouseMoved = *mut Block<(NonNull<GCMouseInput>, c_float, c_float), ()>;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "GameController_GCMouseInput")]
    /**
     Mouse profile that represent a physical mouse object with two axis cursor, two axis scroll,
    left button, optional right and middle buttons and optional set of auxiliary buttons.

    It only provides information about raw mouse movement deltas. For the valid cursor position
    at given point in time, use UIHoverGestureRecognizer and NSEvent.mouseLocation.
    */
    pub struct GCMouseInput;

    #[cfg(feature = "GameController_GCMouseInput")]
    unsafe impl ClassType for GCMouseInput {
        #[inherits(NSObject)]
        type Super = GCPhysicalInputProfile;
    }
);

#[cfg(feature = "GameController_GCMouseInput")]
/**
 Mouse profile that represent a physical mouse object with two axis cursor, two axis scroll,
left button, optional right and middle buttons and optional set of auxiliary buttons.

It only provides information about raw mouse movement deltas. For the valid cursor position
at given point in time, use UIHoverGestureRecognizer and NSEvent.mouseLocation.
*/
unsafe impl NSObjectProtocol for GCMouseInput {}

extern_methods!(
    /**
     Mouse profile that represent a physical mouse object with two axis cursor, two axis scroll,
    left button, optional right and middle buttons and optional set of auxiliary buttons.

    It only provides information about raw mouse movement deltas. For the valid cursor position
    at given point in time, use UIHoverGestureRecognizer and NSEvent.mouseLocation.
    */
    #[cfg(feature = "GameController_GCMouseInput")]
    unsafe impl GCMouseInput {
        #[method(mouseMovedHandler)]
        pub unsafe fn mouseMovedHandler(&self) -> GCMouseMoved;

        #[method(setMouseMovedHandler:)]
        pub unsafe fn setMouseMovedHandler(&self, mouse_moved_handler: GCMouseMoved);

        #[cfg(feature = "GameController_GCDeviceCursor")]
        /**
         Scroll is a dpad with undefined range.
        */
        #[method_id(@__retain_semantics Other scroll)]
        pub unsafe fn scroll(&self) -> Id<GCDeviceCursor>;

        #[cfg(feature = "GameController_GCControllerButtonInput")]
        /**
         Mouse buttons that can be used only as digital inputs
        */
        #[method_id(@__retain_semantics Other leftButton)]
        pub unsafe fn leftButton(&self) -> Id<GCControllerButtonInput>;

        #[cfg(feature = "GameController_GCControllerButtonInput")]
        #[method_id(@__retain_semantics Other rightButton)]
        pub unsafe fn rightButton(&self) -> Option<Id<GCControllerButtonInput>>;

        #[cfg(feature = "GameController_GCControllerButtonInput")]
        #[method_id(@__retain_semantics Other middleButton)]
        pub unsafe fn middleButton(&self) -> Option<Id<GCControllerButtonInput>>;

        #[cfg(all(
            feature = "Foundation_NSArray",
            feature = "GameController_GCControllerButtonInput"
        ))]
        #[method_id(@__retain_semantics Other auxiliaryButtons)]
        pub unsafe fn auxiliaryButtons(&self) -> Option<Id<NSArray<GCControllerButtonInput>>>;
    }
);
