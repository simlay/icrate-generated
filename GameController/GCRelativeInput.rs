//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::Foundation::*;
use crate::GameController::*;

extern_protocol!(
    /**
     An object conforming to \c GCRelativeInput represents an input that reports
    its change in position along an axis (delta) since the previous event.
    Relative inputs have no fixed origin from which a coordinate syatem can be
    defined.
    */
    pub unsafe trait GCRelativeInput: NSObjectProtocol {
        /**
         Set this block to be notified when the delta of the input changes.

        @param delta
        The amount that the input has changed since the last time
        \c deltaDidChangeHandler fired.
        */
        #[method(deltaDidChangeHandler)]
        unsafe fn deltaDidChangeHandler(
            &self,
        ) -> *mut Block<
            (
                NonNull<ProtocolObject<dyn GCPhysicalInputElement>>,
                NonNull<ProtocolObject<dyn GCRelativeInput>>,
                c_float,
            ),
            (),
        >;

        /**
         Set this block to be notified when the delta of the input changes.

        @param delta
        The amount that the input has changed since the last time
        \c deltaDidChangeHandler fired.
        */
        #[method(setDeltaDidChangeHandler:)]
        unsafe fn setDeltaDidChangeHandler(
            &self,
            delta_did_change_handler: Option<
                &Block<
                    (
                        NonNull<ProtocolObject<dyn GCPhysicalInputElement>>,
                        NonNull<ProtocolObject<dyn GCRelativeInput>>,
                        c_float,
                    ),
                    (),
                >,
            >,
        );

        /**
         The last reported delta for the input.
        */
        #[method(delta)]
        unsafe fn delta(&self) -> c_float;

        /**
         Check if the input can support more than just digital values.

        Defaults to \c YES for most relative inputs.
        */
        #[method(isAnalog)]
        unsafe fn isAnalog(&self) -> bool;

        /**
         The timestamp of the last change.

        This time interval is not relative to any specific point in time.  You can
        subtract a previous timestamp from the current timestamp to determine the time
        (in seconds) between changes to the value.
        */
        #[method(lastDeltaTimestamp)]
        unsafe fn lastDeltaTimestamp(&self) -> NSTimeInterval;

        /**
         The interval (in seconds) between the timestamp of the last change and the
        current time.

        This should be treated as a lower bound of the event latency.  It may not
        include (wired or wireless) transmission latency, or latency accrued on
        the device before the event was transmitted to the host.
        */
        #[method(lastDeltaLatency)]
        unsafe fn lastDeltaLatency(&self) -> NSTimeInterval;
    }

    unsafe impl ProtocolType for dyn GCRelativeInput {}
);
