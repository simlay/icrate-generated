//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::Foundation::*;
use crate::GameController::*;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "GameController_GCPhysicalInputProfile")]
    /**
     A game controller profile representing physical buttons, thumbsticks, dpads, etc... on a controller.

    All controller profiles provide a base level of information about the controller they belong to.

    A profile maps the hardware notion of a controller into a logical controller. One that a developer can design for
    and depend on, no matter the underlying hardware.
    */
    pub struct GCPhysicalInputProfile;

    #[cfg(feature = "GameController_GCPhysicalInputProfile")]
    unsafe impl ClassType for GCPhysicalInputProfile {
        type Super = NSObject;
    }
);

#[cfg(feature = "GameController_GCPhysicalInputProfile")]
/**
 A game controller profile representing physical buttons, thumbsticks, dpads, etc... on a controller.

All controller profiles provide a base level of information about the controller they belong to.

A profile maps the hardware notion of a controller into a logical controller. One that a developer can design for
and depend on, no matter the underlying hardware.
*/
unsafe impl NSObjectProtocol for GCPhysicalInputProfile {}

extern_methods!(
    /**
     A game controller profile representing physical buttons, thumbsticks, dpads, etc... on a controller.

    All controller profiles provide a base level of information about the controller they belong to.

    A profile maps the hardware notion of a controller into a logical controller. One that a developer can design for
    and depend on, no matter the underlying hardware.
    */
    #[cfg(feature = "GameController_GCPhysicalInputProfile")]
    unsafe impl GCPhysicalInputProfile {
        /**
         A profile keeps a reference to the device that this profile is mapping input from
        */
        #[method_id(@__retain_semantics Other device)]
        pub unsafe fn device(&self) -> Option<Id<ProtocolObject<dyn GCDevice>>>;

        /**
         The last time elements of this profile were updated.
        */
        #[method(lastEventTimestamp)]
        pub unsafe fn lastEventTimestamp(&self) -> NSTimeInterval;

        /**
         Whether the user has remapped their physical input controls for this profile at the system level.

        @discussion On iOS and tvOS, users can remap their game controller inputs in Settings.
        */
        #[method(hasRemappedElements)]
        pub unsafe fn hasRemappedElements(&self) -> bool;

        #[cfg(feature = "GameController_GCControllerElement")]
        /**
         Set this block if you want to be notified when a value on a element changed. If multiple elements have changed this block will be called
        for each element that changed.

        @param profile this profile that is being used to map the raw input data into logical values on controller elements such as the dpad or the buttons.
        @param element the element that has been modified.
        */
        #[method(valueDidChangeHandler)]
        pub unsafe fn valueDidChangeHandler(
            &self,
        ) -> *mut Block<
            (
                NonNull<GCPhysicalInputProfile>,
                NonNull<GCControllerElement>,
            ),
            (),
        >;

        #[cfg(feature = "GameController_GCControllerElement")]
        /**
         Set this block if you want to be notified when a value on a element changed. If multiple elements have changed this block will be called
        for each element that changed.

        @param profile this profile that is being used to map the raw input data into logical values on controller elements such as the dpad or the buttons.
        @param element the element that has been modified.
        */
        #[method(setValueDidChangeHandler:)]
        pub unsafe fn setValueDidChangeHandler(
            &self,
            value_did_change_handler: Option<
                &Block<
                    (
                        NonNull<GCPhysicalInputProfile>,
                        NonNull<GCControllerElement>,
                    ),
                    (),
                >,
            >,
        );

        #[cfg(all(
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSString",
            feature = "GameController_GCControllerElement"
        ))]
        /**
         The following properties allow for runtime lookup of any input element on a profile, when provided with a valid alias.

        @example extendedGamepad.elements["Button A"] == extendedGamepad.buttonA // YES
        @example extendedGamepad.dpads["Left Thumbstick"] == extendedGamepad.leftThumbstick // YES
        @example extendedGamepad.dpads["Button B"] // returns nil, "Button B" is not a GCControllerDirectionPad
        */
        #[method_id(@__retain_semantics Other elements)]
        pub unsafe fn elements(&self) -> Id<NSDictionary<NSString, GCControllerElement>>;

        #[cfg(all(
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSString",
            feature = "GameController_GCControllerButtonInput"
        ))]
        #[method_id(@__retain_semantics Other buttons)]
        pub unsafe fn buttons(&self) -> Id<NSDictionary<NSString, GCControllerButtonInput>>;

        #[cfg(all(
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSString",
            feature = "GameController_GCControllerAxisInput"
        ))]
        #[method_id(@__retain_semantics Other axes)]
        pub unsafe fn axes(&self) -> Id<NSDictionary<NSString, GCControllerAxisInput>>;

        #[cfg(all(
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSString",
            feature = "GameController_GCControllerDirectionPad"
        ))]
        #[method_id(@__retain_semantics Other dpads)]
        pub unsafe fn dpads(&self) -> Id<NSDictionary<NSString, GCControllerDirectionPad>>;

        #[cfg(all(
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSString",
            feature = "GameController_GCControllerTouchpad"
        ))]
        #[method_id(@__retain_semantics Other touchpads)]
        pub unsafe fn touchpads(&self) -> Id<NSDictionary<NSString, GCControllerTouchpad>>;

        #[cfg(all(
            feature = "Foundation_NSSet",
            feature = "GameController_GCControllerElement"
        ))]
        /**
         The following properties allow for dynamic querying of the input elements available on a profile.
        */
        #[method_id(@__retain_semantics Other allElements)]
        pub unsafe fn allElements(&self) -> Id<NSSet<GCControllerElement>>;

        #[cfg(all(
            feature = "Foundation_NSSet",
            feature = "GameController_GCControllerButtonInput"
        ))]
        #[method_id(@__retain_semantics Other allButtons)]
        pub unsafe fn allButtons(&self) -> Id<NSSet<GCControllerButtonInput>>;

        #[cfg(all(
            feature = "Foundation_NSSet",
            feature = "GameController_GCControllerAxisInput"
        ))]
        #[method_id(@__retain_semantics Other allAxes)]
        pub unsafe fn allAxes(&self) -> Id<NSSet<GCControllerAxisInput>>;

        #[cfg(all(
            feature = "Foundation_NSSet",
            feature = "GameController_GCControllerDirectionPad"
        ))]
        #[method_id(@__retain_semantics Other allDpads)]
        pub unsafe fn allDpads(&self) -> Id<NSSet<GCControllerDirectionPad>>;

        #[cfg(all(
            feature = "Foundation_NSSet",
            feature = "GameController_GCControllerTouchpad"
        ))]
        #[method_id(@__retain_semantics Other allTouchpads)]
        pub unsafe fn allTouchpads(&self) -> Id<NSSet<GCControllerTouchpad>>;

        #[cfg(all(
            feature = "Foundation_NSString",
            feature = "GameController_GCControllerElement"
        ))]
        #[method_id(@__retain_semantics Other objectForKeyedSubscript:)]
        pub unsafe fn objectForKeyedSubscript(
            &self,
            key: &NSString,
        ) -> Option<Id<GCControllerElement>>;

        #[method_id(@__retain_semantics Other capture)]
        pub unsafe fn capture(&self) -> Id<Self>;

        #[method(setStateFromPhysicalInput:)]
        pub unsafe fn setStateFromPhysicalInput(&self, physical_input: &GCPhysicalInputProfile);

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other mappedElementAliasForPhysicalInputName:)]
        pub unsafe fn mappedElementAliasForPhysicalInputName(
            &self,
            input_name: &NSString,
        ) -> Id<NSString>;

        #[cfg(all(feature = "Foundation_NSSet", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other mappedPhysicalInputNamesForElementAlias:)]
        pub unsafe fn mappedPhysicalInputNamesForElementAlias(
            &self,
            element_alias: &NSString,
        ) -> Id<NSSet<NSString>>;
    }
);
