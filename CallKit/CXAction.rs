//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::CallKit::*;
use crate::Foundation::*;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "CallKit_CXAction")]
    #[cfg(not(any(target_os = "macos")))]
    pub struct CXAction;

    #[cfg(not(any(target_os = "macos")))]
    #[cfg(feature = "CallKit_CXAction")]
    unsafe impl ClassType for CXAction {
        type Super = NSObject;
    }
);

#[cfg(feature = "CallKit_CXAction")]
#[cfg(not(any(target_os = "macos")))]
unsafe impl NSCoding for CXAction {}

#[cfg(feature = "CallKit_CXAction")]
#[cfg(not(any(target_os = "macos")))]
unsafe impl NSObjectProtocol for CXAction {}

#[cfg(feature = "CallKit_CXAction")]
#[cfg(not(any(target_os = "macos")))]
unsafe impl NSSecureCoding for CXAction {}

extern_methods!(
    #[cfg(feature = "CallKit_CXAction")]
    #[cfg(not(any(target_os = "macos")))]
    unsafe impl CXAction {
        #[cfg(not(any(target_os = "macos")))]
        #[cfg(feature = "Foundation_NSUUID")]
        #[method_id(@__retain_semantics Other UUID)]
        pub unsafe fn UUID(&self) -> Id<NSUUID>;

        #[cfg(not(any(target_os = "macos")))]
        #[method(isComplete)]
        pub unsafe fn isComplete(&self) -> bool;

        #[cfg(not(any(target_os = "macos")))]
        #[cfg(feature = "Foundation_NSDate")]
        #[method_id(@__retain_semantics Other timeoutDate)]
        pub unsafe fn timeoutDate(&self) -> Id<NSDate>;

        #[cfg(not(any(target_os = "macos")))]
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

        #[cfg(not(any(target_os = "macos")))]
        #[cfg(feature = "Foundation_NSCoder")]
        #[method_id(@__retain_semantics Init initWithCoder:)]
        pub unsafe fn initWithCoder(
            this: Option<Allocated<Self>>,
            a_decoder: &NSCoder,
        ) -> Option<Id<Self>>;

        #[cfg(not(any(target_os = "macos")))]
        #[method(fulfill)]
        pub unsafe fn fulfill(&self);

        #[cfg(not(any(target_os = "macos")))]
        #[method(fail)]
        pub unsafe fn fail(&self);
    }
);
