//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::CallKit::*;
use crate::Foundation::*;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "CallKit_CXStartCallAction")]
    #[cfg(not(any(target_os = "macos")))]
    pub struct CXStartCallAction;

    #[cfg(not(any(target_os = "macos")))]
    #[cfg(feature = "CallKit_CXStartCallAction")]
    unsafe impl ClassType for CXStartCallAction {
        #[inherits(CXAction, NSObject)]
        type Super = CXCallAction;
    }
);

#[cfg(feature = "CallKit_CXStartCallAction")]
#[cfg(not(any(target_os = "macos")))]
unsafe impl NSCoding for CXStartCallAction {}

#[cfg(feature = "CallKit_CXStartCallAction")]
#[cfg(not(any(target_os = "macos")))]
unsafe impl NSObjectProtocol for CXStartCallAction {}

#[cfg(feature = "CallKit_CXStartCallAction")]
#[cfg(not(any(target_os = "macos")))]
unsafe impl NSSecureCoding for CXStartCallAction {}

extern_methods!(
    #[cfg(feature = "CallKit_CXStartCallAction")]
    #[cfg(not(any(target_os = "macos")))]
    unsafe impl CXStartCallAction {
        #[cfg(not(any(target_os = "macos")))]
        #[cfg(all(feature = "CallKit_CXHandle", feature = "Foundation_NSUUID"))]
        #[method_id(@__retain_semantics Init initWithCallUUID:handle:)]
        pub unsafe fn initWithCallUUID_handle(
            this: Option<Allocated<Self>>,
            call_uuid: &NSUUID,
            handle: &CXHandle,
        ) -> Id<Self>;

        #[cfg(not(any(target_os = "macos")))]
        #[cfg(feature = "Foundation_NSCoder")]
        #[method_id(@__retain_semantics Init initWithCoder:)]
        pub unsafe fn initWithCoder(
            this: Option<Allocated<Self>>,
            a_decoder: &NSCoder,
        ) -> Option<Id<Self>>;

        #[cfg(not(any(target_os = "macos")))]
        #[cfg(feature = "Foundation_NSUUID")]
        #[method_id(@__retain_semantics Init initWithCallUUID:)]
        pub unsafe fn initWithCallUUID(
            this: Option<Allocated<Self>>,
            call_uuid: &NSUUID,
        ) -> Id<Self>;

        #[cfg(not(any(target_os = "macos")))]
        #[cfg(feature = "CallKit_CXHandle")]
        #[method_id(@__retain_semantics Other handle)]
        pub unsafe fn handle(&self) -> Id<CXHandle>;

        #[cfg(not(any(target_os = "macos")))]
        #[cfg(feature = "CallKit_CXHandle")]
        #[method(setHandle:)]
        pub unsafe fn setHandle(&self, handle: &CXHandle);

        #[cfg(not(any(target_os = "macos")))]
        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other contactIdentifier)]
        pub unsafe fn contactIdentifier(&self) -> Option<Id<NSString>>;

        #[cfg(not(any(target_os = "macos")))]
        #[cfg(feature = "Foundation_NSString")]
        #[method(setContactIdentifier:)]
        pub unsafe fn setContactIdentifier(&self, contact_identifier: Option<&NSString>);

        #[cfg(not(any(target_os = "macos")))]
        #[method(isVideo)]
        pub unsafe fn isVideo(&self) -> bool;

        #[cfg(not(any(target_os = "macos")))]
        #[method(setVideo:)]
        pub unsafe fn setVideo(&self, video: bool);

        #[cfg(not(any(target_os = "macos")))]
        #[cfg(feature = "Foundation_NSDate")]
        #[method(fulfillWithDateStarted:)]
        pub unsafe fn fulfillWithDateStarted(&self, date_started: &NSDate);
    }
);
