//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Contacts::*;
use crate::Foundation::*;

ns_enum!(
    #[underlying(NSInteger)]
    /**
      @abstract The entities the user can grant access to.
    */
    pub enum CNEntityType {
        CNEntityTypeContacts = 0,
    }
);

ns_enum!(
    #[underlying(NSInteger)]
    /**
      @abstract The authorization the user has given the application to access an entity type.
    */
    pub enum CNAuthorizationStatus {
        CNAuthorizationStatusNotDetermined = 0,
        CNAuthorizationStatusRestricted = 1,
        CNAuthorizationStatusDenied = 2,
        CNAuthorizationStatusAuthorized = 3,
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "Contacts_CNContactStore")]
    /**
      @abstract Provides methods to fetch and save contacts.

     @discussion The CNContactStore is a thread safe class that can fetch and save contacts, fetch and save groups, and fetch containers.

     @note Some good practices are:
     1) Only fetch contact properties that will be used.
     2) When fetching all contacts and caching the results, first fetch all contact identifiers only. Then fetch batches of detailed contacts by identifiers as you need them.
     3) To aggregate several contact fetches collect a set of unique contact identifiers from the fetches. Then fetch batches of detailed contacts by identifiers.
     4) When CNContactStoreDidChangeNotification is posted, if you cache any fetched contacts/groups/containers then they must be refetched and the old cached objects released.
    */
    pub struct CNContactStore;

    #[cfg(feature = "Contacts_CNContactStore")]
    unsafe impl ClassType for CNContactStore {
        type Super = NSObject;
    }
);

#[cfg(feature = "Contacts_CNContactStore")]
/**
  @abstract Provides methods to fetch and save contacts.

 @discussion The CNContactStore is a thread safe class that can fetch and save contacts, fetch and save groups, and fetch containers.

 @note Some good practices are:
 1) Only fetch contact properties that will be used.
 2) When fetching all contacts and caching the results, first fetch all contact identifiers only. Then fetch batches of detailed contacts by identifiers as you need them.
 3) To aggregate several contact fetches collect a set of unique contact identifiers from the fetches. Then fetch batches of detailed contacts by identifiers.
 4) When CNContactStoreDidChangeNotification is posted, if you cache any fetched contacts/groups/containers then they must be refetched and the old cached objects released.
*/
unsafe impl NSObjectProtocol for CNContactStore {}

extern_methods!(
    /**
      @abstract Provides methods to fetch and save contacts.

     @discussion The CNContactStore is a thread safe class that can fetch and save contacts, fetch and save groups, and fetch containers.

     @note Some good practices are:
     1) Only fetch contact properties that will be used.
     2) When fetching all contacts and caching the results, first fetch all contact identifiers only. Then fetch batches of detailed contacts by identifiers as you need them.
     3) To aggregate several contact fetches collect a set of unique contact identifiers from the fetches. Then fetch batches of detailed contacts by identifiers.
     4) When CNContactStoreDidChangeNotification is posted, if you cache any fetched contacts/groups/containers then they must be refetched and the old cached objects released.
    */
    #[cfg(feature = "Contacts_CNContactStore")]
    unsafe impl CNContactStore {
        #[method(authorizationStatusForEntityType:)]
        pub unsafe fn authorizationStatusForEntityType(
            entity_type: CNEntityType,
        ) -> CNAuthorizationStatus;

        #[cfg(feature = "Foundation_NSError")]
        #[method(requestAccessForEntityType:completionHandler:)]
        pub unsafe fn requestAccessForEntityType_completionHandler(
            &self,
            entity_type: CNEntityType,
            completion_handler: &Block<(Bool, *mut NSError), ()>,
        );

        #[cfg(all(
            feature = "Contacts_CNContact",
            feature = "Foundation_NSArray",
            feature = "Foundation_NSError",
            feature = "Foundation_NSPredicate"
        ))]
        #[method_id(@__retain_semantics Other unifiedContactsMatchingPredicate:keysToFetch:error:_)]
        pub unsafe fn unifiedContactsMatchingPredicate_keysToFetch_error(
            &self,
            predicate: &NSPredicate,
            keys: &NSArray<ProtocolObject<dyn CNKeyDescriptor>>,
        ) -> Result<Id<NSArray<CNContact>>, Id<NSError>>;

        #[cfg(all(
            feature = "Contacts_CNContact",
            feature = "Foundation_NSArray",
            feature = "Foundation_NSError",
            feature = "Foundation_NSString"
        ))]
        #[method_id(@__retain_semantics Other unifiedContactWithIdentifier:keysToFetch:error:_)]
        pub unsafe fn unifiedContactWithIdentifier_keysToFetch_error(
            &self,
            identifier: &NSString,
            keys: &NSArray<ProtocolObject<dyn CNKeyDescriptor>>,
        ) -> Result<Id<CNContact>, Id<NSError>>;

        #[cfg(all(
            feature = "Contacts_CNContact",
            feature = "Foundation_NSArray",
            feature = "Foundation_NSError"
        ))]
        #[method_id(@__retain_semantics Other unifiedMeContactWithKeysToFetch:error:_)]
        pub unsafe fn unifiedMeContactWithKeysToFetch_error(
            &self,
            keys: &NSArray<ProtocolObject<dyn CNKeyDescriptor>>,
        ) -> Result<Id<CNContact>, Id<NSError>>;

        #[cfg(all(
            feature = "Contacts_CNContact",
            feature = "Contacts_CNContactFetchRequest",
            feature = "Contacts_CNFetchResult",
            feature = "Foundation_NSEnumerator",
            feature = "Foundation_NSError"
        ))]
        #[method_id(@__retain_semantics Other enumeratorForContactFetchRequest:error:_)]
        pub unsafe fn enumeratorForContactFetchRequest_error(
            &self,
            request: &CNContactFetchRequest,
        ) -> Result<Id<CNFetchResult<NSEnumerator<CNContact>>>, Id<NSError>>;

        #[cfg(all(
            feature = "Contacts_CNChangeHistoryEvent",
            feature = "Contacts_CNChangeHistoryFetchRequest",
            feature = "Contacts_CNFetchResult",
            feature = "Foundation_NSEnumerator",
            feature = "Foundation_NSError"
        ))]
        #[method_id(@__retain_semantics Other enumeratorForChangeHistoryFetchRequest:error:_)]
        pub unsafe fn enumeratorForChangeHistoryFetchRequest_error(
            &self,
            request: &CNChangeHistoryFetchRequest,
        ) -> Result<Id<CNFetchResult<NSEnumerator<CNChangeHistoryEvent>>>, Id<NSError>>;

        #[cfg(all(
            feature = "Contacts_CNContact",
            feature = "Contacts_CNContactFetchRequest",
            feature = "Foundation_NSError"
        ))]
        #[method(enumerateContactsWithFetchRequest:error:usingBlock:)]
        pub unsafe fn enumerateContactsWithFetchRequest_error_usingBlock(
            &self,
            fetch_request: &CNContactFetchRequest,
            error: Option<&mut Option<Id<NSError>>>,
            block: &Block<(NonNull<CNContact>, NonNull<Bool>), ()>,
        ) -> bool;

        #[cfg(all(
            feature = "Contacts_CNGroup",
            feature = "Foundation_NSArray",
            feature = "Foundation_NSError",
            feature = "Foundation_NSPredicate"
        ))]
        #[method_id(@__retain_semantics Other groupsMatchingPredicate:error:_)]
        pub unsafe fn groupsMatchingPredicate_error(
            &self,
            predicate: Option<&NSPredicate>,
        ) -> Result<Id<NSArray<CNGroup>>, Id<NSError>>;

        #[cfg(all(
            feature = "Contacts_CNContainer",
            feature = "Foundation_NSArray",
            feature = "Foundation_NSError",
            feature = "Foundation_NSPredicate"
        ))]
        #[method_id(@__retain_semantics Other containersMatchingPredicate:error:_)]
        pub unsafe fn containersMatchingPredicate_error(
            &self,
            predicate: Option<&NSPredicate>,
        ) -> Result<Id<NSArray<CNContainer>>, Id<NSError>>;

        #[cfg(all(feature = "Contacts_CNSaveRequest", feature = "Foundation_NSError"))]
        #[method(executeSaveRequest:error:_)]
        pub unsafe fn executeSaveRequest_error(
            &self,
            save_request: &CNSaveRequest,
        ) -> Result<(), Id<NSError>>;

        #[cfg(feature = "Foundation_NSData")]
        /**
           @abstract The current history token.

          @discussion Retrieve the current history token. If you are fetching contacts or change history events, you should use the token on the @c CNFetchResult instead.
        */
        #[method_id(@__retain_semantics Other currentHistoryToken)]
        pub unsafe fn currentHistoryToken(&self) -> Option<Id<NSData>>;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other defaultContainerIdentifier)]
        pub unsafe fn defaultContainerIdentifier(&self) -> Option<Id<NSString>>;
    }
);

extern_static!(CNContactStoreDidChangeNotification: &'static NSString);
