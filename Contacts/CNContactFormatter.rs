//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Contacts::*;
use crate::Foundation::*;

ns_enum!(
    #[underlying(NSInteger)]
    /**
      @abstract The formatting styles for contact names.
    */
    pub enum CNContactFormatterStyle {
        CNContactFormatterStyleFullName = 0,
        CNContactFormatterStylePhoneticFullName = 1,
    }
);

ns_enum!(
    #[underlying(NSInteger)]
    /**
      @abstract The formatting order of the contact name components.
    */
    pub enum CNContactDisplayNameOrder {
        CNContactDisplayNameOrderUserDefault = 0,
        CNContactDisplayNameOrderGivenNameFirst = 1,
        CNContactDisplayNameOrderFamilyNameFirst = 2,
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "Contacts_CNContactFormatter")]
    /**
      @abstract Formats a contact name.

     @discussion This formatter handles international ordering and delimiting of the contact name components. This includes applying the user defaults when appropriate.
    */
    pub struct CNContactFormatter;

    #[cfg(feature = "Contacts_CNContactFormatter")]
    unsafe impl ClassType for CNContactFormatter {
        #[inherits(NSObject)]
        type Super = NSFormatter;
    }
);

#[cfg(feature = "Contacts_CNContactFormatter")]
/**
  @abstract Formats a contact name.

 @discussion This formatter handles international ordering and delimiting of the contact name components. This includes applying the user defaults when appropriate.
*/
unsafe impl NSCoding for CNContactFormatter {}

#[cfg(feature = "Contacts_CNContactFormatter")]
/**
  @abstract Formats a contact name.

 @discussion This formatter handles international ordering and delimiting of the contact name components. This includes applying the user defaults when appropriate.
*/
unsafe impl NSObjectProtocol for CNContactFormatter {}

#[cfg(feature = "Contacts_CNContactFormatter")]
/**
  @abstract Formats a contact name.

 @discussion This formatter handles international ordering and delimiting of the contact name components. This includes applying the user defaults when appropriate.
*/
unsafe impl NSSecureCoding for CNContactFormatter {}

extern_methods!(
    /**
      @abstract Formats a contact name.

     @discussion This formatter handles international ordering and delimiting of the contact name components. This includes applying the user defaults when appropriate.
    */
    #[cfg(feature = "Contacts_CNContactFormatter")]
    unsafe impl CNContactFormatter {
        #[method_id(@__retain_semantics Other descriptorForRequiredKeysForStyle:)]
        pub unsafe fn descriptorForRequiredKeysForStyle(
            style: CNContactFormatterStyle,
        ) -> Id<ProtocolObject<dyn CNKeyDescriptor>>;

        /**
          @abstract The contact key descriptor required for the name order.

         @discussion Use to fetch all contact keys required for +nameOrderForContact:. Can combine key descriptors for different formatter styles in the fetch.

         @return The contact key descriptor for the name order.
        */
        #[method_id(@__retain_semantics Other descriptorForRequiredKeysForNameOrder)]
        pub unsafe fn descriptorForRequiredKeysForNameOrder(
        ) -> Id<ProtocolObject<dyn CNKeyDescriptor>>;

        /**
          @abstract The contact key descriptor required for the name delimiter.

         @discussion Use to fetch all contact keys required for +delimiterForContact:. Can combine key descriptors for different formatter styles in the fetch.

         @return The contact key descriptor for the name delimiter.
        */
        #[method_id(@__retain_semantics Other descriptorForRequiredKeysForDelimiter)]
        pub unsafe fn descriptorForRequiredKeysForDelimiter(
        ) -> Id<ProtocolObject<dyn CNKeyDescriptor>>;

        #[cfg(all(feature = "Contacts_CNContact", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other stringFromContact:style:)]
        pub unsafe fn stringFromContact_style(
            contact: &CNContact,
            style: CNContactFormatterStyle,
        ) -> Option<Id<NSString>>;

        #[cfg(all(
            feature = "Contacts_CNContact",
            feature = "Foundation_NSAttributedString",
            feature = "Foundation_NSDictionary"
        ))]
        #[method_id(@__retain_semantics Other attributedStringFromContact:style:defaultAttributes:)]
        pub unsafe fn attributedStringFromContact_style_defaultAttributes(
            contact: &CNContact,
            style: CNContactFormatterStyle,
            attributes: Option<&NSDictionary>,
        ) -> Option<Id<NSAttributedString>>;

        #[cfg(feature = "Contacts_CNContact")]
        #[method(nameOrderForContact:)]
        pub unsafe fn nameOrderForContact(contact: &CNContact) -> CNContactDisplayNameOrder;

        #[cfg(all(feature = "Contacts_CNContact", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other delimiterForContact:)]
        pub unsafe fn delimiterForContact(contact: &CNContact) -> Id<NSString>;

        /**
          @abstract The style for a contact formatter instance.

         @discussion The default value is CNContactFormatterStyleFullName.
        */
        #[method(style)]
        pub unsafe fn style(&self) -> CNContactFormatterStyle;

        /**
          @abstract The style for a contact formatter instance.

         @discussion The default value is CNContactFormatterStyleFullName.
        */
        #[method(setStyle:)]
        pub unsafe fn setStyle(&self, style: CNContactFormatterStyle);

        #[cfg(all(feature = "Contacts_CNContact", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other stringFromContact:)]
        pub unsafe fn stringFromContact(&self, contact: &CNContact) -> Option<Id<NSString>>;

        #[cfg(all(
            feature = "Contacts_CNContact",
            feature = "Foundation_NSAttributedString",
            feature = "Foundation_NSDictionary"
        ))]
        #[method_id(@__retain_semantics Other attributedStringFromContact:defaultAttributes:)]
        pub unsafe fn attributedStringFromContact_defaultAttributes(
            &self,
            contact: &CNContact,
            attributes: Option<&NSDictionary>,
        ) -> Option<Id<NSAttributedString>>;
    }
);

extern_static!(CNContactPropertyAttribute: &'static NSString);
