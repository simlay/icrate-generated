//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Contacts::*;
use crate::Foundation::*;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "Contacts_CNChangeHistoryFetchRequest")]
    /**
      @abstract    Specifies the criteria to fetch change history.

     @discussion  Changes to contacts are always returned.
                  All changes are coalesced to remove redundant adds, updates and deletes.
                  This request is used with [CNContactStore enumeratorForChangeHistoryFetchRequest:error:].
    */
    pub struct CNChangeHistoryFetchRequest;

    #[cfg(feature = "Contacts_CNChangeHistoryFetchRequest")]
    unsafe impl ClassType for CNChangeHistoryFetchRequest {
        #[inherits(NSObject)]
        type Super = CNFetchRequest;
    }
);

#[cfg(feature = "Contacts_CNChangeHistoryFetchRequest")]
/**
  @abstract    Specifies the criteria to fetch change history.

 @discussion  Changes to contacts are always returned.
              All changes are coalesced to remove redundant adds, updates and deletes.
              This request is used with [CNContactStore enumeratorForChangeHistoryFetchRequest:error:].
*/
unsafe impl NSCoding for CNChangeHistoryFetchRequest {}

#[cfg(feature = "Contacts_CNChangeHistoryFetchRequest")]
/**
  @abstract    Specifies the criteria to fetch change history.

 @discussion  Changes to contacts are always returned.
              All changes are coalesced to remove redundant adds, updates and deletes.
              This request is used with [CNContactStore enumeratorForChangeHistoryFetchRequest:error:].
*/
unsafe impl NSObjectProtocol for CNChangeHistoryFetchRequest {}

#[cfg(feature = "Contacts_CNChangeHistoryFetchRequest")]
/**
  @abstract    Specifies the criteria to fetch change history.

 @discussion  Changes to contacts are always returned.
              All changes are coalesced to remove redundant adds, updates and deletes.
              This request is used with [CNContactStore enumeratorForChangeHistoryFetchRequest:error:].
*/
unsafe impl NSSecureCoding for CNChangeHistoryFetchRequest {}

extern_methods!(
    /**
      @abstract    Specifies the criteria to fetch change history.

     @discussion  Changes to contacts are always returned.
                  All changes are coalesced to remove redundant adds, updates and deletes.
                  This request is used with [CNContactStore enumeratorForChangeHistoryFetchRequest:error:].
    */
    #[cfg(feature = "Contacts_CNChangeHistoryFetchRequest")]
    unsafe impl CNChangeHistoryFetchRequest {
        #[cfg(feature = "Foundation_NSData")]
        /**
          @abstract    Request changes made after a certain point.

         @discussion  If non-nil, only changes made after this point in history will be returned.

                      If nil, a @c CNChangeHistoryDropEverythingEvent will be returned, followed by an add event
                      for every contact and group currently in the contacts database.
        */
        #[method_id(@__retain_semantics Other startingToken)]
        pub unsafe fn startingToken(&self) -> Option<Id<NSData>>;

        #[cfg(feature = "Foundation_NSData")]
        /**
          @abstract    Request changes made after a certain point.

         @discussion  If non-nil, only changes made after this point in history will be returned.

                      If nil, a @c CNChangeHistoryDropEverythingEvent will be returned, followed by an add event
                      for every contact and group currently in the contacts database.
        */
        #[method(setStartingToken:)]
        pub unsafe fn setStartingToken(&self, starting_token: Option<&NSData>);

        #[cfg(feature = "Foundation_NSArray")]
        /**
          @abstract    Additional keys to include in the fetched contacts.

         @discussion  By default, only @c CNContactIdentifierKey will be fetched. If you
                      would like to include additional key descriptors to process the contacts,
                      include the key descriptors you need.

                      @c CNContactIdentifierKey will always be fetched, whether you
                      request it or not.
        */
        #[method_id(@__retain_semantics Other additionalContactKeyDescriptors)]
        pub unsafe fn additionalContactKeyDescriptors(
            &self,
        ) -> Option<Id<NSArray<ProtocolObject<dyn CNKeyDescriptor>>>>;

        #[cfg(feature = "Foundation_NSArray")]
        /**
          @abstract    Additional keys to include in the fetched contacts.

         @discussion  By default, only @c CNContactIdentifierKey will be fetched. If you
                      would like to include additional key descriptors to process the contacts,
                      include the key descriptors you need.

                      @c CNContactIdentifierKey will always be fetched, whether you
                      request it or not.
        */
        #[method(setAdditionalContactKeyDescriptors:)]
        pub unsafe fn setAdditionalContactKeyDescriptors(
            &self,
            additional_contact_key_descriptors: Option<
                &NSArray<ProtocolObject<dyn CNKeyDescriptor>>,
            >,
        );

        /**
          @abstract    Returns contact changes as unified contacts.

         @discussion  If @c YES, returns unified contact history. Otherwise returns individual contact history. Default is @c YES.

         @note        A unified contact is the aggregation of properties from a set of linked individual contacts.
                      If an individual contact is not linked then the unified contact is simply that individual contact.
        */
        #[method(shouldUnifyResults)]
        pub unsafe fn shouldUnifyResults(&self) -> bool;

        /**
          @abstract    Returns contact changes as unified contacts.

         @discussion  If @c YES, returns unified contact history. Otherwise returns individual contact history. Default is @c YES.

         @note        A unified contact is the aggregation of properties from a set of linked individual contacts.
                      If an individual contact is not linked then the unified contact is simply that individual contact.
        */
        #[method(setShouldUnifyResults:)]
        pub unsafe fn setShouldUnifyResults(&self, should_unify_results: bool);

        /**
          @abstract    To return mutable contacts and groups.

         @discussion  If @c YES returns mutable contacts and groups. Default is @c NO.
        */
        #[method(mutableObjects)]
        pub unsafe fn mutableObjects(&self) -> bool;

        /**
          @abstract    To return mutable contacts and groups.

         @discussion  If @c YES returns mutable contacts and groups. Default is @c NO.
        */
        #[method(setMutableObjects:)]
        pub unsafe fn setMutableObjects(&self, mutable_objects: bool);

        /**
          @abstract    Set to @c YES to also fetch group changes. Default is @c NO.
        */
        #[method(includeGroupChanges)]
        pub unsafe fn includeGroupChanges(&self) -> bool;

        /**
          @abstract    Set to @c YES to also fetch group changes. Default is @c NO.
        */
        #[method(setIncludeGroupChanges:)]
        pub unsafe fn setIncludeGroupChanges(&self, include_group_changes: bool);

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        /**
          @abstract    Exclude changes made by certain authors.

         @discussion  If set, transactions made by the specified authors will be excluded
                      from the results. Use this, in conjunction with @c CNSaveRequest.transactionAuthor,
                      to suppress processing of changes you already know about.
        */
        #[method_id(@__retain_semantics Other excludedTransactionAuthors)]
        pub unsafe fn excludedTransactionAuthors(&self) -> Option<Id<NSArray<NSString>>>;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        /**
          @abstract    Exclude changes made by certain authors.

         @discussion  If set, transactions made by the specified authors will be excluded
                      from the results. Use this, in conjunction with @c CNSaveRequest.transactionAuthor,
                      to suppress processing of changes you already know about.
        */
        #[method(setExcludedTransactionAuthors:)]
        pub unsafe fn setExcludedTransactionAuthors(
            &self,
            excluded_transaction_authors: Option<&NSArray<NSString>>,
        );
    }
);
