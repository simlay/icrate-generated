//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::Foundation::*;
use crate::MailKit::*;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "MailKit_MEEmailAddress")]
    /**
      @brief Contain information about an email address. This can include both valid and invalid email addresses.
    */
    pub struct MEEmailAddress;

    #[cfg(feature = "MailKit_MEEmailAddress")]
    unsafe impl ClassType for MEEmailAddress {
        type Super = NSObject;
    }
);

#[cfg(feature = "MailKit_MEEmailAddress")]
/**
  @brief Contain information about an email address. This can include both valid and invalid email addresses.
*/
unsafe impl NSCoding for MEEmailAddress {}

#[cfg(feature = "MailKit_MEEmailAddress")]
/**
  @brief Contain information about an email address. This can include both valid and invalid email addresses.
*/
unsafe impl NSObjectProtocol for MEEmailAddress {}

#[cfg(feature = "MailKit_MEEmailAddress")]
/**
  @brief Contain information about an email address. This can include both valid and invalid email addresses.
*/
unsafe impl NSSecureCoding for MEEmailAddress {}

extern_methods!(
    /**
      @brief Contain information about an email address. This can include both valid and invalid email addresses.
    */
    #[cfg(feature = "MailKit_MEEmailAddress")]
    unsafe impl MEEmailAddress {
        #[cfg(feature = "Foundation_NSString")]
        /**
          @brief The raw string for the email address.
        */
        #[method_id(@__retain_semantics Other rawString)]
        pub unsafe fn rawString(&self) -> Id<NSString>;

        #[cfg(feature = "Foundation_NSString")]
        /**
          @brief The simple address string portion of the raw string if it is valid. For example, the  @c addressString
         of "John Appleseed <j.appleseed@example.com>" will be "j.appleseed@example.com".
        */
        #[method_id(@__retain_semantics Other addressString)]
        pub unsafe fn addressString(&self) -> Option<Id<NSString>>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Id<Self>;

        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Init initWithRawString:)]
        pub unsafe fn initWithRawString(
            this: Option<Allocated<Self>>,
            raw_string: &NSString,
        ) -> Id<Self>;
    }
);
