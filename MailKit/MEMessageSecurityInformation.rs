//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::Foundation::*;
use crate::MailKit::*;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "MailKit_MEMessageSecurityInformation")]
    /**
      @brief Contains security information about a decoded message
    */
    pub struct MEMessageSecurityInformation;

    #[cfg(feature = "MailKit_MEMessageSecurityInformation")]
    unsafe impl ClassType for MEMessageSecurityInformation {
        type Super = NSObject;
    }
);

#[cfg(feature = "MailKit_MEMessageSecurityInformation")]
/**
  @brief Contains security information about a decoded message
*/
unsafe impl NSCoding for MEMessageSecurityInformation {}

#[cfg(feature = "MailKit_MEMessageSecurityInformation")]
/**
  @brief Contains security information about a decoded message
*/
unsafe impl NSObjectProtocol for MEMessageSecurityInformation {}

#[cfg(feature = "MailKit_MEMessageSecurityInformation")]
/**
  @brief Contains security information about a decoded message
*/
unsafe impl NSSecureCoding for MEMessageSecurityInformation {}

extern_methods!(
    /**
      @brief Contains security information about a decoded message
    */
    #[cfg(feature = "MailKit_MEMessageSecurityInformation")]
    unsafe impl MEMessageSecurityInformation {
        #[cfg(all(feature = "Foundation_NSArray", feature = "MailKit_MEMessageSigner"))]
        /**
          @brief The signers of the message
        */
        #[method_id(@__retain_semantics Other signers)]
        pub unsafe fn signers(&self) -> Id<NSArray<MEMessageSigner>>;

        /**
          @brief Whether or not the message was encrypted.
        */
        #[method(isEncrypted)]
        pub unsafe fn isEncrypted(&self) -> bool;

        #[cfg(feature = "Foundation_NSError")]
        /**
          @brief Any signing error that occured when decoding the message.
        */
        #[method_id(@__retain_semantics Other signingError)]
        pub unsafe fn signingError(&self) -> Option<Id<NSError>>;

        #[cfg(feature = "Foundation_NSError")]
        /**
          @brief Any encryption error that occured when decoding the message.
        */
        #[method_id(@__retain_semantics Other encryptionError)]
        pub unsafe fn encryptionError(&self) -> Option<Id<NSError>>;

        /**
          @brief Whether or not Mail should block loading remote content for the message by default. The user will have the option to load remote content manually.
        */
        #[method(shouldBlockRemoteContent)]
        pub unsafe fn shouldBlockRemoteContent(&self) -> bool;

        #[cfg(feature = "Foundation_NSString")]
        /**
          @brief A localized string containing the reason for blocking remote content.
        */
        #[method_id(@__retain_semantics Other localizedRemoteContentBlockingReason)]
        pub unsafe fn localizedRemoteContentBlockingReason(&self) -> Option<Id<NSString>>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Id<Self>;

        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

        #[cfg(all(
            feature = "Foundation_NSArray",
            feature = "Foundation_NSError",
            feature = "MailKit_MEMessageSigner"
        ))]
        #[method_id(@__retain_semantics Init initWithSigners:isEncrypted:signingError:encryptionError:)]
        pub unsafe fn initWithSigners_isEncrypted_signingError_encryptionError(
            this: Option<Allocated<Self>>,
            signers: &NSArray<MEMessageSigner>,
            is_encrypted: bool,
            signing_error: Option<&NSError>,
            encryption_error: Option<&NSError>,
        ) -> Id<Self>;

        #[cfg(all(
            feature = "Foundation_NSArray",
            feature = "Foundation_NSError",
            feature = "Foundation_NSString",
            feature = "MailKit_MEMessageSigner"
        ))]
        #[method_id(@__retain_semantics Init initWithSigners:isEncrypted:signingError:encryptionError:shouldBlockRemoteContent:localizedRemoteContentBlockingReason:)]
        pub unsafe fn initWithSigners_isEncrypted_signingError_encryptionError_shouldBlockRemoteContent_localizedRemoteContentBlockingReason(
            this: Option<Allocated<Self>>,
            signers: &NSArray<MEMessageSigner>,
            is_encrypted: bool,
            signing_error: Option<&NSError>,
            encryption_error: Option<&NSError>,
            should_block_remote_content: bool,
            localized_remote_content_blocking_reason: Option<&NSString>,
        ) -> Id<Self>;
    }
);
