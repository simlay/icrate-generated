//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::Foundation::*;
use crate::WebKit::*;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "WebKit_WebDownload")]
    /**
     @class WebDownload
    @discussion A WebDownload works just like an NSURLDownload, with
    one extra feature: if you do not implement the
    authentication-related delegate methods, it will automatically
    prompt for authentication using the standard WebKit authentication
    panel, as either a sheet or window. It provides no extra methods,
    but does have one additional delegate method.
    */
    #[deprecated]
    pub struct WebDownload;

    #[cfg(feature = "WebKit_WebDownload")]
    unsafe impl ClassType for WebDownload {
        #[inherits(NSObject)]
        type Super = NSURLDownload;
    }
);

#[cfg(feature = "WebKit_WebDownload")]
/**
 @class WebDownload
@discussion A WebDownload works just like an NSURLDownload, with
one extra feature: if you do not implement the
authentication-related delegate methods, it will automatically
prompt for authentication using the standard WebKit authentication
panel, as either a sheet or window. It provides no extra methods,
but does have one additional delegate method.
*/
unsafe impl NSObjectProtocol for WebDownload {}

extern_methods!(
    /**
     @class WebDownload
    @discussion A WebDownload works just like an NSURLDownload, with
    one extra feature: if you do not implement the
    authentication-related delegate methods, it will automatically
    prompt for authentication using the standard WebKit authentication
    panel, as either a sheet or window. It provides no extra methods,
    but does have one additional delegate method.
    */
    #[cfg(feature = "WebKit_WebDownload")]
    unsafe impl WebDownload {}
);

extern_protocol!(
    #[deprecated]
    /**
     @protocol WebDownloadDelegate
    @discussion The WebDownloadDelegate delegate has one extra method used to choose
    the right window when automatically prompting with a sheet.
    */
    pub unsafe trait WebDownloadDelegate: NSURLDownloadDelegate {
        #[cfg(all(feature = "AppKit_NSWindow", feature = "WebKit_WebDownload"))]
        #[optional]
        #[method_id(@__retain_semantics Other downloadWindowForAuthenticationSheet:)]
        unsafe fn downloadWindowForAuthenticationSheet(
            &self,
            download: Option<&WebDownload>,
        ) -> Option<Id<NSWindow>>;
    }

    unsafe impl ProtocolType for dyn WebDownloadDelegate {}
);

extern_methods!(
    /// Methods declared on superclass `NSURLDownload`
    /**
     @class WebDownload
    @discussion A WebDownload works just like an NSURLDownload, with
    one extra feature: if you do not implement the
    authentication-related delegate methods, it will automatically
    prompt for authentication using the standard WebKit authentication
    panel, as either a sheet or window. It provides no extra methods,
    but does have one additional delegate method.
    */
    #[cfg(feature = "WebKit_WebDownload")]
    unsafe impl WebDownload {
        #[cfg(feature = "Foundation_NSURLRequest")]
        #[deprecated = "Use NSURLSession downloadTask (see NSURLSession.h)"]
        #[method_id(@__retain_semantics Init initWithRequest:delegate:)]
        pub unsafe fn initWithRequest_delegate(
            this: Option<Allocated<Self>>,
            request: &NSURLRequest,
            delegate: Option<&ProtocolObject<dyn NSURLDownloadDelegate>>,
        ) -> Id<Self>;

        #[cfg(all(feature = "Foundation_NSData", feature = "Foundation_NSString"))]
        #[deprecated = "Use NSURLSession downloadTask (see NSURLSession.h)"]
        #[method_id(@__retain_semantics Init initWithResumeData:delegate:path:)]
        pub unsafe fn initWithResumeData_delegate_path(
            this: Option<Allocated<Self>>,
            resume_data: &NSData,
            delegate: Option<&ProtocolObject<dyn NSURLDownloadDelegate>>,
            path: &NSString,
        ) -> Id<Self>;
    }
);
