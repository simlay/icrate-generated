//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::Foundation::*;
use crate::WebKit::*;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "WebKit_WebScriptObject")]
    /**
     @class WebScriptObject
    @discussion WebScriptObjects are used to wrap script objects passed from
    script environments to Objective-C. WebScriptObjects cannot be created
    directly. In normal uses of WebKit, you gain access to the script
    environment using the "windowScriptObject" method on WebView.

    The following KVC methods are commonly used to access properties of the
    WebScriptObject:

    - (void)setValue:(id)value forKey:(NSString *)key
    - (id)valueForKey:(NSString *)key

    As it possible to remove attributes from web script objects, the following
    additional method augments the basic KVC methods:

    - (void)removeWebScriptKey:(NSString *)name;

    Also, since the sparse array access allowed in script objects doesn't map well
    to NSArray, the following methods can be used to access index based properties:

    - (id)webScriptValueAtIndex:(unsigned)index;
    - (void)setWebScriptValueAtIndex:(unsigned)index value:(id)value;
    */
    #[deprecated]
    pub struct WebScriptObject;

    #[cfg(feature = "WebKit_WebScriptObject")]
    unsafe impl ClassType for WebScriptObject {
        type Super = NSObject;
    }
);

#[cfg(feature = "WebKit_WebScriptObject")]
/**
 @class WebScriptObject
@discussion WebScriptObjects are used to wrap script objects passed from
script environments to Objective-C. WebScriptObjects cannot be created
directly. In normal uses of WebKit, you gain access to the script
environment using the "windowScriptObject" method on WebView.

The following KVC methods are commonly used to access properties of the
WebScriptObject:

- (void)setValue:(id)value forKey:(NSString *)key
- (id)valueForKey:(NSString *)key

As it possible to remove attributes from web script objects, the following
additional method augments the basic KVC methods:

- (void)removeWebScriptKey:(NSString *)name;

Also, since the sparse array access allowed in script objects doesn't map well
to NSArray, the following methods can be used to access index based properties:

- (id)webScriptValueAtIndex:(unsigned)index;
- (void)setWebScriptValueAtIndex:(unsigned)index value:(id)value;
*/
unsafe impl NSObjectProtocol for WebScriptObject {}

extern_methods!(
    /**
     @class WebScriptObject
    @discussion WebScriptObjects are used to wrap script objects passed from
    script environments to Objective-C. WebScriptObjects cannot be created
    directly. In normal uses of WebKit, you gain access to the script
    environment using the "windowScriptObject" method on WebView.

    The following KVC methods are commonly used to access properties of the
    WebScriptObject:

    - (void)setValue:(id)value forKey:(NSString *)key
    - (id)valueForKey:(NSString *)key

    As it possible to remove attributes from web script objects, the following
    additional method augments the basic KVC methods:

    - (void)removeWebScriptKey:(NSString *)name;

    Also, since the sparse array access allowed in script objects doesn't map well
    to NSArray, the following methods can be used to access index based properties:

    - (id)webScriptValueAtIndex:(unsigned)index;
    - (void)setWebScriptValueAtIndex:(unsigned)index value:(id)value;
    */
    #[cfg(feature = "WebKit_WebScriptObject")]
    unsafe impl WebScriptObject {
        #[cfg(feature = "Foundation_NSString")]
        #[method(throwException:)]
        pub unsafe fn throwException(exception_message: Option<&NSString>) -> bool;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other callWebScriptMethod:withArguments:)]
        pub unsafe fn callWebScriptMethod_withArguments(
            &self,
            name: Option<&NSString>,
            arguments: Option<&NSArray>,
        ) -> Option<Id<Object>>;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other evaluateWebScript:)]
        pub unsafe fn evaluateWebScript(&self, script: Option<&NSString>) -> Option<Id<Object>>;

        #[cfg(feature = "Foundation_NSString")]
        #[method(removeWebScriptKey:)]
        pub unsafe fn removeWebScriptKey(&self, name: Option<&NSString>);

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other stringRepresentation)]
        pub unsafe fn stringRepresentation(&self) -> Option<Id<NSString>>;

        #[method_id(@__retain_semantics Other webScriptValueAtIndex:)]
        pub unsafe fn webScriptValueAtIndex(&self, index: c_uint) -> Option<Id<Object>>;

        #[method(setWebScriptValueAtIndex:value:)]
        pub unsafe fn setWebScriptValueAtIndex_value(&self, index: c_uint, value: Option<&Object>);

        #[cfg(feature = "Foundation_NSString")]
        #[method(setException:)]
        pub unsafe fn setException(&self, description: Option<&NSString>);

        #[cfg(feature = "WebKit_JSValue")]
        #[method_id(@__retain_semantics Other JSValue)]
        pub unsafe fn JSValue(&self) -> Option<Id<JSValue>>;
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "WebKit_WebUndefined")]
    /**
     @class WebUndefined
    */
    #[deprecated]
    pub struct WebUndefined;

    #[cfg(feature = "WebKit_WebUndefined")]
    unsafe impl ClassType for WebUndefined {
        type Super = NSObject;
    }
);

#[cfg(feature = "WebKit_WebUndefined")]
/**
 @class WebUndefined
*/
unsafe impl NSCoding for WebUndefined {}

#[cfg(feature = "WebKit_WebUndefined")]
/**
 @class WebUndefined
*/
unsafe impl NSObjectProtocol for WebUndefined {}

extern_methods!(
    /**
     @class WebUndefined
    */
    #[cfg(feature = "WebKit_WebUndefined")]
    unsafe impl WebUndefined {
        #[method_id(@__retain_semantics Other undefined)]
        pub unsafe fn undefined() -> Option<Id<WebUndefined>>;
    }
);
