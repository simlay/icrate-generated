//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::Foundation::*;
use crate::WebKit::*;

extern_protocol!(
    #[deprecated]
    /**
     @category  WebResourceLoadDelegate
    @discussion Implementors of this protocol will receive messages indicating
    that a resource is about to be loaded, data has been received for a resource,
    an error has been received for a resource, and completion of a resource load.
    Implementors are also given the opportunity to mutate requests before they are sent.
    The various progress methods of this protocol all receive an identifier as the
    parameter.  This identifier can be used to track messages associated with a single
    resource.  For example, a single resource may generate multiple
    resource:willSendRequest:redirectResponse:fromDataSource: messages as it's URL is redirected.
    */
    pub unsafe trait WebResourceLoadDelegate: NSObjectProtocol {
        #[cfg(all(
            feature = "Foundation_NSURLRequest",
            feature = "WebKit_WebDataSource",
            feature = "WebKit_WebView"
        ))]
        #[optional]
        #[method_id(@__retain_semantics Other webView:identifierForInitialRequest:fromDataSource:)]
        unsafe fn webView_identifierForInitialRequest_fromDataSource(
            &self,
            sender: Option<&WebView>,
            request: Option<&NSURLRequest>,
            data_source: Option<&WebDataSource>,
        ) -> Option<Id<Object>>;

        #[cfg(all(
            feature = "Foundation_NSURLRequest",
            feature = "Foundation_NSURLResponse",
            feature = "WebKit_WebDataSource",
            feature = "WebKit_WebView"
        ))]
        #[optional]
        #[method_id(@__retain_semantics Other webView:resource:willSendRequest:redirectResponse:fromDataSource:)]
        unsafe fn webView_resource_willSendRequest_redirectResponse_fromDataSource(
            &self,
            sender: Option<&WebView>,
            identifier: Option<&Object>,
            request: Option<&NSURLRequest>,
            redirect_response: Option<&NSURLResponse>,
            data_source: Option<&WebDataSource>,
        ) -> Option<Id<NSURLRequest>>;

        #[cfg(all(
            feature = "Foundation_NSURLAuthenticationChallenge",
            feature = "WebKit_WebDataSource",
            feature = "WebKit_WebView"
        ))]
        #[optional]
        #[method(webView:resource:didReceiveAuthenticationChallenge:fromDataSource:)]
        unsafe fn webView_resource_didReceiveAuthenticationChallenge_fromDataSource(
            &self,
            sender: Option<&WebView>,
            identifier: Option<&Object>,
            challenge: Option<&NSURLAuthenticationChallenge>,
            data_source: Option<&WebDataSource>,
        );

        #[cfg(all(
            feature = "Foundation_NSURLAuthenticationChallenge",
            feature = "WebKit_WebDataSource",
            feature = "WebKit_WebView"
        ))]
        #[optional]
        #[method(webView:resource:didCancelAuthenticationChallenge:fromDataSource:)]
        unsafe fn webView_resource_didCancelAuthenticationChallenge_fromDataSource(
            &self,
            sender: Option<&WebView>,
            identifier: Option<&Object>,
            challenge: Option<&NSURLAuthenticationChallenge>,
            data_source: Option<&WebDataSource>,
        );

        #[cfg(all(
            feature = "Foundation_NSURLResponse",
            feature = "WebKit_WebDataSource",
            feature = "WebKit_WebView"
        ))]
        #[optional]
        #[method(webView:resource:didReceiveResponse:fromDataSource:)]
        unsafe fn webView_resource_didReceiveResponse_fromDataSource(
            &self,
            sender: Option<&WebView>,
            identifier: Option<&Object>,
            response: Option<&NSURLResponse>,
            data_source: Option<&WebDataSource>,
        );

        #[cfg(all(feature = "WebKit_WebDataSource", feature = "WebKit_WebView"))]
        #[optional]
        #[method(webView:resource:didReceiveContentLength:fromDataSource:)]
        unsafe fn webView_resource_didReceiveContentLength_fromDataSource(
            &self,
            sender: Option<&WebView>,
            identifier: Option<&Object>,
            length: NSInteger,
            data_source: Option<&WebDataSource>,
        );

        #[cfg(all(feature = "WebKit_WebDataSource", feature = "WebKit_WebView"))]
        #[optional]
        #[method(webView:resource:didFinishLoadingFromDataSource:)]
        unsafe fn webView_resource_didFinishLoadingFromDataSource(
            &self,
            sender: Option<&WebView>,
            identifier: Option<&Object>,
            data_source: Option<&WebDataSource>,
        );

        #[cfg(all(
            feature = "Foundation_NSError",
            feature = "WebKit_WebDataSource",
            feature = "WebKit_WebView"
        ))]
        #[optional]
        #[method(webView:resource:didFailLoadingWithError:fromDataSource:)]
        unsafe fn webView_resource_didFailLoadingWithError_fromDataSource(
            &self,
            sender: Option<&WebView>,
            identifier: Option<&Object>,
            error: Option<&NSError>,
            data_source: Option<&WebDataSource>,
        );

        #[cfg(all(
            feature = "Foundation_NSError",
            feature = "WebKit_WebDataSource",
            feature = "WebKit_WebView"
        ))]
        #[optional]
        #[method(webView:plugInFailedWithError:dataSource:)]
        unsafe fn webView_plugInFailedWithError_dataSource(
            &self,
            sender: Option<&WebView>,
            error: Option<&NSError>,
            data_source: Option<&WebDataSource>,
        );
    }

    unsafe impl ProtocolType for dyn WebResourceLoadDelegate {}
);
