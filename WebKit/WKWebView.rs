//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::Foundation::*;
use crate::WebKit::*;

ns_enum!(
    #[underlying(NSInteger)]
    pub enum WKMediaPlaybackState {
        WKMediaPlaybackStateNone = 0,
        WKMediaPlaybackStatePlaying = 1,
        WKMediaPlaybackStatePaused = 2,
        WKMediaPlaybackStateSuspended = 3,
    }
);

ns_enum!(
    #[underlying(NSInteger)]
    pub enum WKMediaCaptureState {
        WKMediaCaptureStateNone = 0,
        WKMediaCaptureStateActive = 1,
        WKMediaCaptureStateMuted = 2,
    }
);

ns_enum!(
    #[underlying(NSInteger)]
    pub enum WKFullscreenState {
        WKFullscreenStateNotInFullscreen = 0,
        WKFullscreenStateEnteringFullscreen = 1,
        WKFullscreenStateInFullscreen = 2,
        WKFullscreenStateExitingFullscreen = 3,
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "WebKit_WKWebView")]
    pub struct WKWebView;

    #[cfg(feature = "WebKit_WKWebView")]
    unsafe impl ClassType for WKWebView {
        #[inherits(NSResponder, NSObject)]
        type Super = NSView;
    }
);

#[cfg(feature = "WebKit_WKWebView")]
unsafe impl NSAccessibility for WKWebView {}

#[cfg(feature = "WebKit_WKWebView")]
unsafe impl NSAccessibilityElementProtocol for WKWebView {}

#[cfg(feature = "WebKit_WKWebView")]
unsafe impl NSAnimatablePropertyContainer for WKWebView {}

#[cfg(feature = "WebKit_WKWebView")]
unsafe impl NSAppearanceCustomization for WKWebView {}

#[cfg(feature = "WebKit_WKWebView")]
unsafe impl NSCoding for WKWebView {}

#[cfg(feature = "WebKit_WKWebView")]
unsafe impl NSDraggingDestination for WKWebView {}

#[cfg(feature = "WebKit_WKWebView")]
unsafe impl NSObjectProtocol for WKWebView {}

#[cfg(feature = "WebKit_WKWebView")]
unsafe impl NSUserInterfaceItemIdentification for WKWebView {}

extern_methods!(
    #[cfg(feature = "WebKit_WKWebView")]
    unsafe impl WKWebView {
        #[cfg(feature = "WebKit_WKWebViewConfiguration")]
        /**
          @abstract A copy of the configuration with which the web view was
        initialized.
        */
        #[method_id(@__retain_semantics Other configuration)]
        pub unsafe fn configuration(&self) -> Id<WKWebViewConfiguration>;

        /**
          @abstract The web view's navigation delegate.
        */
        #[method_id(@__retain_semantics Other navigationDelegate)]
        pub unsafe fn navigationDelegate(
            &self,
        ) -> Option<Id<ProtocolObject<dyn WKNavigationDelegate>>>;

        /**
          @abstract The web view's navigation delegate.
        */
        #[method(setNavigationDelegate:)]
        pub unsafe fn setNavigationDelegate(
            &self,
            navigation_delegate: Option<&ProtocolObject<dyn WKNavigationDelegate>>,
        );

        /**
          @abstract The web view's user interface delegate.
        */
        #[method_id(@__retain_semantics Other UIDelegate)]
        pub unsafe fn UIDelegate(&self) -> Option<Id<ProtocolObject<dyn WKUIDelegate>>>;

        /**
          @abstract The web view's user interface delegate.
        */
        #[method(setUIDelegate:)]
        pub unsafe fn setUIDelegate(&self, ui_delegate: Option<&ProtocolObject<dyn WKUIDelegate>>);

        #[cfg(feature = "WebKit_WKBackForwardList")]
        /**
          @abstract The web view's back-forward list.
        */
        #[method_id(@__retain_semantics Other backForwardList)]
        pub unsafe fn backForwardList(&self) -> Id<WKBackForwardList>;

        #[cfg(feature = "WebKit_WKWebViewConfiguration")]
        #[method_id(@__retain_semantics Init initWithFrame:configuration:)]
        pub unsafe fn initWithFrame_configuration(
            this: Option<Allocated<Self>>,
            frame: CGRect,
            configuration: &WKWebViewConfiguration,
        ) -> Id<Self>;

        #[cfg(feature = "Foundation_NSCoder")]
        #[method_id(@__retain_semantics Init initWithCoder:)]
        pub unsafe fn initWithCoder(
            this: Option<Allocated<Self>>,
            coder: &NSCoder,
        ) -> Option<Id<Self>>;

        #[cfg(all(feature = "Foundation_NSURLRequest", feature = "WebKit_WKNavigation"))]
        #[method_id(@__retain_semantics Other loadRequest:)]
        pub unsafe fn loadRequest(&self, request: &NSURLRequest) -> Option<Id<WKNavigation>>;

        #[cfg(all(feature = "Foundation_NSURL", feature = "WebKit_WKNavigation"))]
        #[method_id(@__retain_semantics Other loadFileURL:allowingReadAccessToURL:)]
        pub unsafe fn loadFileURL_allowingReadAccessToURL(
            &self,
            url: &NSURL,
            read_access_url: &NSURL,
        ) -> Option<Id<WKNavigation>>;

        #[cfg(all(
            feature = "Foundation_NSString",
            feature = "Foundation_NSURL",
            feature = "WebKit_WKNavigation"
        ))]
        #[method_id(@__retain_semantics Other loadHTMLString:baseURL:)]
        pub unsafe fn loadHTMLString_baseURL(
            &self,
            string: &NSString,
            base_url: Option<&NSURL>,
        ) -> Option<Id<WKNavigation>>;

        #[cfg(all(
            feature = "Foundation_NSData",
            feature = "Foundation_NSString",
            feature = "Foundation_NSURL",
            feature = "WebKit_WKNavigation"
        ))]
        #[method_id(@__retain_semantics Other loadData:MIMEType:characterEncodingName:baseURL:)]
        pub unsafe fn loadData_MIMEType_characterEncodingName_baseURL(
            &self,
            data: &NSData,
            mime_type: &NSString,
            character_encoding_name: &NSString,
            base_url: &NSURL,
        ) -> Option<Id<WKNavigation>>;

        #[cfg(all(
            feature = "WebKit_WKBackForwardListItem",
            feature = "WebKit_WKNavigation"
        ))]
        #[method_id(@__retain_semantics Other goToBackForwardListItem:)]
        pub unsafe fn goToBackForwardListItem(
            &self,
            item: &WKBackForwardListItem,
        ) -> Option<Id<WKNavigation>>;

        #[cfg(feature = "Foundation_NSString")]
        /**
          @abstract The page title.
        @discussion @link WKWebView @/link is key-value observing (KVO) compliant
        for this property.
        */
        #[method_id(@__retain_semantics Other title)]
        pub unsafe fn title(&self) -> Option<Id<NSString>>;

        #[cfg(feature = "Foundation_NSURL")]
        /**
          @abstract The active URL.
        @discussion This is the URL that should be reflected in the user
        interface.
        @link WKWebView @/link is key-value observing (KVO) compliant for this
        property.
        */
        #[method_id(@__retain_semantics Other URL)]
        pub unsafe fn URL(&self) -> Option<Id<NSURL>>;

        /**
          @abstract A Boolean value indicating whether the view is currently
        loading content.
        @discussion @link WKWebView @/link is key-value observing (KVO) compliant
        for this property.
        */
        #[method(isLoading)]
        pub unsafe fn isLoading(&self) -> bool;

        /**
          @abstract An estimate of what fraction of the current navigation has been completed.
        @discussion This value ranges from 0.0 to 1.0 based on the total number of
        bytes expected to be received, including the main document and all of its
        potential subresources. After a navigation completes, the value remains at 1.0
        until a new navigation starts, at which point it is reset to 0.0.
        @link WKWebView @/link is key-value observing (KVO) compliant for this
        property.
        */
        #[method(estimatedProgress)]
        pub unsafe fn estimatedProgress(&self) -> c_double;

        /**
          @abstract A Boolean value indicating whether all resources on the page
        have been loaded over securely encrypted connections.
        @discussion @link WKWebView @/link is key-value observing (KVO) compliant
        for this property.
        */
        #[method(hasOnlySecureContent)]
        pub unsafe fn hasOnlySecureContent(&self) -> bool;

        /**
          @abstract A Boolean value indicating whether there is a back item in
        the back-forward list that can be navigated to.
        @discussion @link WKWebView @/link is key-value observing (KVO) compliant
        for this property.
        @seealso backForwardList.
        */
        #[method(canGoBack)]
        pub unsafe fn canGoBack(&self) -> bool;

        /**
          @abstract A Boolean value indicating whether there is a forward item in
        the back-forward list that can be navigated to.
        @discussion @link WKWebView @/link is key-value observing (KVO) compliant
        for this property.
        @seealso backForwardList.
        */
        #[method(canGoForward)]
        pub unsafe fn canGoForward(&self) -> bool;

        #[cfg(feature = "WebKit_WKNavigation")]
        #[method_id(@__retain_semantics Other goBack)]
        pub unsafe fn goBack(&self) -> Option<Id<WKNavigation>>;

        #[cfg(feature = "WebKit_WKNavigation")]
        #[method_id(@__retain_semantics Other goForward)]
        pub unsafe fn goForward(&self) -> Option<Id<WKNavigation>>;

        #[cfg(feature = "WebKit_WKNavigation")]
        #[method_id(@__retain_semantics Other reload)]
        pub unsafe fn reload(&self) -> Option<Id<WKNavigation>>;

        #[cfg(feature = "WebKit_WKNavigation")]
        #[method_id(@__retain_semantics Other reloadFromOrigin)]
        pub unsafe fn reloadFromOrigin(&self) -> Option<Id<WKNavigation>>;

        #[method(stopLoading)]
        pub unsafe fn stopLoading(&self);

        #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSString"))]
        #[method(evaluateJavaScript:completionHandler:)]
        pub unsafe fn evaluateJavaScript_completionHandler(
            &self,
            java_script_string: &NSString,
            completion_handler: Option<&Block<(*mut Object, *mut NSError), ()>>,
        );

        #[cfg(all(
            feature = "Foundation_NSError",
            feature = "Foundation_NSString",
            feature = "WebKit_WKContentWorld",
            feature = "WebKit_WKFrameInfo"
        ))]
        #[method(evaluateJavaScript:inFrame:inContentWorld:completionHandler:)]
        pub unsafe fn evaluateJavaScript_inFrame_inContentWorld_completionHandler(
            &self,
            java_script_string: &NSString,
            frame: Option<&WKFrameInfo>,
            content_world: &WKContentWorld,
            completion_handler: Option<&Block<(*mut Object, *mut NSError), ()>>,
        );

        #[cfg(all(
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSError",
            feature = "Foundation_NSString",
            feature = "WebKit_WKContentWorld",
            feature = "WebKit_WKFrameInfo"
        ))]
        #[method(callAsyncJavaScript:arguments:inFrame:inContentWorld:completionHandler:)]
        pub unsafe fn callAsyncJavaScript_arguments_inFrame_inContentWorld_completionHandler(
            &self,
            function_body: &NSString,
            arguments: Option<&NSDictionary<NSString, Object>>,
            frame: Option<&WKFrameInfo>,
            content_world: &WKContentWorld,
            completion_handler: Option<&Block<(*mut Object, *mut NSError), ()>>,
        );

        #[method(closeAllMediaPresentationsWithCompletionHandler:)]
        pub unsafe fn closeAllMediaPresentationsWithCompletionHandler(
            &self,
            completion_handler: Option<&Block<(), ()>>,
        );

        #[deprecated]
        #[method(closeAllMediaPresentations)]
        pub unsafe fn closeAllMediaPresentations(&self);

        #[method(pauseAllMediaPlaybackWithCompletionHandler:)]
        pub unsafe fn pauseAllMediaPlaybackWithCompletionHandler(
            &self,
            completion_handler: Option<&Block<(), ()>>,
        );

        #[deprecated]
        #[method(pauseAllMediaPlayback:)]
        pub unsafe fn pauseAllMediaPlayback(&self, completion_handler: Option<&Block<(), ()>>);

        #[method(setAllMediaPlaybackSuspended:completionHandler:)]
        pub unsafe fn setAllMediaPlaybackSuspended_completionHandler(
            &self,
            suspended: bool,
            completion_handler: Option<&Block<(), ()>>,
        );

        #[deprecated]
        #[method(resumeAllMediaPlayback:)]
        pub unsafe fn resumeAllMediaPlayback(&self, completion_handler: Option<&Block<(), ()>>);

        #[deprecated]
        #[method(suspendAllMediaPlayback:)]
        pub unsafe fn suspendAllMediaPlayback(&self, completion_handler: Option<&Block<(), ()>>);

        #[method(requestMediaPlaybackStateWithCompletionHandler:)]
        pub unsafe fn requestMediaPlaybackStateWithCompletionHandler(
            &self,
            completion_handler: &Block<(WKMediaPlaybackState,), ()>,
        );

        #[deprecated]
        #[method(requestMediaPlaybackState:)]
        pub unsafe fn requestMediaPlaybackState(
            &self,
            completion_handler: &Block<(WKMediaPlaybackState,), ()>,
        );

        /**
          @abstract The state of camera capture on a web page.
        @discussion @link WKWebView @/link is key-value observing (KVO) compliant
        for this property.
        */
        #[method(cameraCaptureState)]
        pub unsafe fn cameraCaptureState(&self) -> WKMediaCaptureState;

        /**
          @abstract The state of microphone capture on a web page.
        @discussion @link WKWebView @/link is key-value observing (KVO) compliant
        for this property.
        */
        #[method(microphoneCaptureState)]
        pub unsafe fn microphoneCaptureState(&self) -> WKMediaCaptureState;

        #[method(setCameraCaptureState:completionHandler:)]
        pub unsafe fn setCameraCaptureState_completionHandler(
            &self,
            state: WKMediaCaptureState,
            completion_handler: Option<&Block<(), ()>>,
        );

        #[method(setMicrophoneCaptureState:completionHandler:)]
        pub unsafe fn setMicrophoneCaptureState_completionHandler(
            &self,
            state: WKMediaCaptureState,
            completion_handler: Option<&Block<(), ()>>,
        );

        #[cfg(all(
            feature = "AppKit_NSImage",
            feature = "Foundation_NSError",
            feature = "WebKit_WKSnapshotConfiguration"
        ))]
        #[method(takeSnapshotWithConfiguration:completionHandler:)]
        pub unsafe fn takeSnapshotWithConfiguration_completionHandler(
            &self,
            snapshot_configuration: Option<&WKSnapshotConfiguration>,
            completion_handler: &Block<(*mut NSImage, *mut NSError), ()>,
        );

        #[cfg(all(
            feature = "Foundation_NSData",
            feature = "Foundation_NSError",
            feature = "WebKit_WKPDFConfiguration"
        ))]
        #[method(createPDFWithConfiguration:completionHandler:)]
        pub unsafe fn createPDFWithConfiguration_completionHandler(
            &self,
            pdf_configuration: Option<&WKPDFConfiguration>,
            completion_handler: &Block<(*mut NSData, *mut NSError), ()>,
        );

        #[cfg(all(feature = "Foundation_NSData", feature = "Foundation_NSError"))]
        #[method(createWebArchiveDataWithCompletionHandler:)]
        pub unsafe fn createWebArchiveDataWithCompletionHandler(
            &self,
            completion_handler: &Block<(NonNull<NSData>, NonNull<NSError>), ()>,
        );

        /**
          @abstract A Boolean value indicating whether horizontal swipe gestures
        will trigger back-forward list navigations.
        @discussion The default value is NO.
        */
        #[method(allowsBackForwardNavigationGestures)]
        pub unsafe fn allowsBackForwardNavigationGestures(&self) -> bool;

        /**
          @abstract A Boolean value indicating whether horizontal swipe gestures
        will trigger back-forward list navigations.
        @discussion The default value is NO.
        */
        #[method(setAllowsBackForwardNavigationGestures:)]
        pub unsafe fn setAllowsBackForwardNavigationGestures(
            &self,
            allows_back_forward_navigation_gestures: bool,
        );

        #[cfg(feature = "Foundation_NSString")]
        /**
          @abstract The custom user agent string or nil if no custom user agent string has been set.
        */
        #[method_id(@__retain_semantics Other customUserAgent)]
        pub unsafe fn customUserAgent(&self) -> Option<Id<NSString>>;

        #[cfg(feature = "Foundation_NSString")]
        /**
          @abstract The custom user agent string or nil if no custom user agent string has been set.
        */
        #[method(setCustomUserAgent:)]
        pub unsafe fn setCustomUserAgent(&self, custom_user_agent: Option<&NSString>);

        /**
          @abstract A Boolean value indicating whether link preview is allowed for any
        links inside this WKWebView.
        @discussion The default value is YES on Mac and iOS.
        */
        #[method(allowsLinkPreview)]
        pub unsafe fn allowsLinkPreview(&self) -> bool;

        /**
          @abstract A Boolean value indicating whether link preview is allowed for any
        links inside this WKWebView.
        @discussion The default value is YES on Mac and iOS.
        */
        #[method(setAllowsLinkPreview:)]
        pub unsafe fn setAllowsLinkPreview(&self, allows_link_preview: bool);

        /**
          @abstract A Boolean value indicating whether magnify gestures will
        change the web view's magnification.
        @discussion It is possible to set the magnification property even if
        allowsMagnification is set to NO.
        The default value is NO.
        */
        #[method(allowsMagnification)]
        pub unsafe fn allowsMagnification(&self) -> bool;

        /**
          @abstract A Boolean value indicating whether magnify gestures will
        change the web view's magnification.
        @discussion It is possible to set the magnification property even if
        allowsMagnification is set to NO.
        The default value is NO.
        */
        #[method(setAllowsMagnification:)]
        pub unsafe fn setAllowsMagnification(&self, allows_magnification: bool);

        /**
          @abstract The factor by which the viewport of the page is currently scaled.
        @discussion The default value is 1.0.
        */
        #[method(magnification)]
        pub unsafe fn magnification(&self) -> CGFloat;

        /**
          @abstract The factor by which the viewport of the page is currently scaled.
        @discussion The default value is 1.0.
        */
        #[method(setMagnification:)]
        pub unsafe fn setMagnification(&self, magnification: CGFloat);

        #[method(setMagnification:centeredAtPoint:)]
        pub unsafe fn setMagnification_centeredAtPoint(
            &self,
            magnification: CGFloat,
            point: CGPoint,
        );

        /**
          @abstract The factor by which page content is scaled relative to the viewport.
        @discussion The default value is 1.0.
        Changing this value is equivalent to web content setting the CSS "zoom"
        property on all page content.
        */
        #[method(pageZoom)]
        pub unsafe fn pageZoom(&self) -> CGFloat;

        /**
          @abstract The factor by which page content is scaled relative to the viewport.
        @discussion The default value is 1.0.
        Changing this value is equivalent to web content setting the CSS "zoom"
        property on all page content.
        */
        #[method(setPageZoom:)]
        pub unsafe fn setPageZoom(&self, page_zoom: CGFloat);

        #[cfg(all(
            feature = "Foundation_NSString",
            feature = "WebKit_WKFindConfiguration",
            feature = "WebKit_WKFindResult"
        ))]
        #[method(findString:withConfiguration:completionHandler:)]
        pub unsafe fn findString_withConfiguration_completionHandler(
            &self,
            string: &NSString,
            configuration: Option<&WKFindConfiguration>,
            completion_handler: &Block<(NonNull<WKFindResult>,), ()>,
        );

        #[cfg(feature = "Foundation_NSString")]
        #[method(handlesURLScheme:)]
        pub unsafe fn handlesURLScheme(url_scheme: &NSString) -> bool;

        #[cfg(all(feature = "Foundation_NSURLRequest", feature = "WebKit_WKDownload"))]
        #[method(startDownloadUsingRequest:completionHandler:)]
        pub unsafe fn startDownloadUsingRequest_completionHandler(
            &self,
            request: &NSURLRequest,
            completion_handler: &Block<(NonNull<WKDownload>,), ()>,
        );

        #[cfg(all(feature = "Foundation_NSData", feature = "WebKit_WKDownload"))]
        #[method(resumeDownloadFromResumeData:completionHandler:)]
        pub unsafe fn resumeDownloadFromResumeData_completionHandler(
            &self,
            resume_data: &NSData,
            completion_handler: &Block<(NonNull<WKDownload>,), ()>,
        );

        #[cfg(feature = "Foundation_NSString")]
        /**
          @abstract The media type for the WKWebView
        @discussion The value of mediaType will override the normal value of the CSS media property.
        Setting the value to nil will restore the normal value.
        The default value is nil.
        */
        #[method_id(@__retain_semantics Other mediaType)]
        pub unsafe fn mediaType(&self) -> Option<Id<NSString>>;

        #[cfg(feature = "Foundation_NSString")]
        /**
          @abstract The media type for the WKWebView
        @discussion The value of mediaType will override the normal value of the CSS media property.
        Setting the value to nil will restore the normal value.
        The default value is nil.
        */
        #[method(setMediaType:)]
        pub unsafe fn setMediaType(&self, media_type: Option<&NSString>);

        /**
          @abstract The interaction state for the WKWebView
        @discussion The interaction state (back-forward list, currently loaded page, scroll position, form data...) for the WKWebView, which
        can be retrieved and set on another WKWebView to restore state.
        */
        #[method_id(@__retain_semantics Other interactionState)]
        pub unsafe fn interactionState(&self) -> Option<Id<Object>>;

        /**
          @abstract The interaction state for the WKWebView
        @discussion The interaction state (back-forward list, currently loaded page, scroll position, form data...) for the WKWebView, which
        can be retrieved and set on another WKWebView to restore state.
        */
        #[method(setInteractionState:)]
        pub unsafe fn setInteractionState(&self, interaction_state: Option<&Object>);

        #[cfg(all(
            feature = "Foundation_NSData",
            feature = "Foundation_NSURLRequest",
            feature = "Foundation_NSURLResponse",
            feature = "WebKit_WKNavigation"
        ))]
        #[method_id(@__retain_semantics Other loadSimulatedRequest:response:responseData:)]
        pub unsafe fn loadSimulatedRequest_response_responseData(
            &self,
            request: &NSURLRequest,
            response: &NSURLResponse,
            data: &NSData,
        ) -> Id<WKNavigation>;

        #[cfg(all(
            feature = "Foundation_NSData",
            feature = "Foundation_NSURLRequest",
            feature = "Foundation_NSURLResponse",
            feature = "WebKit_WKNavigation"
        ))]
        #[deprecated]
        #[method_id(@__retain_semantics Other loadSimulatedRequest:withResponse:responseData:)]
        pub unsafe fn loadSimulatedRequest_withResponse_responseData(
            &self,
            request: &NSURLRequest,
            response: &NSURLResponse,
            data: &NSData,
        ) -> Id<WKNavigation>;

        #[cfg(all(
            feature = "Foundation_NSURL",
            feature = "Foundation_NSURLRequest",
            feature = "WebKit_WKNavigation"
        ))]
        #[method_id(@__retain_semantics Other loadFileRequest:allowingReadAccessToURL:)]
        pub unsafe fn loadFileRequest_allowingReadAccessToURL(
            &self,
            request: &NSURLRequest,
            read_access_url: &NSURL,
        ) -> Id<WKNavigation>;

        #[cfg(all(
            feature = "Foundation_NSString",
            feature = "Foundation_NSURLRequest",
            feature = "WebKit_WKNavigation"
        ))]
        #[method_id(@__retain_semantics Other loadSimulatedRequest:responseHTMLString:)]
        pub unsafe fn loadSimulatedRequest_responseHTMLString(
            &self,
            request: &NSURLRequest,
            string: &NSString,
        ) -> Id<WKNavigation>;

        #[cfg(all(
            feature = "Foundation_NSString",
            feature = "Foundation_NSURLRequest",
            feature = "WebKit_WKNavigation"
        ))]
        #[deprecated]
        #[method_id(@__retain_semantics Other loadSimulatedRequest:withResponseHTMLString:)]
        pub unsafe fn loadSimulatedRequest_withResponseHTMLString(
            &self,
            request: &NSURLRequest,
            string: &NSString,
        ) -> Id<WKNavigation>;

        #[cfg(all(feature = "AppKit_NSPrintInfo", feature = "AppKit_NSPrintOperation"))]
        #[method_id(@__retain_semantics Other printOperationWithPrintInfo:)]
        pub unsafe fn printOperationWithPrintInfo(
            &self,
            print_info: &NSPrintInfo,
        ) -> Id<NSPrintOperation>;

        #[cfg(feature = "AppKit_NSColor")]
        #[method_id(@__retain_semantics Other themeColor)]
        pub unsafe fn themeColor(&self) -> Option<Id<NSColor>>;

        #[cfg(feature = "AppKit_NSColor")]
        #[method_id(@__retain_semantics Other underPageBackgroundColor)]
        pub unsafe fn underPageBackgroundColor(&self) -> Id<NSColor>;

        #[cfg(feature = "AppKit_NSColor")]
        #[method(setUnderPageBackgroundColor:)]
        pub unsafe fn setUnderPageBackgroundColor(
            &self,
            under_page_background_color: Option<&NSColor>,
        );

        /**
          @abstract A WKWebView's fullscreen state.
        @discussion @link WKWebView @link is key-value observing (KVO) compliant for this property. When an element
        in the WKWebView enters fullscreen, WebKit will replace the WKWebView in the application view hierarchy with
        a "placeholder" view, and move the WKWebView into a fullscreen window. When the element exits fullscreen later,
        the WKWebView will be moved back into the application view hierarchy. An application may need to adjust/restore
        its native UI components when the fullscreen state changes. The application should observe the fullscreenState
        property of WKWebView in order to receive notifications regarding the fullscreen state change.
        */
        #[method(fullscreenState)]
        pub unsafe fn fullscreenState(&self) -> WKFullscreenState;

        #[method(minimumViewportInset)]
        pub unsafe fn minimumViewportInset(&self) -> NSEdgeInsets;

        #[method(maximumViewportInset)]
        pub unsafe fn maximumViewportInset(&self) -> NSEdgeInsets;

        #[method(setMinimumViewportInset:maximumViewportInset:)]
        pub unsafe fn setMinimumViewportInset_maximumViewportInset(
            &self,
            minimum_viewport_inset: NSEdgeInsets,
            maximum_viewport_inset: NSEdgeInsets,
        );
    }
);

extern_methods!(
    /// WKIBActions
    #[cfg(feature = "WebKit_WKWebView")]
    unsafe impl WKWebView {
        #[method(goBack:)]
        pub unsafe fn goBack_(&self, sender: Option<&Object>);

        #[method(goForward:)]
        pub unsafe fn goForward_(&self, sender: Option<&Object>);

        #[method(reload:)]
        pub unsafe fn reload_(&self, sender: Option<&Object>);

        #[method(reloadFromOrigin:)]
        pub unsafe fn reloadFromOrigin_(&self, sender: Option<&Object>);

        #[method(stopLoading:)]
        pub unsafe fn stopLoading_(&self, sender: Option<&Object>);
    }
);

#[cfg(feature = "WebKit_WKWebView")]
unsafe impl NSUserInterfaceValidations for WKWebView {}

extern_methods!(
    /// WKNSTextFinderClient
    #[cfg(feature = "WebKit_WKWebView")]
    unsafe impl WKWebView {}
);

#[cfg(feature = "WebKit_WKWebView")]
unsafe impl NSTextFinderClient for WKWebView {}

extern_methods!(
    /// WKDeprecated
    #[cfg(feature = "WebKit_WKWebView")]
    unsafe impl WKWebView {
        #[cfg(feature = "Foundation_NSArray")]
        #[deprecated]
        #[method_id(@__retain_semantics Other certificateChain)]
        pub unsafe fn certificateChain(&self) -> Id<NSArray>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSView`
    #[cfg(feature = "WebKit_WKWebView")]
    unsafe impl WKWebView {
        #[method_id(@__retain_semantics Init initWithFrame:)]
        pub unsafe fn initWithFrame(this: Option<Allocated<Self>>, frame_rect: NSRect) -> Id<Self>;
    }
);
