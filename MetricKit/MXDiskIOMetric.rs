//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;
use crate::MetricKit::*;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "MetricKit_MXDiskIOMetric")]
    /**
     @class         MXDiskIOMetric
    @abstract      An MXMetric subclass that encapsulates disk IO metrics.
    */
    pub struct MXDiskIOMetric;

    #[cfg(feature = "MetricKit_MXDiskIOMetric")]
    unsafe impl ClassType for MXDiskIOMetric {
        #[inherits(NSObject)]
        type Super = MXMetric;
    }
);

#[cfg(feature = "MetricKit_MXDiskIOMetric")]
/**
 @class         MXDiskIOMetric
@abstract      An MXMetric subclass that encapsulates disk IO metrics.
*/
unsafe impl NSCoding for MXDiskIOMetric {}

#[cfg(feature = "MetricKit_MXDiskIOMetric")]
/**
 @class         MXDiskIOMetric
@abstract      An MXMetric subclass that encapsulates disk IO metrics.
*/
unsafe impl NSObjectProtocol for MXDiskIOMetric {}

#[cfg(feature = "MetricKit_MXDiskIOMetric")]
/**
 @class         MXDiskIOMetric
@abstract      An MXMetric subclass that encapsulates disk IO metrics.
*/
unsafe impl NSSecureCoding for MXDiskIOMetric {}

extern_methods!(
    /**
     @class         MXDiskIOMetric
    @abstract      An MXMetric subclass that encapsulates disk IO metrics.
    */
    #[cfg(feature = "MetricKit_MXDiskIOMetric")]
    unsafe impl MXDiskIOMetric {
        #[cfg(all(
            feature = "Foundation_NSMeasurement",
            feature = "Foundation_NSUnitInformationStorage"
        ))]
        /**
         @property      cumulativeLogicalWrites
        @abstract      Cumulative amount of logical writes.
        @discussion    Dimensioned as NSUnitInformationStorage.
        */
        #[method_id(@__retain_semantics Other cumulativeLogicalWrites)]
        pub unsafe fn cumulativeLogicalWrites(&self)
            -> Id<NSMeasurement<NSUnitInformationStorage>>;
    }
);
