//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
#![allow(unused_imports)]
#![allow(deprecated)]
#[path = "CLAvailability.rs"]
mod __CLAvailability;
#[path = "CLBeaconIdentityConstraint.rs"]
mod __CLBeaconIdentityConstraint;
#[path = "CLBeaconRegion.rs"]
mod __CLBeaconRegion;
#[path = "CLCircularRegion.rs"]
mod __CLCircularRegion;
#[path = "CLError.rs"]
mod __CLError;
#[path = "CLErrorDomain.rs"]
mod __CLErrorDomain;
#[path = "CLGeocoder.rs"]
mod __CLGeocoder;
#[path = "CLHeading.rs"]
mod __CLHeading;
#[path = "CLLocation.rs"]
mod __CLLocation;
#[path = "CLLocationManager.rs"]
mod __CLLocationManager;
#[path = "CLLocationManagerDelegate.rs"]
mod __CLLocationManagerDelegate;
#[path = "CLLocationManager_CLVisitExtensions.rs"]
mod __CLLocationManager_CLVisitExtensions;
#[path = "CLLocationPushServiceError.rs"]
mod __CLLocationPushServiceError;
#[path = "CLLocationPushServiceExtension.rs"]
mod __CLLocationPushServiceExtension;
#[path = "CLPlacemark.rs"]
mod __CLPlacemark;
#[path = "CLRegion.rs"]
mod __CLRegion;
#[path = "CLVisit.rs"]
mod __CLVisit;

pub use self::__CLBeaconIdentityConstraint::CLBeaconMajorValue;

#[cfg(feature = "CoreLocation_CLBeaconIdentityConstraint")]
#[cfg(not(any(target_os = "tvos", target_os = "watchos")))]
pub use self::__CLBeaconIdentityConstraint::CLBeaconIdentityConstraint;
pub use self::__CLBeaconIdentityConstraint::CLBeaconMinorValue;
#[cfg(feature = "CoreLocation_CLBeacon")]
#[cfg(not(any(target_os = "tvos", target_os = "watchos")))]
pub use self::__CLBeaconRegion::CLBeacon;
#[cfg(feature = "CoreLocation_CLBeaconRegion")]
#[cfg(not(any(target_os = "tvos", target_os = "watchos")))]
pub use self::__CLBeaconRegion::CLBeaconRegion;
#[cfg(feature = "CoreLocation_CLCircularRegion")]
pub use self::__CLCircularRegion::CLCircularRegion;

pub use self::__CLError::CLError;

pub use self::__CLError::kCLErrorLocationUnknown;

pub use self::__CLError::kCLErrorDenied;

pub use self::__CLError::kCLErrorNetwork;

pub use self::__CLError::kCLErrorHeadingFailure;

pub use self::__CLError::kCLErrorRegionMonitoringDenied;

pub use self::__CLError::kCLErrorRegionMonitoringFailure;

pub use self::__CLError::kCLErrorRegionMonitoringSetupDelayed;

pub use self::__CLError::kCLErrorRegionMonitoringResponseDelayed;

pub use self::__CLError::kCLErrorGeocodeFoundNoResult;

pub use self::__CLError::kCLErrorGeocodeFoundPartialResult;

pub use self::__CLError::kCLErrorGeocodeCanceled;

pub use self::__CLError::kCLErrorDeferredFailed;

pub use self::__CLError::kCLErrorDeferredNotUpdatingLocation;

pub use self::__CLError::kCLErrorDeferredAccuracyTooLow;

pub use self::__CLError::kCLErrorDeferredDistanceFiltered;

pub use self::__CLError::kCLErrorDeferredCanceled;

pub use self::__CLError::kCLErrorRangingUnavailable;

pub use self::__CLError::kCLErrorRangingFailure;

pub use self::__CLError::kCLErrorPromptDeclined;

pub use self::__CLError::kCLErrorHistoricalLocationError;
#[cfg(not(any(target_os = "tvos", target_os = "watchos")))]
pub use self::__CLError::kCLErrorUserInfoAlternateRegionKey;

pub use self::__CLErrorDomain::kCLErrorDomain;

pub use self::__CLGeocoder::CLGeocodeCompletionHandler;
#[cfg(feature = "CoreLocation_CLGeocoder")]
pub use self::__CLGeocoder::CLGeocoder;

pub use self::__CLHeading::CLHeadingComponentValue;

pub use self::__CLHeading::kCLHeadingFilterNone;
#[cfg(feature = "CoreLocation_CLHeading")]
#[cfg(not(any(target_os = "tvos")))]
pub use self::__CLHeading::CLHeading;

pub use self::__CLLocation::CLLocationDegrees;

pub use self::__CLLocation::CLLocationAccuracy;

pub use self::__CLLocation::CLLocationSpeed;

pub use self::__CLLocation::CLLocationSpeedAccuracy;

pub use self::__CLLocation::CLLocationDirection;

pub use self::__CLLocation::CLLocationDirectionAccuracy;

pub use self::__CLLocation::CLLocationCoordinate2D;

pub use self::__CLLocation::CLLocationDistance;

pub use self::__CLLocation::kCLDistanceFilterNone;

pub use self::__CLLocation::kCLLocationAccuracyBestForNavigation;

pub use self::__CLLocation::kCLLocationAccuracyBest;

pub use self::__CLLocation::kCLLocationAccuracyNearestTenMeters;

pub use self::__CLLocation::kCLLocationAccuracyHundredMeters;

pub use self::__CLLocation::kCLLocationAccuracyKilometer;

pub use self::__CLLocation::kCLLocationAccuracyThreeKilometers;

pub use self::__CLLocation::kCLLocationAccuracyReduced;

pub use self::__CLLocation::CLLocationDistanceMax;

pub use self::__CLLocation::CLTimeIntervalMax;

pub use self::__CLLocation::kCLLocationCoordinate2DInvalid;

pub use self::__CLLocation::CLLocationCoordinate2DIsValid;

#[cfg(feature = "CoreLocation_CLFloor")]
pub use self::__CLLocation::CLFloor;
#[cfg(feature = "CoreLocation_CLLocation")]
pub use self::__CLLocation::CLLocation;
pub use self::__CLLocation::CLLocationCoordinate2DMake;
#[cfg(feature = "CoreLocation_CLLocationSourceInformation")]
pub use self::__CLLocation::CLLocationSourceInformation;

pub use self::__CLLocationManager::CLDeviceOrientation;

pub use self::__CLLocationManager::CLDeviceOrientationUnknown;

pub use self::__CLLocationManager::CLDeviceOrientationPortrait;

pub use self::__CLLocationManager::CLDeviceOrientationPortraitUpsideDown;

pub use self::__CLLocationManager::CLDeviceOrientationLandscapeLeft;

pub use self::__CLLocationManager::CLDeviceOrientationLandscapeRight;

pub use self::__CLLocationManager::CLDeviceOrientationFaceUp;

pub use self::__CLLocationManager::CLDeviceOrientationFaceDown;

pub use self::__CLLocationManager::CLAuthorizationStatus;

pub use self::__CLLocationManager::kCLAuthorizationStatusNotDetermined;

pub use self::__CLLocationManager::kCLAuthorizationStatusRestricted;

pub use self::__CLLocationManager::kCLAuthorizationStatusDenied;

pub use self::__CLLocationManager::kCLAuthorizationStatusAuthorizedAlways;

pub use self::__CLLocationManager::kCLAuthorizationStatusAuthorizedWhenInUse;

pub use self::__CLLocationManager::kCLAuthorizationStatusAuthorized;

pub use self::__CLLocationManager::CLAccuracyAuthorization;

pub use self::__CLLocationManager::CLAccuracyAuthorizationFullAccuracy;

pub use self::__CLLocationManager::CLAccuracyAuthorizationReducedAccuracy;

pub use self::__CLLocationManager::CLActivityType;

pub use self::__CLLocationManager::CLActivityTypeOther;

pub use self::__CLLocationManager::CLActivityTypeAutomotiveNavigation;

pub use self::__CLLocationManager::CLActivityTypeFitness;

pub use self::__CLLocationManager::CLActivityTypeOtherNavigation;

pub use self::__CLLocationManager::CLActivityTypeAirborne;
#[cfg(feature = "CoreLocation_CLLocationManager")]
pub use self::__CLLocationManager::CLLocationManager;

pub use self::__CLLocationManagerDelegate::CLLocationManagerDelegate;
#[cfg(not(any(target_os = "macos", target_os = "tvos", target_os = "watchos")))]
pub use self::__CLLocationPushServiceError::CLLocationPushServiceError;
#[cfg(not(any(target_os = "macos", target_os = "tvos", target_os = "watchos")))]
pub use self::__CLLocationPushServiceError::CLLocationPushServiceErrorDomain;
#[cfg(not(any(target_os = "macos", target_os = "tvos", target_os = "watchos")))]
pub use self::__CLLocationPushServiceError::CLLocationPushServiceErrorMissingEntitlement;
#[cfg(not(any(target_os = "macos", target_os = "tvos", target_os = "watchos")))]
pub use self::__CLLocationPushServiceError::CLLocationPushServiceErrorMissingPushExtension;
#[cfg(not(any(target_os = "macos", target_os = "tvos", target_os = "watchos")))]
pub use self::__CLLocationPushServiceError::CLLocationPushServiceErrorMissingPushServerEnvironment;
#[cfg(not(any(target_os = "macos", target_os = "tvos", target_os = "watchos")))]
pub use self::__CLLocationPushServiceError::CLLocationPushServiceErrorUnknown;
#[cfg(not(any(target_os = "macos", target_os = "tvos", target_os = "watchos")))]
pub use self::__CLLocationPushServiceExtension::CLLocationPushServiceExtension;
#[cfg(feature = "CoreLocation_CLPlacemark")]
pub use self::__CLPlacemark::CLPlacemark;
#[cfg(not(any(target_os = "tvos", target_os = "watchos")))]
pub use self::__CLRegion::CLProximity;
#[cfg(not(any(target_os = "tvos", target_os = "watchos")))]
pub use self::__CLRegion::CLProximityFar;
#[cfg(not(any(target_os = "tvos", target_os = "watchos")))]
pub use self::__CLRegion::CLProximityImmediate;
#[cfg(not(any(target_os = "tvos", target_os = "watchos")))]
pub use self::__CLRegion::CLProximityNear;
#[cfg(not(any(target_os = "tvos", target_os = "watchos")))]
pub use self::__CLRegion::CLProximityUnknown;
#[cfg(feature = "CoreLocation_CLRegion")]
pub use self::__CLRegion::CLRegion;
#[cfg(not(any(target_os = "tvos", target_os = "watchos")))]
pub use self::__CLRegion::CLRegionState;
#[cfg(not(any(target_os = "tvos", target_os = "watchos")))]
pub use self::__CLRegion::CLRegionStateInside;
#[cfg(not(any(target_os = "tvos", target_os = "watchos")))]
pub use self::__CLRegion::CLRegionStateOutside;
#[cfg(not(any(target_os = "tvos", target_os = "watchos")))]
pub use self::__CLRegion::CLRegionStateUnknown;
#[cfg(feature = "CoreLocation_CLVisit")]
#[cfg(not(any(target_os = "tvos", target_os = "watchos")))]
pub use self::__CLVisit::CLVisit;
