//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

pub type NSTextInputSourceIdentifier = NSString;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "AppKit_NSTextInputContext")]
    pub struct NSTextInputContext;

    #[cfg(feature = "AppKit_NSTextInputContext")]
    unsafe impl ClassType for NSTextInputContext {
        type Super = NSObject;
    }
);

#[cfg(feature = "AppKit_NSTextInputContext")]
unsafe impl NSObjectProtocol for NSTextInputContext {}

extern_methods!(
    #[cfg(feature = "AppKit_NSTextInputContext")]
    unsafe impl NSTextInputContext {
        /**
          The current activated text input context object. The Cocoa Text Input system communicates primarily with the client of the activated input context via the NSTextInputClient protocol.
        */
        #[method_id(@__retain_semantics Other currentInputContext)]
        pub unsafe fn currentInputContext() -> Option<Id<NSTextInputContext>>;

        #[method_id(@__retain_semantics Init initWithClient:)]
        pub unsafe fn initWithClient(
            this: Option<Allocated<Self>>,
            client: &ProtocolObject<dyn NSTextInputClient>,
        ) -> Id<Self>;

        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

        /**
          Properties
         Returns the owner of this input context. The owner, typically an NSView, retains its NSTextInputContext instance. NSTextInputContext doesn't retain its client.
        */
        #[method_id(@__retain_semantics Other client)]
        pub unsafe fn client(&self) -> Id<ProtocolObject<dyn NSTextInputClient>>;

        /**
          Indicates whether the client handles NSGlyphInfoAttributeName or not. The default value is determined by examining the return value sending -validAttributesForMarkedText to client at initialization.
        */
        #[method(acceptsGlyphInfo)]
        pub unsafe fn acceptsGlyphInfo(&self) -> bool;

        /**
          Indicates whether the client handles NSGlyphInfoAttributeName or not. The default value is determined by examining the return value sending -validAttributesForMarkedText to client at initialization.
        */
        #[method(setAcceptsGlyphInfo:)]
        pub unsafe fn setAcceptsGlyphInfo(&self, accepts_glyph_info: bool);

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        /**
          Specifies the set of keyboard input source locales allowed when this input context is active. NSAllRomanInputSourcesLocaleIdentifier can be specified as a valid locale.
        */
        #[method_id(@__retain_semantics Other allowedInputSourceLocales)]
        pub unsafe fn allowedInputSourceLocales(&self) -> Option<Id<NSArray<NSString>>>;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        /**
          Specifies the set of keyboard input source locales allowed when this input context is active. NSAllRomanInputSourcesLocaleIdentifier can be specified as a valid locale.
        */
        #[method(setAllowedInputSourceLocales:)]
        pub unsafe fn setAllowedInputSourceLocales(
            &self,
            allowed_input_source_locales: Option<&NSArray<NSString>>,
        );

        #[method(activate)]
        pub unsafe fn activate(&self);

        #[method(deactivate)]
        pub unsafe fn deactivate(&self);

        #[cfg(feature = "AppKit_NSEvent")]
        #[method(handleEvent:)]
        pub unsafe fn handleEvent(&self, event: &NSEvent) -> bool;

        #[method(discardMarkedText)]
        pub unsafe fn discardMarkedText(&self);

        #[method(invalidateCharacterCoordinates)]
        pub unsafe fn invalidateCharacterCoordinates(&self);

        #[cfg(feature = "Foundation_NSArray")]
        /**
          The array of keyboard text input source identifier strings available to the receiver.
        */
        #[method_id(@__retain_semantics Other keyboardInputSources)]
        pub unsafe fn keyboardInputSources(
            &self,
        ) -> Option<Id<NSArray<NSTextInputSourceIdentifier>>>;

        /**
          The identifier string for the selected keyboard text input source.
        */
        #[method_id(@__retain_semantics Other selectedKeyboardInputSource)]
        pub unsafe fn selectedKeyboardInputSource(&self)
            -> Option<Id<NSTextInputSourceIdentifier>>;

        /**
          The identifier string for the selected keyboard text input source.
        */
        #[method(setSelectedKeyboardInputSource:)]
        pub unsafe fn setSelectedKeyboardInputSource(
            &self,
            selected_keyboard_input_source: Option<&NSTextInputSourceIdentifier>,
        );

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other localizedNameForInputSource:)]
        pub unsafe fn localizedNameForInputSource(
            input_source_identifier: &NSTextInputSourceIdentifier,
        ) -> Option<Id<NSString>>;
    }
);

extern_static!(
    NSTextInputContextKeyboardSelectionDidChangeNotification: &'static NSNotificationName
);
