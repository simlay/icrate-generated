//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

ns_enum!(
    #[underlying(NSUInteger)]
    /**
      In drag and drop, used to specify a dropOperation.  For example, given a table with N rows (numbered with row 0 at the top visually), a row of N-1 and operation of NSTableViewDropOn would specify a drop on the last row.  To specify a drop below the last row, one would use a row of N and NSTableViewDropAbove for the operation.
    */
    pub enum NSTableViewDropOperation {
        NSTableViewDropOn = 0,
        NSTableViewDropAbove = 1,
    }
);

ns_enum!(
    #[underlying(NSUInteger)]
    pub enum NSTableViewColumnAutoresizingStyle {
        NSTableViewNoColumnAutoresizing = 0,
        NSTableViewUniformColumnAutoresizingStyle = 1,
        NSTableViewSequentialColumnAutoresizingStyle = 2,
        NSTableViewReverseSequentialColumnAutoresizingStyle = 3,
        NSTableViewLastColumnOnlyAutoresizingStyle = 4,
        NSTableViewFirstColumnOnlyAutoresizingStyle = 5,
    }
);

ns_options!(
    #[underlying(NSUInteger)]
    /**
      Grid styles for the gridStyleMask.
    */
    pub enum NSTableViewGridLineStyle {
        NSTableViewGridNone = 0,
        NSTableViewSolidVerticalGridLineMask = 1 << 0,
        NSTableViewSolidHorizontalGridLineMask = 1 << 1,
        NSTableViewDashedHorizontalGridLineMask = 1 << 3,
    }
);

ns_enum!(
    #[underlying(NSInteger)]
    pub enum NSTableViewRowSizeStyle {
        NSTableViewRowSizeStyleDefault = -1,
        NSTableViewRowSizeStyleCustom = 0,
        NSTableViewRowSizeStyleSmall = 1,
        NSTableViewRowSizeStyleMedium = 2,
        NSTableViewRowSizeStyleLarge = 3,
    }
);

ns_enum!(
    #[underlying(NSInteger)]
    pub enum NSTableViewStyle {
        NSTableViewStyleAutomatic = 0,
        NSTableViewStyleFullWidth = 1,
        NSTableViewStyleInset = 2,
        NSTableViewStyleSourceList = 3,
        NSTableViewStylePlain = 4,
    }
);

ns_enum!(
    #[underlying(NSInteger)]
    pub enum NSTableViewSelectionHighlightStyle {
        NSTableViewSelectionHighlightStyleNone = -1,
        NSTableViewSelectionHighlightStyleRegular = 0,
        #[deprecated = "Set the NSTableView.style property to NSTableViewStyleSourceList instead."]
        NSTableViewSelectionHighlightStyleSourceList = 1,
    }
);

ns_enum!(
    #[underlying(NSInteger)]
    pub enum NSTableViewDraggingDestinationFeedbackStyle {
        NSTableViewDraggingDestinationFeedbackStyleNone = -1,
        NSTableViewDraggingDestinationFeedbackStyleRegular = 0,
        NSTableViewDraggingDestinationFeedbackStyleSourceList = 1,
        NSTableViewDraggingDestinationFeedbackStyleGap = 2,
    }
);

ns_enum!(
    #[underlying(NSInteger)]
    /**
      NSTableRowActionEdge is used in the delegate method: tableView:rowActionsForRow:edge:
    */
    pub enum NSTableRowActionEdge {
        NSTableRowActionEdgeLeading = 0,
        NSTableRowActionEdgeTrailing = 1,
    }
);

pub type NSTableViewAutosaveName = NSString;

ns_options!(
    #[underlying(NSUInteger)]
    /**
      NSTableView Animation Options
    */
    pub enum NSTableViewAnimationOptions {
        NSTableViewAnimationEffectNone = 0x0,
        NSTableViewAnimationEffectFade = 0x1,
        NSTableViewAnimationEffectGap = 0x2,
        NSTableViewAnimationSlideUp = 0x10,
        NSTableViewAnimationSlideDown = 0x20,
        NSTableViewAnimationSlideLeft = 0x30,
        NSTableViewAnimationSlideRight = 0x40,
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "AppKit_NSTableView")]
    pub struct NSTableView;

    #[cfg(feature = "AppKit_NSTableView")]
    unsafe impl ClassType for NSTableView {
        #[inherits(NSView, NSResponder, NSObject)]
        type Super = NSControl;
    }
);

#[cfg(feature = "AppKit_NSTableView")]
unsafe impl NSAccessibility for NSTableView {}

#[cfg(feature = "AppKit_NSTableView")]
unsafe impl NSAccessibilityElementProtocol for NSTableView {}

#[cfg(feature = "AppKit_NSTableView")]
unsafe impl NSAccessibilityGroup for NSTableView {}

#[cfg(feature = "AppKit_NSTableView")]
unsafe impl NSAccessibilityTable for NSTableView {}

#[cfg(feature = "AppKit_NSTableView")]
unsafe impl NSAnimatablePropertyContainer for NSTableView {}

#[cfg(feature = "AppKit_NSTableView")]
unsafe impl NSAppearanceCustomization for NSTableView {}

#[cfg(feature = "AppKit_NSTableView")]
unsafe impl NSCoding for NSTableView {}

#[cfg(feature = "AppKit_NSTableView")]
unsafe impl NSDraggingDestination for NSTableView {}

#[cfg(feature = "AppKit_NSTableView")]
unsafe impl NSDraggingSource for NSTableView {}

#[cfg(feature = "AppKit_NSTableView")]
unsafe impl NSObjectProtocol for NSTableView {}

#[cfg(feature = "AppKit_NSTableView")]
unsafe impl NSTextDelegate for NSTableView {}

#[cfg(feature = "AppKit_NSTableView")]
unsafe impl NSTextViewDelegate for NSTableView {}

#[cfg(feature = "AppKit_NSTableView")]
unsafe impl NSUserInterfaceItemIdentification for NSTableView {}

#[cfg(feature = "AppKit_NSTableView")]
unsafe impl NSUserInterfaceValidations for NSTableView {}

extern_methods!(
    #[cfg(feature = "AppKit_NSTableView")]
    unsafe impl NSTableView {
        #[method_id(@__retain_semantics Init initWithFrame:)]
        pub unsafe fn initWithFrame(this: Option<Allocated<Self>>, frame_rect: NSRect) -> Id<Self>;

        #[cfg(feature = "Foundation_NSCoder")]
        #[method_id(@__retain_semantics Init initWithCoder:)]
        pub unsafe fn initWithCoder(
            this: Option<Allocated<Self>>,
            coder: &NSCoder,
        ) -> Option<Id<Self>>;

        /**
          Get and set the dataSource. The dataSource can implement methods in the protocol NSTableViewDataSource. Some methods are required, unless bindings are used, in which case they are optional. The dataSource is a weak reference (non retained) in non garbage collected applications. Under garbage collected apps, it is a strong reference. The default value is 'nil'.
        */
        #[method_id(@__retain_semantics Other dataSource)]
        pub unsafe fn dataSource(&self) -> Option<Id<ProtocolObject<dyn NSTableViewDataSource>>>;

        /**
          Get and set the dataSource. The dataSource can implement methods in the protocol NSTableViewDataSource. Some methods are required, unless bindings are used, in which case they are optional. The dataSource is a weak reference (non retained) in non garbage collected applications. Under garbage collected apps, it is a strong reference. The default value is 'nil'.
        */
        #[method(setDataSource:)]
        pub unsafe fn setDataSource(
            &self,
            data_source: Option<&ProtocolObject<dyn NSTableViewDataSource>>,
        );

        /**
          Get and set the delegate. The delegate can implement methods in the protocol NSTableViewDelegate. All delegate methods are optional. The delegate is a weak reference (non retained) in non garbage collected applications. Under garbage collected apps, it is a strong reference. The default value is 'nil'.
        */
        #[method_id(@__retain_semantics Other delegate)]
        pub unsafe fn delegate(&self) -> Option<Id<ProtocolObject<dyn NSTableViewDelegate>>>;

        /**
          Get and set the delegate. The delegate can implement methods in the protocol NSTableViewDelegate. All delegate methods are optional. The delegate is a weak reference (non retained) in non garbage collected applications. Under garbage collected apps, it is a strong reference. The default value is 'nil'.
        */
        #[method(setDelegate:)]
        pub unsafe fn setDelegate(
            &self,
            delegate: Option<&ProtocolObject<dyn NSTableViewDelegate>>,
        );

        #[cfg(feature = "AppKit_NSTableHeaderView")]
        /**
          Get and set the headerView. Calling -setHeaderView:nil will remove the headerView. Calling -setHeaderView: may have the side effect of tiling the enclosingScrollView to accommodate the size change. The default value is a new NSTableHeaderView instance.
        */
        #[method_id(@__retain_semantics Other headerView)]
        pub unsafe fn headerView(&self) -> Option<Id<NSTableHeaderView>>;

        #[cfg(feature = "AppKit_NSTableHeaderView")]
        /**
          Get and set the headerView. Calling -setHeaderView:nil will remove the headerView. Calling -setHeaderView: may have the side effect of tiling the enclosingScrollView to accommodate the size change. The default value is a new NSTableHeaderView instance.
        */
        #[method(setHeaderView:)]
        pub unsafe fn setHeaderView(&self, header_view: Option<&NSTableHeaderView>);

        /**
          Get and set the cornerView. The cornerView is the view that appears directly to the right of the headerView above the vertical NSScroller. The scroller must be present for the cornerView to be shown. Calling -setCornerView: may have the side effect of tiling the enclosingScrollView to accommodate the size change. The default value is an internal class that properly fills in the corner.
        */
        #[method_id(@__retain_semantics Other cornerView)]
        pub unsafe fn cornerView(&self) -> Option<Id<NSView>>;

        /**
          Get and set the cornerView. The cornerView is the view that appears directly to the right of the headerView above the vertical NSScroller. The scroller must be present for the cornerView to be shown. Calling -setCornerView: may have the side effect of tiling the enclosingScrollView to accommodate the size change. The default value is an internal class that properly fills in the corner.
        */
        #[method(setCornerView:)]
        pub unsafe fn setCornerView(&self, corner_view: Option<&NSView>);

        /**
          Get and set the allowsColumnReordering. Controls whether or not columns can be drag-reordered. The default value is YES.
        */
        #[method(allowsColumnReordering)]
        pub unsafe fn allowsColumnReordering(&self) -> bool;

        /**
          Get and set the allowsColumnReordering. Controls whether or not columns can be drag-reordered. The default value is YES.
        */
        #[method(setAllowsColumnReordering:)]
        pub unsafe fn setAllowsColumnReordering(&self, allows_column_reordering: bool);

        /**
          Get and set the allowsColumnResizing. Controls whether the user can attempt to resize columns by dragging between headers. If flag is YES the user can resize columns; if flag is NO the user can't. Columns can only be resized if a column allows user resizing. See -[NSTableColumn setResizingMask:] for more details. You can always change columns programmatically regardless of this setting. The default value is YES.
        */
        #[method(allowsColumnResizing)]
        pub unsafe fn allowsColumnResizing(&self) -> bool;

        /**
          Get and set the allowsColumnResizing. Controls whether the user can attempt to resize columns by dragging between headers. If flag is YES the user can resize columns; if flag is NO the user can't. Columns can only be resized if a column allows user resizing. See -[NSTableColumn setResizingMask:] for more details. You can always change columns programmatically regardless of this setting. The default value is YES.
        */
        #[method(setAllowsColumnResizing:)]
        pub unsafe fn setAllowsColumnResizing(&self, allows_column_resizing: bool);

        /**
          Get and set the columnAutoresizingStyle. This controls resizing in response to a tableView frame size change, usually done by dragging a window larger that has an auto-resized tableView inside it. The default value is NSTableViewLastColumnOnlyAutoresizingStyle.
        Compatability Note: This method replaces -setAutoresizesAllColumnsToFit: on 10.4 and higher.
        */
        #[method(columnAutoresizingStyle)]
        pub unsafe fn columnAutoresizingStyle(&self) -> NSTableViewColumnAutoresizingStyle;

        /**
          Get and set the columnAutoresizingStyle. This controls resizing in response to a tableView frame size change, usually done by dragging a window larger that has an auto-resized tableView inside it. The default value is NSTableViewLastColumnOnlyAutoresizingStyle.
        Compatability Note: This method replaces -setAutoresizesAllColumnsToFit: on 10.4 and higher.
        */
        #[method(setColumnAutoresizingStyle:)]
        pub unsafe fn setColumnAutoresizingStyle(
            &self,
            column_autoresizing_style: NSTableViewColumnAutoresizingStyle,
        );

        /**
          Get and set the gridStyleMask. Values can be bitwise or'ed together, however, only one horizontal style can be used at a time. The default value is NSTableViewGridNone.
        */
        #[method(gridStyleMask)]
        pub unsafe fn gridStyleMask(&self) -> NSTableViewGridLineStyle;

        /**
          Get and set the gridStyleMask. Values can be bitwise or'ed together, however, only one horizontal style can be used at a time. The default value is NSTableViewGridNone.
        */
        #[method(setGridStyleMask:)]
        pub unsafe fn setGridStyleMask(&self, grid_style_mask: NSTableViewGridLineStyle);

        /**
          Get and set the intercellSpacing. This is the spacing that appears between cells. The default value is NSMakeSize(3, 2).
        */
        #[method(intercellSpacing)]
        pub unsafe fn intercellSpacing(&self) -> NSSize;

        /**
          Get and set the intercellSpacing. This is the spacing that appears between cells. The default value is NSMakeSize(3, 2).
        */
        #[method(setIntercellSpacing:)]
        pub unsafe fn setIntercellSpacing(&self, intercell_spacing: NSSize);

        /**
          Get and set the use of alternatingRowBackgroundColors. This configures the table to use either the standard alternating row colors, or a solid color for its background. The default value is NO.
        */
        #[method(usesAlternatingRowBackgroundColors)]
        pub unsafe fn usesAlternatingRowBackgroundColors(&self) -> bool;

        /**
          Get and set the use of alternatingRowBackgroundColors. This configures the table to use either the standard alternating row colors, or a solid color for its background. The default value is NO.
        */
        #[method(setUsesAlternatingRowBackgroundColors:)]
        pub unsafe fn setUsesAlternatingRowBackgroundColors(
            &self,
            uses_alternating_row_background_colors: bool,
        );

        #[cfg(feature = "AppKit_NSColor")]
        /**
          Get and set the backgroundColor. On Mac OS 10.5 and higher, the alpha portion of 'color' is properly used when drawing the backgroundColor. To have a transparent tableView, set the backgroundColor to [NSColor clearColor], and set the enclosing NSScrollView to not draw its background with: [[tableView enclosingScrollView] setDrawsBackground:NO]. NSTableView uses NSCompositeSourceOver when drawing the background color. The default value is [NSColor controlBackgroundColor].
        */
        #[method_id(@__retain_semantics Other backgroundColor)]
        pub unsafe fn backgroundColor(&self) -> Id<NSColor>;

        #[cfg(feature = "AppKit_NSColor")]
        /**
          Get and set the backgroundColor. On Mac OS 10.5 and higher, the alpha portion of 'color' is properly used when drawing the backgroundColor. To have a transparent tableView, set the backgroundColor to [NSColor clearColor], and set the enclosing NSScrollView to not draw its background with: [[tableView enclosingScrollView] setDrawsBackground:NO]. NSTableView uses NSCompositeSourceOver when drawing the background color. The default value is [NSColor controlBackgroundColor].
        */
        #[method(setBackgroundColor:)]
        pub unsafe fn setBackgroundColor(&self, background_color: &NSColor);

        #[cfg(feature = "AppKit_NSColor")]
        /**
          Get and set the gridColor. This value is only used when the gridStyleMask is not equal to NSTableViewGridNone. The default value is [NSColor gridColor].
        */
        #[method_id(@__retain_semantics Other gridColor)]
        pub unsafe fn gridColor(&self) -> Id<NSColor>;

        #[cfg(feature = "AppKit_NSColor")]
        /**
          Get and set the gridColor. This value is only used when the gridStyleMask is not equal to NSTableViewGridNone. The default value is [NSColor gridColor].
        */
        #[method(setGridColor:)]
        pub unsafe fn setGridColor(&self, grid_color: &NSColor);

        /**
          Get and set the rowSizeStyle. The default value is NSTableViewRowSizeStyleCustom, which allows the table to behave as it traditionally has. If the value is not NSTableViewRowSizeStyleCustom, then all three sizes must be properly supported by the view or cell. Changing the rowSizeStyle will automatically update the rowHeight if NSTableViewRowSizeStyleCustom is not used, and the rowHeight should not be changed. It is a recommendation that the variable row height delegate method should generally NOT be implemented when using a non-custom style, and instead the standard provided row heights should be used.
        */
        #[method(rowSizeStyle)]
        pub unsafe fn rowSizeStyle(&self) -> NSTableViewRowSizeStyle;

        /**
          Get and set the rowSizeStyle. The default value is NSTableViewRowSizeStyleCustom, which allows the table to behave as it traditionally has. If the value is not NSTableViewRowSizeStyleCustom, then all three sizes must be properly supported by the view or cell. Changing the rowSizeStyle will automatically update the rowHeight if NSTableViewRowSizeStyleCustom is not used, and the rowHeight should not be changed. It is a recommendation that the variable row height delegate method should generally NOT be implemented when using a non-custom style, and instead the standard provided row heights should be used.
        */
        #[method(setRowSizeStyle:)]
        pub unsafe fn setRowSizeStyle(&self, row_size_style: NSTableViewRowSizeStyle);

        /**
          Returns the effective row size style for the table. If the rowSizeStyle is NSTableViewRowSizeStyleDefault, then this method returns the default size for this particular table.
        */
        #[method(effectiveRowSizeStyle)]
        pub unsafe fn effectiveRowSizeStyle(&self) -> NSTableViewRowSizeStyle;

        /**
          Get and set the rowHeight. The value must be greater than 0. Calling -setRowHeight: with a non-pixel aligning (fractional) value will be forced to a pixel aligning (integral) value. For variable row height tableViews (ones that have the delegate implement -tableView:heightOfRow:), -rowHeight will be used to draw alternating rows past the last row in the tableView. The actual -rectOfRow: is equal to the -rowHeight plus the intercellSpacing.height. The default value is 17.0 for applications linked on 10.5 and higher (the height acceptable for [NSFont systemFontSize]). The default value is 16.0 for 10.4 and lower. Group rows will follow the system defined height.
        */
        #[method(rowHeight)]
        pub unsafe fn rowHeight(&self) -> CGFloat;

        /**
          Get and set the rowHeight. The value must be greater than 0. Calling -setRowHeight: with a non-pixel aligning (fractional) value will be forced to a pixel aligning (integral) value. For variable row height tableViews (ones that have the delegate implement -tableView:heightOfRow:), -rowHeight will be used to draw alternating rows past the last row in the tableView. The actual -rectOfRow: is equal to the -rowHeight plus the intercellSpacing.height. The default value is 17.0 for applications linked on 10.5 and higher (the height acceptable for [NSFont systemFontSize]). The default value is 16.0 for 10.4 and lower. Group rows will follow the system defined height.
        */
        #[method(setRowHeight:)]
        pub unsafe fn setRowHeight(&self, row_height: CGFloat);

        #[cfg(feature = "Foundation_NSIndexSet")]
        #[method(noteHeightOfRowsWithIndexesChanged:)]
        pub unsafe fn noteHeightOfRowsWithIndexesChanged(&self, index_set: &NSIndexSet);

        #[cfg(all(feature = "AppKit_NSTableColumn", feature = "Foundation_NSArray"))]
        /**
          Returns a reference to the array of NSTableColumn instances in the NSTableView. Includes columns that are -isHidden. It is recommended to make a copy of the array if you are going to manipulate the NSTableView by using -addTableColumn:, -removeTableColumn: or -moveColumn:toColumn:.
        */
        #[method_id(@__retain_semantics Other tableColumns)]
        pub unsafe fn tableColumns(&self) -> Id<NSArray<NSTableColumn>>;

        /**
          Simply a cover method to return the number of NSTableColumn instances in the NSTableView. Includes columns that are -isHidden.
        */
        #[method(numberOfColumns)]
        pub unsafe fn numberOfColumns(&self) -> NSInteger;

        /**
          Returns the numberOfRows. It may call to the dataSource to acquire the count. numberOfRows will return 0 if there are no visible columns.
        */
        #[method(numberOfRows)]
        pub unsafe fn numberOfRows(&self) -> NSInteger;

        #[cfg(feature = "AppKit_NSTableColumn")]
        #[method(addTableColumn:)]
        pub unsafe fn addTableColumn(&self, table_column: &NSTableColumn);

        #[cfg(feature = "AppKit_NSTableColumn")]
        #[method(removeTableColumn:)]
        pub unsafe fn removeTableColumn(&self, table_column: &NSTableColumn);

        #[method(moveColumn:toColumn:)]
        pub unsafe fn moveColumn_toColumn(&self, old_index: NSInteger, new_index: NSInteger);

        #[method(columnWithIdentifier:)]
        pub unsafe fn columnWithIdentifier(
            &self,
            identifier: &NSUserInterfaceItemIdentifier,
        ) -> NSInteger;

        #[cfg(feature = "AppKit_NSTableColumn")]
        #[method_id(@__retain_semantics Other tableColumnWithIdentifier:)]
        pub unsafe fn tableColumnWithIdentifier(
            &self,
            identifier: &NSUserInterfaceItemIdentifier,
        ) -> Option<Id<NSTableColumn>>;

        #[method(tile)]
        pub unsafe fn tile(&self);

        #[method(sizeToFit)]
        pub unsafe fn sizeToFit(&self);

        #[method(sizeLastColumnToFit)]
        pub unsafe fn sizeLastColumnToFit(&self);

        #[method(scrollRowToVisible:)]
        pub unsafe fn scrollRowToVisible(&self, row: NSInteger);

        #[method(scrollColumnToVisible:)]
        pub unsafe fn scrollColumnToVisible(&self, column: NSInteger);

        #[method(reloadData)]
        pub unsafe fn reloadData(&self);

        #[method(noteNumberOfRowsChanged)]
        pub unsafe fn noteNumberOfRowsChanged(&self);

        #[cfg(feature = "Foundation_NSIndexSet")]
        #[method(reloadDataForRowIndexes:columnIndexes:)]
        pub unsafe fn reloadDataForRowIndexes_columnIndexes(
            &self,
            row_indexes: &NSIndexSet,
            column_indexes: &NSIndexSet,
        );

        /**
         Cell Based TableView: Returns the column and row that is being edited. editedRow will be -1 if there is no editing session happening. editedColumn will be -1 if there is no editing session, or the currently edited row is a "full width" row.
        View Based TableView: Not applicable. Subviews are responsible for editing.
        */
        #[method(editedColumn)]
        pub unsafe fn editedColumn(&self) -> NSInteger;

        #[method(editedRow)]
        pub unsafe fn editedRow(&self) -> NSInteger;

        #[method(clickedColumn)]
        pub unsafe fn clickedColumn(&self) -> NSInteger;

        #[method(clickedRow)]
        pub unsafe fn clickedRow(&self) -> NSInteger;

        #[method(doubleAction)]
        pub unsafe fn doubleAction(&self) -> Option<Sel>;

        #[method(setDoubleAction:)]
        pub unsafe fn setDoubleAction(&self, double_action: Option<Sel>);

        #[cfg(all(
            feature = "Foundation_NSArray",
            feature = "Foundation_NSSortDescriptor"
        ))]
        /**
          Sorting Support
        The array of sort descriptors is archived.  Sort descriptors will persist along with other column information if an -autosaveName is set. Calling -setSortDescriptors: may have the side effect of calling -tableView:sortDescriptorsDidChange: on the -dataSource
        */
        #[method_id(@__retain_semantics Other sortDescriptors)]
        pub unsafe fn sortDescriptors(&self) -> Id<NSArray<NSSortDescriptor>>;

        #[cfg(all(
            feature = "Foundation_NSArray",
            feature = "Foundation_NSSortDescriptor"
        ))]
        /**
          Sorting Support
        The array of sort descriptors is archived.  Sort descriptors will persist along with other column information if an -autosaveName is set. Calling -setSortDescriptors: may have the side effect of calling -tableView:sortDescriptorsDidChange: on the -dataSource
        */
        #[method(setSortDescriptors:)]
        pub unsafe fn setSortDescriptors(&self, sort_descriptors: &NSArray<NSSortDescriptor>);

        #[cfg(all(feature = "AppKit_NSImage", feature = "AppKit_NSTableColumn"))]
        #[method(setIndicatorImage:inTableColumn:)]
        pub unsafe fn setIndicatorImage_inTableColumn(
            &self,
            image: Option<&NSImage>,
            table_column: &NSTableColumn,
        );

        #[cfg(all(feature = "AppKit_NSImage", feature = "AppKit_NSTableColumn"))]
        #[method_id(@__retain_semantics Other indicatorImageInTableColumn:)]
        pub unsafe fn indicatorImageInTableColumn(
            &self,
            table_column: &NSTableColumn,
        ) -> Option<Id<NSImage>>;

        #[cfg(feature = "AppKit_NSTableColumn")]
        /**
          Support for highlightable column header, for use with row selection.
        */
        #[method_id(@__retain_semantics Other highlightedTableColumn)]
        pub unsafe fn highlightedTableColumn(&self) -> Option<Id<NSTableColumn>>;

        #[cfg(feature = "AppKit_NSTableColumn")]
        /**
          Support for highlightable column header, for use with row selection.
        */
        #[method(setHighlightedTableColumn:)]
        pub unsafe fn setHighlightedTableColumn(
            &self,
            highlighted_table_column: Option<&NSTableColumn>,
        );

        /**
          Get and set verticalMotionCanBeginDrag. If -verticalMotionCanBeginDrag is YES, then click + a vertical drag of the mouse will drag the clicked item(s). If NO, it will do a "drag select". The default value is YES.
        */
        #[method(verticalMotionCanBeginDrag)]
        pub unsafe fn verticalMotionCanBeginDrag(&self) -> bool;

        /**
          Get and set verticalMotionCanBeginDrag. If -verticalMotionCanBeginDrag is YES, then click + a vertical drag of the mouse will drag the clicked item(s). If NO, it will do a "drag select". The default value is YES.
        */
        #[method(setVerticalMotionCanBeginDrag:)]
        pub unsafe fn setVerticalMotionCanBeginDrag(&self, vertical_motion_can_begin_drag: bool);

        #[cfg(feature = "Foundation_NSIndexSet")]
        #[method(canDragRowsWithIndexes:atPoint:)]
        pub unsafe fn canDragRowsWithIndexes_atPoint(
            &self,
            row_indexes: &NSIndexSet,
            mouse_down_point: NSPoint,
        ) -> bool;

        #[cfg(all(
            feature = "AppKit_NSEvent",
            feature = "AppKit_NSImage",
            feature = "AppKit_NSTableColumn",
            feature = "Foundation_NSArray",
            feature = "Foundation_NSIndexSet"
        ))]
        #[method_id(@__retain_semantics Other dragImageForRowsWithIndexes:tableColumns:event:offset:)]
        pub unsafe fn dragImageForRowsWithIndexes_tableColumns_event_offset(
            &self,
            drag_rows: &NSIndexSet,
            table_columns: &NSArray<NSTableColumn>,
            drag_event: &NSEvent,
            drag_image_offset: NSPointPointer,
        ) -> Id<NSImage>;

        #[method(setDraggingSourceOperationMask:forLocal:)]
        pub unsafe fn setDraggingSourceOperationMask_forLocal(
            &self,
            mask: NSDragOperation,
            is_local: bool,
        );

        #[method(setDropRow:dropOperation:)]
        pub unsafe fn setDropRow_dropOperation(
            &self,
            row: NSInteger,
            drop_operation: NSTableViewDropOperation,
        );

        /**
          Get and set allowsMultipleSelection. If -allowsMultipleSelection is YES, multiple items can be selected in various ways (modifier-clicking items, shift-arrow selection extending, etc). The default value is NO.
        */
        #[method(allowsMultipleSelection)]
        pub unsafe fn allowsMultipleSelection(&self) -> bool;

        /**
          Get and set allowsMultipleSelection. If -allowsMultipleSelection is YES, multiple items can be selected in various ways (modifier-clicking items, shift-arrow selection extending, etc). The default value is NO.
        */
        #[method(setAllowsMultipleSelection:)]
        pub unsafe fn setAllowsMultipleSelection(&self, allows_multiple_selection: bool);

        /**
          Get and set allowsEmptySelection. If -allowsEmptySelection is YES, all rows can be deselected by the user. Otherwise, it is enforced that one row must be left selected at any given time. The default value is YES.
        */
        #[method(allowsEmptySelection)]
        pub unsafe fn allowsEmptySelection(&self) -> bool;

        /**
          Get and set allowsEmptySelection. If -allowsEmptySelection is YES, all rows can be deselected by the user. Otherwise, it is enforced that one row must be left selected at any given time. The default value is YES.
        */
        #[method(setAllowsEmptySelection:)]
        pub unsafe fn setAllowsEmptySelection(&self, allows_empty_selection: bool);

        /**
          Get and set allowsColumnSelection. If -allowsColumnSelection is YES, clicking on column headers can select that column (which is reflected in -selectedColumnIndexes). The default value is NO.
        */
        #[method(allowsColumnSelection)]
        pub unsafe fn allowsColumnSelection(&self) -> bool;

        /**
          Get and set allowsColumnSelection. If -allowsColumnSelection is YES, clicking on column headers can select that column (which is reflected in -selectedColumnIndexes). The default value is NO.
        */
        #[method(setAllowsColumnSelection:)]
        pub unsafe fn setAllowsColumnSelection(&self, allows_column_selection: bool);

        #[method(selectAll:)]
        pub unsafe fn selectAll(&self, sender: Option<&Object>);

        #[method(deselectAll:)]
        pub unsafe fn deselectAll(&self, sender: Option<&Object>);

        #[cfg(feature = "Foundation_NSIndexSet")]
        #[method(selectColumnIndexes:byExtendingSelection:)]
        pub unsafe fn selectColumnIndexes_byExtendingSelection(
            &self,
            indexes: &NSIndexSet,
            extend: bool,
        );

        #[cfg(feature = "Foundation_NSIndexSet")]
        #[method(selectRowIndexes:byExtendingSelection:)]
        pub unsafe fn selectRowIndexes_byExtendingSelection(
            &self,
            indexes: &NSIndexSet,
            extend: bool,
        );

        #[cfg(feature = "Foundation_NSIndexSet")]
        #[method_id(@__retain_semantics Other selectedColumnIndexes)]
        pub unsafe fn selectedColumnIndexes(&self) -> Id<NSIndexSet>;

        #[cfg(feature = "Foundation_NSIndexSet")]
        #[method_id(@__retain_semantics Other selectedRowIndexes)]
        pub unsafe fn selectedRowIndexes(&self) -> Id<NSIndexSet>;

        #[method(deselectColumn:)]
        pub unsafe fn deselectColumn(&self, column: NSInteger);

        #[method(deselectRow:)]
        pub unsafe fn deselectRow(&self, row: NSInteger);

        #[method(selectedColumn)]
        pub unsafe fn selectedColumn(&self) -> NSInteger;

        #[method(selectedRow)]
        pub unsafe fn selectedRow(&self) -> NSInteger;

        #[method(isColumnSelected:)]
        pub unsafe fn isColumnSelected(&self, column: NSInteger) -> bool;

        #[method(isRowSelected:)]
        pub unsafe fn isRowSelected(&self, row: NSInteger) -> bool;

        #[method(numberOfSelectedColumns)]
        pub unsafe fn numberOfSelectedColumns(&self) -> NSInteger;

        #[method(numberOfSelectedRows)]
        pub unsafe fn numberOfSelectedRows(&self) -> NSInteger;

        /**
          Allow type selection in this tableView. The default value is YES.
        */
        #[method(allowsTypeSelect)]
        pub unsafe fn allowsTypeSelect(&self) -> bool;

        /**
          Allow type selection in this tableView. The default value is YES.
        */
        #[method(setAllowsTypeSelect:)]
        pub unsafe fn setAllowsTypeSelect(&self, allows_type_select: bool);

        /**
          The table view style. Defaults to NSTableViewStyleAutomatic
        */
        #[method(style)]
        pub unsafe fn style(&self) -> NSTableViewStyle;

        /**
          The table view style. Defaults to NSTableViewStyleAutomatic
        */
        #[method(setStyle:)]
        pub unsafe fn setStyle(&self, style: NSTableViewStyle);

        /**
          The effective style when style is NSTableViewStyleAutomatic. Otherwise, it returns the same value as style.
        */
        #[method(effectiveStyle)]
        pub unsafe fn effectiveStyle(&self) -> NSTableViewStyle;

        /**
          Gets and sets the current selection highlight style. The default value is NSTableViewSelectionHighlightStyleRegular.
        */
        #[method(selectionHighlightStyle)]
        pub unsafe fn selectionHighlightStyle(&self) -> NSTableViewSelectionHighlightStyle;

        /**
          Gets and sets the current selection highlight style. The default value is NSTableViewSelectionHighlightStyleRegular.
        */
        #[method(setSelectionHighlightStyle:)]
        pub unsafe fn setSelectionHighlightStyle(
            &self,
            selection_highlight_style: NSTableViewSelectionHighlightStyle,
        );

        /**
          Gets and sets the dragging destination feedback style. The default value is NSTableViewDraggingDestinationFeedbackStyleRegular for all tables. However, changing the -selectionHighlightStyle to NSTableViewSelectionHighlightStyleSourceList will automatically change the -draggingDestinationFeedbackStyle to NSTableViewDraggingDestinationFeedbackStyleSourceList.
        */
        #[method(draggingDestinationFeedbackStyle)]
        pub unsafe fn draggingDestinationFeedbackStyle(
            &self,
        ) -> NSTableViewDraggingDestinationFeedbackStyle;

        /**
          Gets and sets the dragging destination feedback style. The default value is NSTableViewDraggingDestinationFeedbackStyleRegular for all tables. However, changing the -selectionHighlightStyle to NSTableViewSelectionHighlightStyleSourceList will automatically change the -draggingDestinationFeedbackStyle to NSTableViewDraggingDestinationFeedbackStyleSourceList.
        */
        #[method(setDraggingDestinationFeedbackStyle:)]
        pub unsafe fn setDraggingDestinationFeedbackStyle(
            &self,
            dragging_destination_feedback_style: NSTableViewDraggingDestinationFeedbackStyle,
        );

        #[method(rectOfColumn:)]
        pub unsafe fn rectOfColumn(&self, column: NSInteger) -> NSRect;

        #[method(rectOfRow:)]
        pub unsafe fn rectOfRow(&self, row: NSInteger) -> NSRect;

        #[cfg(feature = "Foundation_NSIndexSet")]
        #[method_id(@__retain_semantics Other columnIndexesInRect:)]
        pub unsafe fn columnIndexesInRect(&self, rect: NSRect) -> Id<NSIndexSet>;

        #[method(rowsInRect:)]
        pub unsafe fn rowsInRect(&self, rect: NSRect) -> NSRange;

        #[method(columnAtPoint:)]
        pub unsafe fn columnAtPoint(&self, point: NSPoint) -> NSInteger;

        #[method(rowAtPoint:)]
        pub unsafe fn rowAtPoint(&self, point: NSPoint) -> NSInteger;

        #[method(frameOfCellAtColumn:row:)]
        pub unsafe fn frameOfCellAtColumn_row(&self, column: NSInteger, row: NSInteger) -> NSRect;

        /**
          On Mac OS 13.0 and higher, changing the autosaveName property from one value to another will automatically persist autosave data for the old value before changing to the new value. Setting autosaveName to nil removes the persistence data for the previously set autosaveName.
        */
        #[method_id(@__retain_semantics Other autosaveName)]
        pub unsafe fn autosaveName(&self) -> Option<Id<NSTableViewAutosaveName>>;

        /**
          On Mac OS 13.0 and higher, changing the autosaveName property from one value to another will automatically persist autosave data for the old value before changing to the new value. Setting autosaveName to nil removes the persistence data for the previously set autosaveName.
        */
        #[method(setAutosaveName:)]
        pub unsafe fn setAutosaveName(&self, autosave_name: Option<&NSTableViewAutosaveName>);

        /**
          On Mac OS 10.4 and higher, the NSTableColumn width and location is saved. On Mac OS 10.5 and higher, the NSTableColumn 'isHidden' state is also saved. The 'autosaveName' must be set for 'autosaveTableColumns' to take effect.
        */
        #[method(autosaveTableColumns)]
        pub unsafe fn autosaveTableColumns(&self) -> bool;

        /**
          On Mac OS 10.4 and higher, the NSTableColumn width and location is saved. On Mac OS 10.5 and higher, the NSTableColumn 'isHidden' state is also saved. The 'autosaveName' must be set for 'autosaveTableColumns' to take effect.
        */
        #[method(setAutosaveTableColumns:)]
        pub unsafe fn setAutosaveTableColumns(&self, autosave_table_columns: bool);

        #[cfg(feature = "AppKit_NSEvent")]
        #[method(editColumn:row:withEvent:select:)]
        pub unsafe fn editColumn_row_withEvent_select(
            &self,
            column: NSInteger,
            row: NSInteger,
            event: Option<&NSEvent>,
            select: bool,
        );

        #[method(drawRow:clipRect:)]
        pub unsafe fn drawRow_clipRect(&self, row: NSInteger, clip_rect: NSRect);

        #[method(highlightSelectionInClipRect:)]
        pub unsafe fn highlightSelectionInClipRect(&self, clip_rect: NSRect);

        #[method(drawGridInClipRect:)]
        pub unsafe fn drawGridInClipRect(&self, clip_rect: NSRect);

        #[method(drawBackgroundInClipRect:)]
        pub unsafe fn drawBackgroundInClipRect(&self, clip_rect: NSRect);

        #[method_id(@__retain_semantics Other viewAtColumn:row:makeIfNecessary:)]
        pub unsafe fn viewAtColumn_row_makeIfNecessary(
            &self,
            column: NSInteger,
            row: NSInteger,
            make_if_necessary: bool,
        ) -> Option<Id<NSView>>;

        #[cfg(feature = "AppKit_NSTableRowView")]
        #[method_id(@__retain_semantics Other rowViewAtRow:makeIfNecessary:)]
        pub unsafe fn rowViewAtRow_makeIfNecessary(
            &self,
            row: NSInteger,
            make_if_necessary: bool,
        ) -> Option<Id<NSTableRowView>>;

        #[method(rowForView:)]
        pub unsafe fn rowForView(&self, view: &NSView) -> NSInteger;

        #[method(columnForView:)]
        pub unsafe fn columnForView(&self, view: &NSView) -> NSInteger;

        #[method_id(@__retain_semantics Other makeViewWithIdentifier:owner:)]
        pub unsafe fn makeViewWithIdentifier_owner(
            &self,
            identifier: &NSUserInterfaceItemIdentifier,
            owner: Option<&Object>,
        ) -> Option<Id<NSView>>;

        #[cfg(feature = "AppKit_NSTableRowView")]
        #[method(enumerateAvailableRowViewsUsingBlock:)]
        pub unsafe fn enumerateAvailableRowViewsUsingBlock(
            &self,
            handler: &Block<(NonNull<NSTableRowView>, NSInteger), ()>,
        );

        /**
          View Based TableView: Group rows can optionally appear floating. Group rows are rows that the delegate responds YES to tableView:isGroupRow:. NSOutlineView will only float expandable group rows that are expanded. The default value is YES. This property is encoded and decoded in the nib.
        */
        #[method(floatsGroupRows)]
        pub unsafe fn floatsGroupRows(&self) -> bool;

        /**
          View Based TableView: Group rows can optionally appear floating. Group rows are rows that the delegate responds YES to tableView:isGroupRow:. NSOutlineView will only float expandable group rows that are expanded. The default value is YES. This property is encoded and decoded in the nib.
        */
        #[method(setFloatsGroupRows:)]
        pub unsafe fn setFloatsGroupRows(&self, floats_group_rows: bool);

        /**
          View Based TableView: rowActionsVisible can be queried to determine if the "row actions" (see: tableView:rowActionsForRow:edge:) are visible or not. Set rowActionsVisible=NO to hide the row actions. Setting rowActionsVisible=YES is currently not supported and will throw an exception. This property is not encoded in the nib.
        */
        #[method(rowActionsVisible)]
        pub unsafe fn rowActionsVisible(&self) -> bool;

        /**
          View Based TableView: rowActionsVisible can be queried to determine if the "row actions" (see: tableView:rowActionsForRow:edge:) are visible or not. Set rowActionsVisible=NO to hide the row actions. Setting rowActionsVisible=YES is currently not supported and will throw an exception. This property is not encoded in the nib.
        */
        #[method(setRowActionsVisible:)]
        pub unsafe fn setRowActionsVisible(&self, row_actions_visible: bool);

        #[method(beginUpdates)]
        pub unsafe fn beginUpdates(&self);

        #[method(endUpdates)]
        pub unsafe fn endUpdates(&self);

        #[cfg(feature = "Foundation_NSIndexSet")]
        #[method(insertRowsAtIndexes:withAnimation:)]
        pub unsafe fn insertRowsAtIndexes_withAnimation(
            &self,
            indexes: &NSIndexSet,
            animation_options: NSTableViewAnimationOptions,
        );

        #[cfg(feature = "Foundation_NSIndexSet")]
        #[method(removeRowsAtIndexes:withAnimation:)]
        pub unsafe fn removeRowsAtIndexes_withAnimation(
            &self,
            indexes: &NSIndexSet,
            animation_options: NSTableViewAnimationOptions,
        );

        #[method(moveRowAtIndex:toIndex:)]
        pub unsafe fn moveRowAtIndex_toIndex(&self, old_index: NSInteger, new_index: NSInteger);

        #[cfg(feature = "Foundation_NSIndexSet")]
        #[method(hideRowsAtIndexes:withAnimation:)]
        pub unsafe fn hideRowsAtIndexes_withAnimation(
            &self,
            indexes: &NSIndexSet,
            row_animation: NSTableViewAnimationOptions,
        );

        #[cfg(feature = "Foundation_NSIndexSet")]
        #[method(unhideRowsAtIndexes:withAnimation:)]
        pub unsafe fn unhideRowsAtIndexes_withAnimation(
            &self,
            indexes: &NSIndexSet,
            row_animation: NSTableViewAnimationOptions,
        );

        #[cfg(feature = "Foundation_NSIndexSet")]
        /**
          Returns the indexes that are currently hidden. Indexes are hidden by calling hideRowsAtIndexes:. Sometimes during drag and drop operations certain indexes will be automatically hidden.
        */
        #[method_id(@__retain_semantics Other hiddenRowIndexes)]
        pub unsafe fn hiddenRowIndexes(&self) -> Id<NSIndexSet>;

        #[cfg(feature = "AppKit_NSNib")]
        #[method(registerNib:forIdentifier:)]
        pub unsafe fn registerNib_forIdentifier(
            &self,
            nib: Option<&NSNib>,
            identifier: &NSUserInterfaceItemIdentifier,
        );

        #[cfg(all(feature = "AppKit_NSNib", feature = "Foundation_NSDictionary"))]
        /**
          View Based TableView: Returns a dictionary of all registered nibs. The keys are the identifier, and the value is the NSNib that is registered.
        */
        #[method_id(@__retain_semantics Other registeredNibsByIdentifier)]
        pub unsafe fn registeredNibsByIdentifier(
            &self,
        ) -> Option<Id<NSDictionary<NSUserInterfaceItemIdentifier, NSNib>>>;

        #[cfg(feature = "AppKit_NSTableRowView")]
        #[method(didAddRowView:forRow:)]
        pub unsafe fn didAddRowView_forRow(&self, row_view: &NSTableRowView, row: NSInteger);

        #[cfg(feature = "AppKit_NSTableRowView")]
        #[method(didRemoveRowView:forRow:)]
        pub unsafe fn didRemoveRowView_forRow(&self, row_view: &NSTableRowView, row: NSInteger);

        /**
          View Based TableView: The table view keeps all views added to the table around while usesStaticContents=YES. Views can be removed by calling removeRowsAtIndexes:withAnimation:. The datasource does not need to implement numberOfRowsInTableView: when usesStaticContents=YES. Static views are encoded and decoded with the table view. Views can also dynamically be inserted into the table view by using insertRowIndexes:withAnimation:, however, this requires an implementation of tableView:viewForTableColumn:row: to provide the newly inserted view, which is then kept around statically.
        */
        #[method(usesStaticContents)]
        pub unsafe fn usesStaticContents(&self) -> bool;

        /**
          View Based TableView: The table view keeps all views added to the table around while usesStaticContents=YES. Views can be removed by calling removeRowsAtIndexes:withAnimation:. The datasource does not need to implement numberOfRowsInTableView: when usesStaticContents=YES. Static views are encoded and decoded with the table view. Views can also dynamically be inserted into the table view by using insertRowIndexes:withAnimation:, however, this requires an implementation of tableView:viewForTableColumn:row: to provide the newly inserted view, which is then kept around statically.
        */
        #[method(setUsesStaticContents:)]
        pub unsafe fn setUsesStaticContents(&self, uses_static_contents: bool);

        /**
          Get and set the user interface layout direction. When set to NSUserInterfaceLayoutDirectionRightToLeft, the Table View will flip the visual order of the table columns, while the logical order remains as it was. For applications linked against 10.11 or earlier, NSTableView will ignore this property and always render in left-to-right.
        */
        #[method(userInterfaceLayoutDirection)]
        pub unsafe fn userInterfaceLayoutDirection(&self) -> NSUserInterfaceLayoutDirection;

        /**
          Get and set the user interface layout direction. When set to NSUserInterfaceLayoutDirectionRightToLeft, the Table View will flip the visual order of the table columns, while the logical order remains as it was. For applications linked against 10.11 or earlier, NSTableView will ignore this property and always render in left-to-right.
        */
        #[method(setUserInterfaceLayoutDirection:)]
        pub unsafe fn setUserInterfaceLayoutDirection(
            &self,
            user_interface_layout_direction: NSUserInterfaceLayoutDirection,
        );

        /**
          View Based TableViews: When set to YES, the table will utilize autolayout for the row heights. Set the rowHeight property to provide an estimated row height for views that are not yet loaded. This is not required, but it is recommended in order to provide a proper estimate for the scroll bars. The delegate method -tableView:heightOfRow: can still be used to provide a more specific estimated row height. Note that a rowView's height is set to the rowHeight plus intercellSpacing.height, so an estimated rowHeight should have the intercellSpacing.height subtracted from it. The default value is NO. This value is encoded.
        */
        #[method(usesAutomaticRowHeights)]
        pub unsafe fn usesAutomaticRowHeights(&self) -> bool;

        /**
          View Based TableViews: When set to YES, the table will utilize autolayout for the row heights. Set the rowHeight property to provide an estimated row height for views that are not yet loaded. This is not required, but it is recommended in order to provide a proper estimate for the scroll bars. The delegate method -tableView:heightOfRow: can still be used to provide a more specific estimated row height. Note that a rowView's height is set to the rowHeight plus intercellSpacing.height, so an estimated rowHeight should have the intercellSpacing.height subtracted from it. The default value is NO. This value is encoded.
        */
        #[method(setUsesAutomaticRowHeights:)]
        pub unsafe fn setUsesAutomaticRowHeights(&self, uses_automatic_row_heights: bool);
    }
);

extern_protocol!(
    pub unsafe trait NSTableViewDelegate: NSControlTextEditingDelegate {
        #[cfg(all(
            feature = "AppKit_NSTableColumn",
            feature = "AppKit_NSTableView",
            feature = "AppKit_NSView"
        ))]
        #[optional]
        #[method_id(@__retain_semantics Other tableView:viewForTableColumn:row:)]
        unsafe fn tableView_viewForTableColumn_row(
            &self,
            table_view: &NSTableView,
            table_column: Option<&NSTableColumn>,
            row: NSInteger,
        ) -> Option<Id<NSView>>;

        #[cfg(all(feature = "AppKit_NSTableRowView", feature = "AppKit_NSTableView"))]
        #[optional]
        #[method_id(@__retain_semantics Other tableView:rowViewForRow:)]
        unsafe fn tableView_rowViewForRow(
            &self,
            table_view: &NSTableView,
            row: NSInteger,
        ) -> Option<Id<NSTableRowView>>;

        #[cfg(all(feature = "AppKit_NSTableRowView", feature = "AppKit_NSTableView"))]
        #[optional]
        #[method(tableView:didAddRowView:forRow:)]
        unsafe fn tableView_didAddRowView_forRow(
            &self,
            table_view: &NSTableView,
            row_view: &NSTableRowView,
            row: NSInteger,
        );

        #[cfg(all(feature = "AppKit_NSTableRowView", feature = "AppKit_NSTableView"))]
        #[optional]
        #[method(tableView:didRemoveRowView:forRow:)]
        unsafe fn tableView_didRemoveRowView_forRow(
            &self,
            table_view: &NSTableView,
            row_view: &NSTableRowView,
            row: NSInteger,
        );

        #[cfg(all(feature = "AppKit_NSTableColumn", feature = "AppKit_NSTableView"))]
        #[optional]
        #[method(tableView:willDisplayCell:forTableColumn:row:)]
        unsafe fn tableView_willDisplayCell_forTableColumn_row(
            &self,
            table_view: &NSTableView,
            cell: &Object,
            table_column: Option<&NSTableColumn>,
            row: NSInteger,
        );

        #[cfg(all(feature = "AppKit_NSTableColumn", feature = "AppKit_NSTableView"))]
        #[optional]
        #[method(tableView:shouldEditTableColumn:row:)]
        unsafe fn tableView_shouldEditTableColumn_row(
            &self,
            table_view: &NSTableView,
            table_column: Option<&NSTableColumn>,
            row: NSInteger,
        ) -> bool;

        #[cfg(all(
            feature = "AppKit_NSCell",
            feature = "AppKit_NSTableColumn",
            feature = "AppKit_NSTableView",
            feature = "Foundation_NSString"
        ))]
        #[optional]
        #[method_id(@__retain_semantics Other tableView:toolTipForCell:rect:tableColumn:row:mouseLocation:)]
        unsafe fn tableView_toolTipForCell_rect_tableColumn_row_mouseLocation(
            &self,
            table_view: &NSTableView,
            cell: &NSCell,
            rect: NSRectPointer,
            table_column: Option<&NSTableColumn>,
            row: NSInteger,
            mouse_location: NSPoint,
        ) -> Id<NSString>;

        #[cfg(all(feature = "AppKit_NSTableColumn", feature = "AppKit_NSTableView"))]
        #[optional]
        #[method(tableView:shouldShowCellExpansionForTableColumn:row:)]
        unsafe fn tableView_shouldShowCellExpansionForTableColumn_row(
            &self,
            table_view: &NSTableView,
            table_column: Option<&NSTableColumn>,
            row: NSInteger,
        ) -> bool;

        #[cfg(all(
            feature = "AppKit_NSCell",
            feature = "AppKit_NSTableColumn",
            feature = "AppKit_NSTableView"
        ))]
        #[optional]
        #[method(tableView:shouldTrackCell:forTableColumn:row:)]
        unsafe fn tableView_shouldTrackCell_forTableColumn_row(
            &self,
            table_view: &NSTableView,
            cell: &NSCell,
            table_column: Option<&NSTableColumn>,
            row: NSInteger,
        ) -> bool;

        #[cfg(all(
            feature = "AppKit_NSCell",
            feature = "AppKit_NSTableColumn",
            feature = "AppKit_NSTableView"
        ))]
        #[optional]
        #[method_id(@__retain_semantics Other tableView:dataCellForTableColumn:row:)]
        unsafe fn tableView_dataCellForTableColumn_row(
            &self,
            table_view: &NSTableView,
            table_column: Option<&NSTableColumn>,
            row: NSInteger,
        ) -> Option<Id<NSCell>>;

        #[cfg(feature = "AppKit_NSTableView")]
        #[optional]
        #[method(selectionShouldChangeInTableView:)]
        unsafe fn selectionShouldChangeInTableView(&self, table_view: &NSTableView) -> bool;

        #[cfg(feature = "AppKit_NSTableView")]
        #[optional]
        #[method(tableView:shouldSelectRow:)]
        unsafe fn tableView_shouldSelectRow(
            &self,
            table_view: &NSTableView,
            row: NSInteger,
        ) -> bool;

        #[cfg(all(feature = "AppKit_NSTableView", feature = "Foundation_NSIndexSet"))]
        #[optional]
        #[method_id(@__retain_semantics Other tableView:selectionIndexesForProposedSelection:)]
        unsafe fn tableView_selectionIndexesForProposedSelection(
            &self,
            table_view: &NSTableView,
            proposed_selection_indexes: &NSIndexSet,
        ) -> Id<NSIndexSet>;

        #[cfg(all(feature = "AppKit_NSTableColumn", feature = "AppKit_NSTableView"))]
        #[optional]
        #[method(tableView:shouldSelectTableColumn:)]
        unsafe fn tableView_shouldSelectTableColumn(
            &self,
            table_view: &NSTableView,
            table_column: Option<&NSTableColumn>,
        ) -> bool;

        #[cfg(all(feature = "AppKit_NSTableColumn", feature = "AppKit_NSTableView"))]
        #[optional]
        #[method(tableView:mouseDownInHeaderOfTableColumn:)]
        unsafe fn tableView_mouseDownInHeaderOfTableColumn(
            &self,
            table_view: &NSTableView,
            table_column: &NSTableColumn,
        );

        #[cfg(all(feature = "AppKit_NSTableColumn", feature = "AppKit_NSTableView"))]
        #[optional]
        #[method(tableView:didClickTableColumn:)]
        unsafe fn tableView_didClickTableColumn(
            &self,
            table_view: &NSTableView,
            table_column: &NSTableColumn,
        );

        #[cfg(all(feature = "AppKit_NSTableColumn", feature = "AppKit_NSTableView"))]
        #[optional]
        #[method(tableView:didDragTableColumn:)]
        unsafe fn tableView_didDragTableColumn(
            &self,
            table_view: &NSTableView,
            table_column: &NSTableColumn,
        );

        #[cfg(feature = "AppKit_NSTableView")]
        #[optional]
        #[method(tableView:heightOfRow:)]
        unsafe fn tableView_heightOfRow(&self, table_view: &NSTableView, row: NSInteger)
            -> CGFloat;

        #[cfg(all(
            feature = "AppKit_NSTableColumn",
            feature = "AppKit_NSTableView",
            feature = "Foundation_NSString"
        ))]
        #[optional]
        #[method_id(@__retain_semantics Other tableView:typeSelectStringForTableColumn:row:)]
        unsafe fn tableView_typeSelectStringForTableColumn_row(
            &self,
            table_view: &NSTableView,
            table_column: Option<&NSTableColumn>,
            row: NSInteger,
        ) -> Option<Id<NSString>>;

        #[cfg(all(feature = "AppKit_NSTableView", feature = "Foundation_NSString"))]
        #[optional]
        #[method(tableView:nextTypeSelectMatchFromRow:toRow:forString:)]
        unsafe fn tableView_nextTypeSelectMatchFromRow_toRow_forString(
            &self,
            table_view: &NSTableView,
            start_row: NSInteger,
            end_row: NSInteger,
            search_string: &NSString,
        ) -> NSInteger;

        #[cfg(all(
            feature = "AppKit_NSEvent",
            feature = "AppKit_NSTableView",
            feature = "Foundation_NSString"
        ))]
        #[optional]
        #[method(tableView:shouldTypeSelectForEvent:withCurrentSearchString:)]
        unsafe fn tableView_shouldTypeSelectForEvent_withCurrentSearchString(
            &self,
            table_view: &NSTableView,
            event: &NSEvent,
            search_string: Option<&NSString>,
        ) -> bool;

        #[cfg(feature = "AppKit_NSTableView")]
        #[optional]
        #[method(tableView:isGroupRow:)]
        unsafe fn tableView_isGroupRow(&self, table_view: &NSTableView, row: NSInteger) -> bool;

        #[cfg(feature = "AppKit_NSTableView")]
        #[optional]
        #[method(tableView:sizeToFitWidthOfColumn:)]
        unsafe fn tableView_sizeToFitWidthOfColumn(
            &self,
            table_view: &NSTableView,
            column: NSInteger,
        ) -> CGFloat;

        #[cfg(feature = "AppKit_NSTableView")]
        #[optional]
        #[method(tableView:shouldReorderColumn:toColumn:)]
        unsafe fn tableView_shouldReorderColumn_toColumn(
            &self,
            table_view: &NSTableView,
            column_index: NSInteger,
            new_column_index: NSInteger,
        ) -> bool;

        #[cfg(all(
            feature = "AppKit_NSTableView",
            feature = "AppKit_NSTableViewRowAction",
            feature = "Foundation_NSArray"
        ))]
        #[optional]
        #[method_id(@__retain_semantics Other tableView:rowActionsForRow:edge:)]
        unsafe fn tableView_rowActionsForRow_edge(
            &self,
            table_view: &NSTableView,
            row: NSInteger,
            edge: NSTableRowActionEdge,
        ) -> Id<NSArray<NSTableViewRowAction>>;

        #[cfg(feature = "Foundation_NSNotification")]
        #[optional]
        #[method(tableViewSelectionDidChange:)]
        unsafe fn tableViewSelectionDidChange(&self, notification: &NSNotification);

        #[cfg(feature = "Foundation_NSNotification")]
        #[optional]
        #[method(tableViewColumnDidMove:)]
        unsafe fn tableViewColumnDidMove(&self, notification: &NSNotification);

        #[cfg(feature = "Foundation_NSNotification")]
        #[optional]
        #[method(tableViewColumnDidResize:)]
        unsafe fn tableViewColumnDidResize(&self, notification: &NSNotification);

        #[cfg(feature = "Foundation_NSNotification")]
        #[optional]
        #[method(tableViewSelectionIsChanging:)]
        unsafe fn tableViewSelectionIsChanging(&self, notification: &NSNotification);
    }

    unsafe impl ProtocolType for dyn NSTableViewDelegate {}
);

extern_static!(NSTableViewSelectionDidChangeNotification: &'static NSNotificationName);

extern_static!(NSTableViewColumnDidMoveNotification: &'static NSNotificationName);

extern_static!(NSTableViewColumnDidResizeNotification: &'static NSNotificationName);

extern_static!(NSTableViewSelectionIsChangingNotification: &'static NSNotificationName);

extern_static!(NSTableViewRowViewKey: &'static NSUserInterfaceItemIdentifier);

extern_protocol!(
    pub unsafe trait NSTableViewDataSource: NSObjectProtocol {
        #[cfg(feature = "AppKit_NSTableView")]
        #[optional]
        #[method(numberOfRowsInTableView:)]
        unsafe fn numberOfRowsInTableView(&self, table_view: &NSTableView) -> NSInteger;

        #[cfg(all(feature = "AppKit_NSTableColumn", feature = "AppKit_NSTableView"))]
        #[optional]
        #[method_id(@__retain_semantics Other tableView:objectValueForTableColumn:row:)]
        unsafe fn tableView_objectValueForTableColumn_row(
            &self,
            table_view: &NSTableView,
            table_column: Option<&NSTableColumn>,
            row: NSInteger,
        ) -> Option<Id<Object>>;

        #[cfg(all(feature = "AppKit_NSTableColumn", feature = "AppKit_NSTableView"))]
        #[optional]
        #[method(tableView:setObjectValue:forTableColumn:row:)]
        unsafe fn tableView_setObjectValue_forTableColumn_row(
            &self,
            table_view: &NSTableView,
            object: Option<&Object>,
            table_column: Option<&NSTableColumn>,
            row: NSInteger,
        );

        #[cfg(all(
            feature = "AppKit_NSTableView",
            feature = "Foundation_NSArray",
            feature = "Foundation_NSSortDescriptor"
        ))]
        #[optional]
        #[method(tableView:sortDescriptorsDidChange:)]
        unsafe fn tableView_sortDescriptorsDidChange(
            &self,
            table_view: &NSTableView,
            old_descriptors: &NSArray<NSSortDescriptor>,
        );

        #[cfg(feature = "AppKit_NSTableView")]
        #[optional]
        #[method_id(@__retain_semantics Other tableView:pasteboardWriterForRow:)]
        unsafe fn tableView_pasteboardWriterForRow(
            &self,
            table_view: &NSTableView,
            row: NSInteger,
        ) -> Option<Id<ProtocolObject<dyn NSPasteboardWriting>>>;

        #[cfg(all(
            feature = "AppKit_NSDraggingSession",
            feature = "AppKit_NSTableView",
            feature = "Foundation_NSIndexSet"
        ))]
        #[optional]
        #[method(tableView:draggingSession:willBeginAtPoint:forRowIndexes:)]
        unsafe fn tableView_draggingSession_willBeginAtPoint_forRowIndexes(
            &self,
            table_view: &NSTableView,
            session: &NSDraggingSession,
            screen_point: NSPoint,
            row_indexes: &NSIndexSet,
        );

        #[cfg(all(feature = "AppKit_NSDraggingSession", feature = "AppKit_NSTableView"))]
        #[optional]
        #[method(tableView:draggingSession:endedAtPoint:operation:)]
        unsafe fn tableView_draggingSession_endedAtPoint_operation(
            &self,
            table_view: &NSTableView,
            session: &NSDraggingSession,
            screen_point: NSPoint,
            operation: NSDragOperation,
        );

        #[cfg(feature = "AppKit_NSTableView")]
        #[optional]
        #[method(tableView:updateDraggingItemsForDrag:)]
        unsafe fn tableView_updateDraggingItemsForDrag(
            &self,
            table_view: &NSTableView,
            dragging_info: &ProtocolObject<dyn NSDraggingInfo>,
        );

        #[cfg(all(
            feature = "AppKit_NSPasteboard",
            feature = "AppKit_NSTableView",
            feature = "Foundation_NSIndexSet"
        ))]
        #[deprecated = "Use -tableView:pasteboardWriterForRow: instead"]
        #[optional]
        #[method(tableView:writeRowsWithIndexes:toPasteboard:)]
        unsafe fn tableView_writeRowsWithIndexes_toPasteboard(
            &self,
            table_view: &NSTableView,
            row_indexes: &NSIndexSet,
            pboard: &NSPasteboard,
        ) -> bool;

        #[cfg(feature = "AppKit_NSTableView")]
        #[optional]
        #[method(tableView:validateDrop:proposedRow:proposedDropOperation:)]
        unsafe fn tableView_validateDrop_proposedRow_proposedDropOperation(
            &self,
            table_view: &NSTableView,
            info: &ProtocolObject<dyn NSDraggingInfo>,
            row: NSInteger,
            drop_operation: NSTableViewDropOperation,
        ) -> NSDragOperation;

        #[cfg(feature = "AppKit_NSTableView")]
        #[optional]
        #[method(tableView:acceptDrop:row:dropOperation:)]
        unsafe fn tableView_acceptDrop_row_dropOperation(
            &self,
            table_view: &NSTableView,
            info: &ProtocolObject<dyn NSDraggingInfo>,
            row: NSInteger,
            drop_operation: NSTableViewDropOperation,
        ) -> bool;

        #[cfg(all(
            feature = "AppKit_NSTableView",
            feature = "Foundation_NSArray",
            feature = "Foundation_NSIndexSet",
            feature = "Foundation_NSString",
            feature = "Foundation_NSURL"
        ))]
        #[deprecated = "Use NSFilePromiseReceiver objects instead"]
        #[optional]
        #[method_id(@__retain_semantics Other tableView:namesOfPromisedFilesDroppedAtDestination:forDraggedRowsWithIndexes:)]
        unsafe fn tableView_namesOfPromisedFilesDroppedAtDestination_forDraggedRowsWithIndexes(
            &self,
            table_view: &NSTableView,
            drop_destination: &NSURL,
            index_set: &NSIndexSet,
        ) -> Id<NSArray<NSString>>;
    }

    unsafe impl ProtocolType for dyn NSTableViewDataSource {}
);

extern_methods!(
    /**
      Deprecated methods
    */
    /// NSDeprecated
    #[cfg(feature = "AppKit_NSTableView")]
    unsafe impl NSTableView {
        #[deprecated]
        #[method(setDrawsGrid:)]
        pub unsafe fn setDrawsGrid(&self, flag: bool);

        #[deprecated]
        #[method(drawsGrid)]
        pub unsafe fn drawsGrid(&self) -> bool;

        #[deprecated]
        #[method(selectColumn:byExtendingSelection:)]
        pub unsafe fn selectColumn_byExtendingSelection(&self, column: NSInteger, extend: bool);

        #[deprecated]
        #[method(selectRow:byExtendingSelection:)]
        pub unsafe fn selectRow_byExtendingSelection(&self, row: NSInteger, extend: bool);

        #[cfg(feature = "Foundation_NSEnumerator")]
        #[deprecated]
        #[method_id(@__retain_semantics Other selectedColumnEnumerator)]
        pub unsafe fn selectedColumnEnumerator(&self) -> Id<NSEnumerator>;

        #[cfg(feature = "Foundation_NSEnumerator")]
        #[deprecated]
        #[method_id(@__retain_semantics Other selectedRowEnumerator)]
        pub unsafe fn selectedRowEnumerator(&self) -> Id<NSEnumerator>;

        #[cfg(all(
            feature = "AppKit_NSEvent",
            feature = "AppKit_NSImage",
            feature = "Foundation_NSArray"
        ))]
        #[deprecated]
        #[method_id(@__retain_semantics Other dragImageForRows:event:dragImageOffset:)]
        pub unsafe fn dragImageForRows_event_dragImageOffset(
            &self,
            drag_rows: &NSArray,
            drag_event: &NSEvent,
            drag_image_offset: NSPointPointer,
        ) -> Option<Id<NSImage>>;

        #[deprecated]
        #[method(setAutoresizesAllColumnsToFit:)]
        pub unsafe fn setAutoresizesAllColumnsToFit(&self, flag: bool);

        #[deprecated]
        #[method(autoresizesAllColumnsToFit)]
        pub unsafe fn autoresizesAllColumnsToFit(&self) -> bool;

        #[deprecated]
        #[method(columnsInRect:)]
        pub unsafe fn columnsInRect(&self, rect: NSRect) -> NSRange;

        #[cfg(feature = "AppKit_NSCell")]
        #[deprecated = "Use View Based TableView and -viewAtColumn:row:"]
        #[method_id(@__retain_semantics Other preparedCellAtColumn:row:)]
        pub unsafe fn preparedCellAtColumn_row(
            &self,
            column: NSInteger,
            row: NSInteger,
        ) -> Option<Id<NSCell>>;

        #[cfg(feature = "AppKit_NSText")]
        #[deprecated = "Use a View Based TableView with an NSTextField"]
        #[method(textShouldBeginEditing:)]
        pub unsafe fn textShouldBeginEditing(&self, text_object: &NSText) -> bool;

        #[cfg(feature = "AppKit_NSText")]
        #[deprecated = "Use a View Based TableView with an NSTextField"]
        #[method(textShouldEndEditing:)]
        pub unsafe fn textShouldEndEditing(&self, text_object: &NSText) -> bool;

        #[cfg(feature = "Foundation_NSNotification")]
        #[deprecated = "Use a View Based TableView with an NSTextField"]
        #[method(textDidBeginEditing:)]
        pub unsafe fn textDidBeginEditing(&self, notification: &NSNotification);

        #[cfg(feature = "Foundation_NSNotification")]
        #[deprecated = "Use a View Based TableView with an NSTextField"]
        #[method(textDidEndEditing:)]
        pub unsafe fn textDidEndEditing(&self, notification: &NSNotification);

        #[cfg(feature = "Foundation_NSNotification")]
        #[deprecated = "Use a View Based TableView with an NSTextField"]
        #[method(textDidChange:)]
        pub unsafe fn textDidChange(&self, notification: &NSNotification);

        #[cfg(feature = "AppKit_NSCell")]
        #[deprecated = "Use a View Based TableView; observe the window’s firstResponder for focus change notifications"]
        #[method(shouldFocusCell:atColumn:row:)]
        pub unsafe fn shouldFocusCell_atColumn_row(
            &self,
            cell: &NSCell,
            column: NSInteger,
            row: NSInteger,
        ) -> bool;

        #[deprecated = "Use a View Based TableView and observe the window.firstResponder"]
        #[method(focusedColumn)]
        pub unsafe fn focusedColumn(&self) -> NSInteger;

        #[deprecated = "Use a View Based TableView; make a particular view the first responder with [window makeFirstResponder:view] to focus it."]
        #[method(setFocusedColumn:)]
        pub unsafe fn setFocusedColumn(&self, focused_column: NSInteger);

        #[deprecated = "Use a View Based TableView; directly interact with a particular view as required and call -performClick: on it, if necessary"]
        #[method(performClickOnCellAtColumn:row:)]
        pub unsafe fn performClickOnCellAtColumn_row(&self, column: NSInteger, row: NSInteger);
    }
);
