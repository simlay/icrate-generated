//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "AppKit_NSMenuToolbarItem")]
    pub struct NSMenuToolbarItem;

    #[cfg(feature = "AppKit_NSMenuToolbarItem")]
    unsafe impl ClassType for NSMenuToolbarItem {
        #[inherits(NSObject)]
        type Super = NSToolbarItem;
    }
);

#[cfg(feature = "AppKit_NSMenuToolbarItem")]
unsafe impl NSObjectProtocol for NSMenuToolbarItem {}

extern_methods!(
    #[cfg(feature = "AppKit_NSMenuToolbarItem")]
    unsafe impl NSMenuToolbarItem {
        #[cfg(feature = "AppKit_NSMenu")]
        /**
         The menu presented to the user from the item.
        If the item has an action, an arrow will be shown to the user next to the button to access the menu.
        This will also be shown as the menuFormRepresentation unless otherwise set.
        */
        #[method_id(@__retain_semantics Other menu)]
        pub unsafe fn menu(&self) -> Id<NSMenu>;

        #[cfg(feature = "AppKit_NSMenu")]
        /**
         The menu presented to the user from the item.
        If the item has an action, an arrow will be shown to the user next to the button to access the menu.
        This will also be shown as the menuFormRepresentation unless otherwise set.
        */
        #[method(setMenu:)]
        pub unsafe fn setMenu(&self, menu: &NSMenu);

        /**
         When YES, an indicator will be visible to the user as part of the control indicating that additional functionality is available.
        Defaults to YES.
        */
        #[method(showsIndicator)]
        pub unsafe fn showsIndicator(&self) -> bool;

        /**
         When YES, an indicator will be visible to the user as part of the control indicating that additional functionality is available.
        Defaults to YES.
        */
        #[method(setShowsIndicator:)]
        pub unsafe fn setShowsIndicator(&self, shows_indicator: bool);
    }
);

extern_methods!(
    /// Methods declared on superclass `NSToolbarItem`
    #[cfg(feature = "AppKit_NSMenuToolbarItem")]
    unsafe impl NSMenuToolbarItem {
        #[method_id(@__retain_semantics Init initWithItemIdentifier:)]
        pub unsafe fn initWithItemIdentifier(
            this: Option<Allocated<Self>>,
            item_identifier: &NSToolbarItemIdentifier,
        ) -> Id<Self>;
    }
);
