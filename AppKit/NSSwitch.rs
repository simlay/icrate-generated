//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "AppKit_NSSwitch")]
    pub struct NSSwitch;

    #[cfg(feature = "AppKit_NSSwitch")]
    unsafe impl ClassType for NSSwitch {
        #[inherits(NSView, NSResponder, NSObject)]
        type Super = NSControl;
    }
);

#[cfg(feature = "AppKit_NSSwitch")]
unsafe impl NSAccessibility for NSSwitch {}

#[cfg(feature = "AppKit_NSSwitch")]
unsafe impl NSAccessibilityButton for NSSwitch {}

#[cfg(feature = "AppKit_NSSwitch")]
unsafe impl NSAccessibilityElementProtocol for NSSwitch {}

#[cfg(feature = "AppKit_NSSwitch")]
unsafe impl NSAccessibilitySwitch for NSSwitch {}

#[cfg(feature = "AppKit_NSSwitch")]
unsafe impl NSAnimatablePropertyContainer for NSSwitch {}

#[cfg(feature = "AppKit_NSSwitch")]
unsafe impl NSAppearanceCustomization for NSSwitch {}

#[cfg(feature = "AppKit_NSSwitch")]
unsafe impl NSCoding for NSSwitch {}

#[cfg(feature = "AppKit_NSSwitch")]
unsafe impl NSDraggingDestination for NSSwitch {}

#[cfg(feature = "AppKit_NSSwitch")]
unsafe impl NSObjectProtocol for NSSwitch {}

#[cfg(feature = "AppKit_NSSwitch")]
unsafe impl NSUserInterfaceItemIdentification for NSSwitch {}

extern_methods!(
    #[cfg(feature = "AppKit_NSSwitch")]
    unsafe impl NSSwitch {
        /**
          The current position of the switch. The values `NSControlStateValueOff` and `NSControlStateValueOn` indicate that the switch is in either the off or on position respectively. If the state property is set to any other value, it is interpreted as on.

        If set through the animator proxy, the switch animates to the new value.
        */
        #[method(state)]
        pub unsafe fn state(&self) -> NSControlStateValue;

        /**
          The current position of the switch. The values `NSControlStateValueOff` and `NSControlStateValueOn` indicate that the switch is in either the off or on position respectively. If the state property is set to any other value, it is interpreted as on.

        If set through the animator proxy, the switch animates to the new value.
        */
        #[method(setState:)]
        pub unsafe fn setState(&self, state: NSControlStateValue);
    }
);

extern_methods!(
    /// Methods declared on superclass `NSControl`
    #[cfg(feature = "AppKit_NSSwitch")]
    unsafe impl NSSwitch {
        #[method_id(@__retain_semantics Init initWithFrame:)]
        pub unsafe fn initWithFrame(this: Option<Allocated<Self>>, frame_rect: NSRect) -> Id<Self>;
    }
);
