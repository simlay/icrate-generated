//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

pub type NSDataAssetName = NSString;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "AppKit_NSDataAsset")]
    /**
      An NSDataAsset instance provides access to a data entry in an asset catalog such as Images.xcassets. Data entries and image entries in asset catalogs do not share the same namespace. For example, if an asset catalog contains an image entry named @"foo" but no data entry named @"foo", [[NSDataAsset alloc] initWithName:@"foo"] will return nil.
    */
    pub struct NSDataAsset;

    #[cfg(feature = "AppKit_NSDataAsset")]
    unsafe impl ClassType for NSDataAsset {
        type Super = NSObject;
    }
);

#[cfg(feature = "AppKit_NSDataAsset")]
/**
  An NSDataAsset instance provides access to a data entry in an asset catalog such as Images.xcassets. Data entries and image entries in asset catalogs do not share the same namespace. For example, if an asset catalog contains an image entry named @"foo" but no data entry named @"foo", [[NSDataAsset alloc] initWithName:@"foo"] will return nil.
*/
unsafe impl NSObjectProtocol for NSDataAsset {}

extern_methods!(
    /**
      An NSDataAsset instance provides access to a data entry in an asset catalog such as Images.xcassets. Data entries and image entries in asset catalogs do not share the same namespace. For example, if an asset catalog contains an image entry named @"foo" but no data entry named @"foo", [[NSDataAsset alloc] initWithName:@"foo"] will return nil.
    */
    #[cfg(feature = "AppKit_NSDataAsset")]
    unsafe impl NSDataAsset {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

        #[method_id(@__retain_semantics Init initWithName:)]
        pub unsafe fn initWithName(
            this: Option<Allocated<Self>>,
            name: &NSDataAssetName,
        ) -> Option<Id<Self>>;

        #[cfg(feature = "Foundation_NSBundle")]
        #[method_id(@__retain_semantics Init initWithName:bundle:)]
        pub unsafe fn initWithName_bundle(
            this: Option<Allocated<Self>>,
            name: &NSDataAssetName,
            bundle: &NSBundle,
        ) -> Option<Id<Self>>;

        /**
          The name used to reference the data asset
        */
        #[method_id(@__retain_semantics Other name)]
        pub unsafe fn name(&self) -> Id<NSDataAssetName>;

        #[cfg(feature = "Foundation_NSData")]
        /**
          The data for this asset, as stored in the asset catalog
        */
        #[method_id(@__retain_semantics Other data)]
        pub unsafe fn data(&self) -> Id<NSData>;

        #[cfg(feature = "Foundation_NSString")]
        /**
          The Uniform Type Identifier for this data object.
        */
        #[method_id(@__retain_semantics Other typeIdentifier)]
        pub unsafe fn typeIdentifier(&self) -> Id<NSString>;
    }
);
