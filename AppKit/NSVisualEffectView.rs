//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

ns_enum!(
    #[underlying(NSInteger)]
    /**
      The main material that this view displays.  Materials are dynamic, and their exact look depends on the view's effectiveAppearance, blendingMode, state, emphasized, and possibly other factors.
    */
    pub enum NSVisualEffectMaterial {
        NSVisualEffectMaterialTitlebar = 3,
        NSVisualEffectMaterialSelection = 4,
        NSVisualEffectMaterialMenu = 5,
        NSVisualEffectMaterialPopover = 6,
        NSVisualEffectMaterialSidebar = 7,
        NSVisualEffectMaterialHeaderView = 10,
        NSVisualEffectMaterialSheet = 11,
        NSVisualEffectMaterialWindowBackground = 12,
        NSVisualEffectMaterialHUDWindow = 13,
        NSVisualEffectMaterialFullScreenUI = 15,
        NSVisualEffectMaterialToolTip = 17,
        NSVisualEffectMaterialContentBackground = 18,
        NSVisualEffectMaterialUnderWindowBackground = 21,
        NSVisualEffectMaterialUnderPageBackground = 22,
        #[deprecated = "Use a specific semantic material instead."]
        NSVisualEffectMaterialAppearanceBased = 0,
        #[deprecated = "Use a semantic material instead.  To force the appearance of a view hierarchy, set the `appearance` property to an appropriate NSAppearance value."]
        NSVisualEffectMaterialLight = 1,
        #[deprecated = "Use a semantic material instead.  To force the appearance of a view hierarchy, set the `appearance` property to an appropriate NSAppearance value."]
        NSVisualEffectMaterialDark = 2,
        #[deprecated = "Use a semantic material instead.  To force the appearance of a view hierarchy, set the `appearance` property to an appropriate NSAppearance value."]
        NSVisualEffectMaterialMediumLight = 8,
        #[deprecated = "Use a semantic material instead.  To force the appearance of a view hierarchy, set the `appearance` property to an appropriate NSAppearance value."]
        NSVisualEffectMaterialUltraDark = 9,
    }
);

ns_enum!(
    #[underlying(NSInteger)]
    pub enum NSVisualEffectBlendingMode {
        NSVisualEffectBlendingModeBehindWindow = 0,
        NSVisualEffectBlendingModeWithinWindow = 1,
    }
);

ns_enum!(
    #[underlying(NSInteger)]
    pub enum NSVisualEffectState {
        NSVisualEffectStateFollowsWindowActiveState = 0,
        NSVisualEffectStateActive = 1,
        NSVisualEffectStateInactive = 2,
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "AppKit_NSVisualEffectView")]
    pub struct NSVisualEffectView;

    #[cfg(feature = "AppKit_NSVisualEffectView")]
    unsafe impl ClassType for NSVisualEffectView {
        #[inherits(NSResponder, NSObject)]
        type Super = NSView;
    }
);

#[cfg(feature = "AppKit_NSVisualEffectView")]
unsafe impl NSAccessibility for NSVisualEffectView {}

#[cfg(feature = "AppKit_NSVisualEffectView")]
unsafe impl NSAccessibilityElementProtocol for NSVisualEffectView {}

#[cfg(feature = "AppKit_NSVisualEffectView")]
unsafe impl NSAnimatablePropertyContainer for NSVisualEffectView {}

#[cfg(feature = "AppKit_NSVisualEffectView")]
unsafe impl NSAppearanceCustomization for NSVisualEffectView {}

#[cfg(feature = "AppKit_NSVisualEffectView")]
unsafe impl NSCoding for NSVisualEffectView {}

#[cfg(feature = "AppKit_NSVisualEffectView")]
unsafe impl NSDraggingDestination for NSVisualEffectView {}

#[cfg(feature = "AppKit_NSVisualEffectView")]
unsafe impl NSObjectProtocol for NSVisualEffectView {}

#[cfg(feature = "AppKit_NSVisualEffectView")]
unsafe impl NSUserInterfaceItemIdentification for NSVisualEffectView {}

extern_methods!(
    #[cfg(feature = "AppKit_NSVisualEffectView")]
    unsafe impl NSVisualEffectView {
        /**
          A value indicating which material is shown by the NSVisualEffectView.  See the comments on NSVisualEffectMaterial.  Defaults to NSVisualEffectMaterialAppearanceBased.  You should instead specify an appropriate semantic material value.  See the comments on NSVisualEffectMaterial.
        */
        #[method(material)]
        pub unsafe fn material(&self) -> NSVisualEffectMaterial;

        /**
          A value indicating which material is shown by the NSVisualEffectView.  See the comments on NSVisualEffectMaterial.  Defaults to NSVisualEffectMaterialAppearanceBased.  You should instead specify an appropriate semantic material value.  See the comments on NSVisualEffectMaterial.
        */
        #[method(setMaterial:)]
        pub unsafe fn setMaterial(&self, material: NSVisualEffectMaterial);

        /**
          An NSBackgroundStyle value that most closely matches the look of the material shown by the NSVisualEffectView.
        */
        #[method(interiorBackgroundStyle)]
        pub unsafe fn interiorBackgroundStyle(&self) -> NSBackgroundStyle;

        /**
          A value controlling how the NSVisualEffectView generates its material.  See the comments on NSVisualEffectBlendingMode.  Not all materials support both blending modes, so NSVisualEffectView may fall back to a more appropriate blending mode as needed.  Defaults to NSVisualEffectBlendingModeBehindWindow.
        */
        #[method(blendingMode)]
        pub unsafe fn blendingMode(&self) -> NSVisualEffectBlendingMode;

        /**
          A value controlling how the NSVisualEffectView generates its material.  See the comments on NSVisualEffectBlendingMode.  Not all materials support both blending modes, so NSVisualEffectView may fall back to a more appropriate blending mode as needed.  Defaults to NSVisualEffectBlendingModeBehindWindow.
        */
        #[method(setBlendingMode:)]
        pub unsafe fn setBlendingMode(&self, blending_mode: NSVisualEffectBlendingMode);

        /**
          A value controlling when the NSVisualEffectView takes on the active look.  See the comments on NSVisualEffectState.  Defaults to NSVisualEffectStateFollowsWindowActiveState.
        */
        #[method(state)]
        pub unsafe fn state(&self) -> NSVisualEffectState;

        /**
          A value controlling when the NSVisualEffectView takes on the active look.  See the comments on NSVisualEffectState.  Defaults to NSVisualEffectStateFollowsWindowActiveState.
        */
        #[method(setState:)]
        pub unsafe fn setState(&self, state: NSVisualEffectState);

        #[cfg(feature = "AppKit_NSImage")]
        /**
          An image whose alpha channel is used to mask the material generated by the NSVisualEffectView.  (It does not also mask subviews.)  Defaults to nil.  It is best to set this to the smallest mask image possible and properly set the image's capInsets property to stretch it.  Setting the maskImage on an NSVisualEffectView that is the contentView of a window will correctly influence the window's shadow.
        */
        #[method_id(@__retain_semantics Other maskImage)]
        pub unsafe fn maskImage(&self) -> Option<Id<NSImage>>;

        #[cfg(feature = "AppKit_NSImage")]
        /**
          An image whose alpha channel is used to mask the material generated by the NSVisualEffectView.  (It does not also mask subviews.)  Defaults to nil.  It is best to set this to the smallest mask image possible and properly set the image's capInsets property to stretch it.  Setting the maskImage on an NSVisualEffectView that is the contentView of a window will correctly influence the window's shadow.
        */
        #[method(setMaskImage:)]
        pub unsafe fn setMaskImage(&self, mask_image: Option<&NSImage>);

        /**
          When YES, the material takes on the emphasized look.  Defaults to NO.  Some, but not all, materials change their look when emphasized.  This is used to indicate that an associated view has firstResponder status.
        */
        #[method(isEmphasized)]
        pub unsafe fn isEmphasized(&self) -> bool;

        /**
          When YES, the material takes on the emphasized look.  Defaults to NO.  Some, but not all, materials change their look when emphasized.  This is used to indicate that an associated view has firstResponder status.
        */
        #[method(setEmphasized:)]
        pub unsafe fn setEmphasized(&self, emphasized: bool);

        #[method(viewDidMoveToWindow)]
        pub unsafe fn viewDidMoveToWindow(&self);

        #[cfg(feature = "AppKit_NSWindow")]
        #[method(viewWillMoveToWindow:)]
        pub unsafe fn viewWillMoveToWindow(&self, new_window: Option<&NSWindow>);
    }
);

extern_methods!(
    /// Methods declared on superclass `NSView`
    #[cfg(feature = "AppKit_NSVisualEffectView")]
    unsafe impl NSVisualEffectView {
        #[method_id(@__retain_semantics Init initWithFrame:)]
        pub unsafe fn initWithFrame(this: Option<Allocated<Self>>, frame_rect: NSRect) -> Id<Self>;
    }
);
