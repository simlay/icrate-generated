//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

__inner_extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "AppKit_NSCandidateListTouchBarItem")]
    pub struct NSCandidateListTouchBarItem<
        CandidateType: Message = Object,
        CandidateTypeOwnership: Ownership = Shared,
    > {
        _inner0: PhantomData<*mut (CandidateType, CandidateTypeOwnership)>,
        notunwindsafe: PhantomData<&'static mut ()>,
    }

    #[cfg(feature = "AppKit_NSCandidateListTouchBarItem")]
    unsafe impl<CandidateType: Message, CandidateTypeOwnership: Ownership> ClassType
        for NSCandidateListTouchBarItem<CandidateType, CandidateTypeOwnership>
    {
        #[inherits(NSObject)]
        type Super = NSTouchBarItem;
    }
);

#[cfg(feature = "AppKit_NSCandidateListTouchBarItem")]
unsafe impl<CandidateType: Message, CandidateTypeOwnership: Ownership> NSCoding
    for NSCandidateListTouchBarItem<CandidateType, CandidateTypeOwnership>
{
}

#[cfg(feature = "AppKit_NSCandidateListTouchBarItem")]
unsafe impl<CandidateType: Message, CandidateTypeOwnership: Ownership> NSObjectProtocol
    for NSCandidateListTouchBarItem<CandidateType, CandidateTypeOwnership>
{
}

extern_methods!(
    #[cfg(feature = "AppKit_NSCandidateListTouchBarItem")]
    unsafe impl<CandidateType: Message, CandidateTypeOwnership: Ownership>
        NSCandidateListTouchBarItem<CandidateType, CandidateTypeOwnership>
    {
        #[cfg(feature = "AppKit_NSView")]
        /**
          The client object for the receiver.
        */
        #[method_id(@__retain_semantics Other client)]
        pub unsafe fn client(&self) -> Option<Id<NSView>>;

        #[cfg(feature = "AppKit_NSView")]
        /**
          The client object for the receiver.
        */
        #[method(setClient:)]
        pub unsafe fn setClient(&self, client: Option<&NSView>);

        #[method_id(@__retain_semantics Other delegate)]
        pub unsafe fn delegate(
            &self,
        ) -> Option<Id<ProtocolObject<dyn NSCandidateListTouchBarItemDelegate>>>;

        #[method(setDelegate:)]
        pub unsafe fn setDelegate(
            &self,
            delegate: Option<&ProtocolObject<dyn NSCandidateListTouchBarItemDelegate>>,
        );

        /**
          Controls the visible state of the item. The default is YES.
        */
        #[method(isCollapsed)]
        pub unsafe fn isCollapsed(&self) -> bool;

        /**
          Controls the visible state of the item. The default is YES.
        */
        #[method(setCollapsed:)]
        pub unsafe fn setCollapsed(&self, collapsed: bool);

        /**
          When YES, the item is allowed to be collapsed. YES by default.
        */
        #[method(allowsCollapsing)]
        pub unsafe fn allowsCollapsing(&self) -> bool;

        /**
          When YES, the item is allowed to be collapsed. YES by default.
        */
        #[method(setAllowsCollapsing:)]
        pub unsafe fn setAllowsCollapsing(&self, allows_collapsing: bool);

        /**
          Returns the state of its native candidate list visibility. When -collapsed=NO and not obscured by UI from the text input system, this property returns YES. KVO compliant. Clients should set candidates when YES.
        */
        #[method(isCandidateListVisible)]
        pub unsafe fn isCandidateListVisible(&self) -> bool;

        #[method(updateWithInsertionPointVisibility:)]
        pub unsafe fn updateWithInsertionPointVisibility(&self, is_visible: bool);

        /**
          When YES, the item displays candidates from input methods when available instead of -candidates. YES by default.
        */
        #[method(allowsTextInputContextCandidates)]
        pub unsafe fn allowsTextInputContextCandidates(&self) -> bool;

        /**
          When YES, the item displays candidates from input methods when available instead of -candidates. YES by default.
        */
        #[method(setAllowsTextInputContextCandidates:)]
        pub unsafe fn setAllowsTextInputContextCandidates(
            &self,
            allows_text_input_context_candidates: bool,
        );

        #[cfg(feature = "Foundation_NSAttributedString")]
        /**
          A block function for converting a candidate object into an NSAttributedString that will be displayed in the candidate bar. nil by default. Not required for displaying NSString, NSAttributedString, and NSTextCheckingResult candidates. In absence of NSFontAttributeName and NSForegroundColorAttributeName in the returned string, the standard bar appearance font and color are used instead of Helvetica 12.0 and +[NSColor blackColor].
        */
        #[method(attributedStringForCandidate)]
        pub unsafe fn attributedStringForCandidate(
            &self,
        ) -> *mut Block<(NonNull<CandidateType>, NSInteger), NonNull<NSAttributedString>>;

        #[cfg(feature = "Foundation_NSAttributedString")]
        /**
          A block function for converting a candidate object into an NSAttributedString that will be displayed in the candidate bar. nil by default. Not required for displaying NSString, NSAttributedString, and NSTextCheckingResult candidates. In absence of NSFontAttributeName and NSForegroundColorAttributeName in the returned string, the standard bar appearance font and color are used instead of Helvetica 12.0 and +[NSColor blackColor].
        */
        #[method(setAttributedStringForCandidate:)]
        pub unsafe fn setAttributedStringForCandidate(
            &self,
            attributed_string_for_candidate: Option<
                &Block<(NonNull<CandidateType>, NSInteger), NonNull<NSAttributedString>>,
            >,
        );

        #[cfg(feature = "Foundation_NSArray")]
        /**
          Returns an array of candidate objects previously set via -setCandidates:forSelectedRange:inString:view:
        */
        #[method_id(@__retain_semantics Other candidates)]
        pub unsafe fn candidates(&self) -> Id<NSArray<CandidateType>>;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method(setCandidates:forSelectedRange:inString:)]
        pub unsafe fn setCandidates_forSelectedRange_inString(
            &self,
            candidates: &NSArray<CandidateType>,
            selected_range: NSRange,
            original_string: Option<&NSString>,
        );

        #[cfg(feature = "Foundation_NSString")]
        /**
          The label displayed in the customization panel. The default is an empty string.
        */
        #[method_id(@__retain_semantics Other customizationLabel)]
        pub unsafe fn customizationLabel(&self) -> Id<NSString>;

        #[cfg(feature = "Foundation_NSString")]
        /**
          The label displayed in the customization panel. The default is an empty string.
        */
        #[method(setCustomizationLabel:)]
        pub unsafe fn setCustomizationLabel(&self, customization_label: Option<&NSString>);
    }
);

extern_protocol!(
    pub unsafe trait NSCandidateListTouchBarItemDelegate: NSObjectProtocol {
        #[cfg(feature = "AppKit_NSCandidateListTouchBarItem")]
        #[optional]
        #[method(candidateListTouchBarItem:beginSelectingCandidateAtIndex:)]
        unsafe fn candidateListTouchBarItem_beginSelectingCandidateAtIndex(
            &self,
            an_item: &NSCandidateListTouchBarItem,
            index: NSInteger,
        );

        #[cfg(feature = "AppKit_NSCandidateListTouchBarItem")]
        #[optional]
        #[method(candidateListTouchBarItem:changeSelectionFromCandidateAtIndex:toIndex:)]
        unsafe fn candidateListTouchBarItem_changeSelectionFromCandidateAtIndex_toIndex(
            &self,
            an_item: &NSCandidateListTouchBarItem,
            previous_index: NSInteger,
            index: NSInteger,
        );

        #[cfg(feature = "AppKit_NSCandidateListTouchBarItem")]
        #[optional]
        #[method(candidateListTouchBarItem:endSelectingCandidateAtIndex:)]
        unsafe fn candidateListTouchBarItem_endSelectingCandidateAtIndex(
            &self,
            an_item: &NSCandidateListTouchBarItem,
            index: NSInteger,
        );

        #[cfg(feature = "AppKit_NSCandidateListTouchBarItem")]
        #[optional]
        #[method(candidateListTouchBarItem:changedCandidateListVisibility:)]
        unsafe fn candidateListTouchBarItem_changedCandidateListVisibility(
            &self,
            an_item: &NSCandidateListTouchBarItem,
            is_visible: bool,
        );
    }

    unsafe impl ProtocolType for dyn NSCandidateListTouchBarItemDelegate {}
);

extern_methods!(
    /// NSCandidateListTouchBarItem
    #[cfg(feature = "AppKit_NSView")]
    unsafe impl NSView {
        #[cfg(feature = "AppKit_NSCandidateListTouchBarItem")]
        /**
          Returns NSCandidateListTouchBarItem used by the receiver when the first responder. The default implementation just returns nil. NSTextInputContext uses the item returned from this method for showing the candidates from input methods.
        */
        #[method_id(@__retain_semantics Other candidateListTouchBarItem)]
        pub unsafe fn candidateListTouchBarItem(&self) -> Option<Id<NSCandidateListTouchBarItem>>;
    }
);

extern_static!(NSTouchBarItemIdentifierCandidateList: &'static NSTouchBarItemIdentifier);

extern_methods!(
    /// Methods declared on superclass `NSTouchBarItem`
    #[cfg(feature = "AppKit_NSCandidateListTouchBarItem")]
    unsafe impl<CandidateType: Message, CandidateTypeOwnership: Ownership>
        NSCandidateListTouchBarItem<CandidateType, CandidateTypeOwnership>
    {
        #[method_id(@__retain_semantics Init initWithIdentifier:)]
        pub unsafe fn initWithIdentifier(
            this: Option<Allocated<Self>>,
            identifier: &NSTouchBarItemIdentifier,
        ) -> Id<Self>;
    }
);
