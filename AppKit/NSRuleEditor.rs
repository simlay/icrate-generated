//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

typed_enum!(
    pub type NSRuleEditorPredicatePartKey = NSString;
);

extern_static!(NSRuleEditorPredicateLeftExpression: &'static NSRuleEditorPredicatePartKey);

extern_static!(NSRuleEditorPredicateRightExpression: &'static NSRuleEditorPredicatePartKey);

extern_static!(NSRuleEditorPredicateComparisonModifier: &'static NSRuleEditorPredicatePartKey);

extern_static!(NSRuleEditorPredicateOptions: &'static NSRuleEditorPredicatePartKey);

extern_static!(NSRuleEditorPredicateOperatorType: &'static NSRuleEditorPredicatePartKey);

extern_static!(NSRuleEditorPredicateCustomSelector: &'static NSRuleEditorPredicatePartKey);

extern_static!(NSRuleEditorPredicateCompoundType: &'static NSRuleEditorPredicatePartKey);

ns_enum!(
    #[underlying(NSUInteger)]
    pub enum NSRuleEditorNestingMode {
        NSRuleEditorNestingModeSingle = 0,
        NSRuleEditorNestingModeList = 1,
        NSRuleEditorNestingModeCompound = 2,
        NSRuleEditorNestingModeSimple = 3,
    }
);

ns_enum!(
    #[underlying(NSUInteger)]
    pub enum NSRuleEditorRowType {
        NSRuleEditorRowTypeSimple = 0,
        NSRuleEditorRowTypeCompound = 1,
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "AppKit_NSRuleEditor")]
    pub struct NSRuleEditor;

    #[cfg(feature = "AppKit_NSRuleEditor")]
    unsafe impl ClassType for NSRuleEditor {
        #[inherits(NSView, NSResponder, NSObject)]
        type Super = NSControl;
    }
);

#[cfg(feature = "AppKit_NSRuleEditor")]
unsafe impl NSAccessibility for NSRuleEditor {}

#[cfg(feature = "AppKit_NSRuleEditor")]
unsafe impl NSAccessibilityElementProtocol for NSRuleEditor {}

#[cfg(feature = "AppKit_NSRuleEditor")]
unsafe impl NSAnimatablePropertyContainer for NSRuleEditor {}

#[cfg(feature = "AppKit_NSRuleEditor")]
unsafe impl NSAppearanceCustomization for NSRuleEditor {}

#[cfg(feature = "AppKit_NSRuleEditor")]
unsafe impl NSCoding for NSRuleEditor {}

#[cfg(feature = "AppKit_NSRuleEditor")]
unsafe impl NSDraggingDestination for NSRuleEditor {}

#[cfg(feature = "AppKit_NSRuleEditor")]
unsafe impl NSObjectProtocol for NSRuleEditor {}

#[cfg(feature = "AppKit_NSRuleEditor")]
unsafe impl NSUserInterfaceItemIdentification for NSRuleEditor {}

extern_methods!(
    #[cfg(feature = "AppKit_NSRuleEditor")]
    unsafe impl NSRuleEditor {
        /**
          Clients can call this method to set and get the delegate for the NSRuleEditor.  NSRuleEditor requires a delegate that implements the required NSRuleEditorDelegateMethods methods to function.
        */
        #[method_id(@__retain_semantics Other delegate)]
        pub unsafe fn delegate(&self) -> Option<Id<ProtocolObject<dyn NSRuleEditorDelegate>>>;

        /**
          Clients can call this method to set and get the delegate for the NSRuleEditor.  NSRuleEditor requires a delegate that implements the required NSRuleEditorDelegateMethods methods to function.
        */
        #[method(setDelegate:)]
        pub unsafe fn setDelegate(
            &self,
            delegate: Option<&ProtocolObject<dyn NSRuleEditorDelegate>>,
        );

        #[cfg(feature = "Foundation_NSString")]
        /**
          Clients can call this to automatically set a formatting dictionary based on the strings file with the given name.  Setting a formatting strings file searches the main bundle, and the bundle containing this nib, for a (possibly localized) strings file resource with the given name, loads it, and sets it as the formatting dictionary.  The resulting dictionary can be obtained with -[NSRuleEditor formattingDictionary].  If you set the formatting dictionary explicitly with -[NSRuleEditor setFormattingDictionary:], then it sets the current formattingStringsFilename to nil
        */
        #[method_id(@__retain_semantics Other formattingStringsFilename)]
        pub unsafe fn formattingStringsFilename(&self) -> Option<Id<NSString>>;

        #[cfg(feature = "Foundation_NSString")]
        /**
          Clients can call this to automatically set a formatting dictionary based on the strings file with the given name.  Setting a formatting strings file searches the main bundle, and the bundle containing this nib, for a (possibly localized) strings file resource with the given name, loads it, and sets it as the formatting dictionary.  The resulting dictionary can be obtained with -[NSRuleEditor formattingDictionary].  If you set the formatting dictionary explicitly with -[NSRuleEditor setFormattingDictionary:], then it sets the current formattingStringsFilename to nil
        */
        #[method(setFormattingStringsFilename:)]
        pub unsafe fn setFormattingStringsFilename(
            &self,
            formatting_strings_filename: Option<&NSString>,
        );

        #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSString"))]
        /**
          Clients can call this to set (and get) a formatting dictionary on the NSRuleEditor.  The formatting dictionary should have NSString keys and NSString values.  The syntax of the keys and values is the same as the syntax for strings files.
        */
        #[method_id(@__retain_semantics Other formattingDictionary)]
        pub unsafe fn formattingDictionary(&self) -> Option<Id<NSDictionary<NSString, NSString>>>;

        #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSString"))]
        /**
          Clients can call this to set (and get) a formatting dictionary on the NSRuleEditor.  The formatting dictionary should have NSString keys and NSString values.  The syntax of the keys and values is the same as the syntax for strings files.
        */
        #[method(setFormattingDictionary:)]
        pub unsafe fn setFormattingDictionary(
            &self,
            formatting_dictionary: Option<&NSDictionary<NSString, NSString>>,
        );

        #[method(reloadCriteria)]
        pub unsafe fn reloadCriteria(&self);

        /**
          Clients call this to set and get the nesting mode for the NSRuleEditor.  This is generally set at view creation time and not modified after.  The default is NSRuleEditorNestingModeCompound.
        */
        #[method(nestingMode)]
        pub unsafe fn nestingMode(&self) -> NSRuleEditorNestingMode;

        /**
          Clients call this to set and get the nesting mode for the NSRuleEditor.  This is generally set at view creation time and not modified after.  The default is NSRuleEditorNestingModeCompound.
        */
        #[method(setNestingMode:)]
        pub unsafe fn setNestingMode(&self, nesting_mode: NSRuleEditorNestingMode);

        /**
          Clients call this to set and get the height of each row.  This method changes the receiver's frame and marks it for redisplay.
        */
        #[method(rowHeight)]
        pub unsafe fn rowHeight(&self) -> CGFloat;

        /**
          Clients call this to set and get the height of each row.  This method changes the receiver's frame and marks it for redisplay.
        */
        #[method(setRowHeight:)]
        pub unsafe fn setRowHeight(&self, row_height: CGFloat);

        /**
          Clients call this to set the editable property of the control.  Users can only interact with editable NSRuleEditors.  The default is YES.
        */
        #[method(isEditable)]
        pub unsafe fn isEditable(&self) -> bool;

        /**
          Clients call this to set the editable property of the control.  Users can only interact with editable NSRuleEditors.  The default is YES.
        */
        #[method(setEditable:)]
        pub unsafe fn setEditable(&self, editable: bool);

        /**
          Rule editors that have the canRemoveAllRows property set to NO prevent the user from emptying the rule editor by deleting all the rows.  The rule editor can still be emptied programatically.  The default is YES.
        */
        #[method(canRemoveAllRows)]
        pub unsafe fn canRemoveAllRows(&self) -> bool;

        /**
          Rule editors that have the canRemoveAllRows property set to NO prevent the user from emptying the rule editor by deleting all the rows.  The rule editor can still be emptied programatically.  The default is YES.
        */
        #[method(setCanRemoveAllRows:)]
        pub unsafe fn setCanRemoveAllRows(&self, can_remove_all_rows: bool);

        #[cfg(feature = "Foundation_NSPredicate")]
        /**
          Clients can call this to obtain the predicate for the view if the delegate implements - ruleEditor: predicatePartsForItem: withValue: inRow:row: .  If the delegate does not, or if the delegate does not return enough parts to construct a full predicate, this method returns nil.
        */
        #[method_id(@__retain_semantics Other predicate)]
        pub unsafe fn predicate(&self) -> Option<Id<NSPredicate>>;

        #[method(reloadPredicate)]
        pub unsafe fn reloadPredicate(&self);

        #[cfg(feature = "Foundation_NSPredicate")]
        #[method_id(@__retain_semantics Other predicateForRow:)]
        pub unsafe fn predicateForRow(&self, row: NSInteger) -> Option<Id<NSPredicate>>;

        /**
          Clients can call this to determine the number of rows
        */
        #[method(numberOfRows)]
        pub unsafe fn numberOfRows(&self) -> NSInteger;

        #[cfg(feature = "Foundation_NSIndexSet")]
        #[method_id(@__retain_semantics Other subrowIndexesForRow:)]
        pub unsafe fn subrowIndexesForRow(&self, row_index: NSInteger) -> Id<NSIndexSet>;

        #[cfg(feature = "Foundation_NSArray")]
        #[method_id(@__retain_semantics Other criteriaForRow:)]
        pub unsafe fn criteriaForRow(&self, row: NSInteger) -> Id<NSArray>;

        #[cfg(feature = "Foundation_NSArray")]
        #[method_id(@__retain_semantics Other displayValuesForRow:)]
        pub unsafe fn displayValuesForRow(&self, row: NSInteger) -> Id<NSArray>;

        #[method(rowForDisplayValue:)]
        pub unsafe fn rowForDisplayValue(&self, display_value: &Object) -> NSInteger;

        #[method(rowTypeForRow:)]
        pub unsafe fn rowTypeForRow(&self, row_index: NSInteger) -> NSRuleEditorRowType;

        #[method(parentRowForRow:)]
        pub unsafe fn parentRowForRow(&self, row_index: NSInteger) -> NSInteger;

        #[method(addRow:)]
        pub unsafe fn addRow(&self, sender: Option<&Object>);

        #[method(insertRowAtIndex:withType:asSubrowOfRow:animate:)]
        pub unsafe fn insertRowAtIndex_withType_asSubrowOfRow_animate(
            &self,
            row_index: NSInteger,
            row_type: NSRuleEditorRowType,
            parent_row: NSInteger,
            should_animate: bool,
        );

        #[cfg(feature = "Foundation_NSArray")]
        #[method(setCriteria:andDisplayValues:forRowAtIndex:)]
        pub unsafe fn setCriteria_andDisplayValues_forRowAtIndex(
            &self,
            criteria: &NSArray,
            values: &NSArray,
            row_index: NSInteger,
        );

        #[method(removeRowAtIndex:)]
        pub unsafe fn removeRowAtIndex(&self, row_index: NSInteger);

        #[cfg(feature = "Foundation_NSIndexSet")]
        #[method(removeRowsAtIndexes:includeSubrows:)]
        pub unsafe fn removeRowsAtIndexes_includeSubrows(
            &self,
            row_indexes: &NSIndexSet,
            include_subrows: bool,
        );

        #[cfg(feature = "Foundation_NSIndexSet")]
        /**
          Clients call this to determine the indexes of the selected rows.
        */
        #[method_id(@__retain_semantics Other selectedRowIndexes)]
        pub unsafe fn selectedRowIndexes(&self) -> Id<NSIndexSet>;

        #[cfg(feature = "Foundation_NSIndexSet")]
        #[method(selectRowIndexes:byExtendingSelection:)]
        pub unsafe fn selectRowIndexes_byExtendingSelection(
            &self,
            indexes: &NSIndexSet,
            extend: bool,
        );

        /**
          Sets the class used when creating a new row in the "rows" binding; this class should be KVC and KVO compliant for the key paths listed below.  By default this is NSMutableDictionary
        */
        #[method(rowClass)]
        pub unsafe fn rowClass(&self) -> &'static Class;

        /**
          Sets the class used when creating a new row in the "rows" binding; this class should be KVC and KVO compliant for the key paths listed below.  By default this is NSMutableDictionary
        */
        #[method(setRowClass:)]
        pub unsafe fn setRowClass(&self, row_class: &Class);

        #[cfg(feature = "Foundation_NSString")]
        /**
          Set and get the key path for the row type, which is used to get the row type in the "rows" binding.  The row type is a value property of type NSRuleEditorRowType.  The default is @"rowType".
        */
        #[method_id(@__retain_semantics Other rowTypeKeyPath)]
        pub unsafe fn rowTypeKeyPath(&self) -> Id<NSString>;

        #[cfg(feature = "Foundation_NSString")]
        /**
          Set and get the key path for the row type, which is used to get the row type in the "rows" binding.  The row type is a value property of type NSRuleEditorRowType.  The default is @"rowType".
        */
        #[method(setRowTypeKeyPath:)]
        pub unsafe fn setRowTypeKeyPath(&self, row_type_key_path: &NSString);

        #[cfg(feature = "Foundation_NSString")]
        /**
          Set and get the key path for the subrows, which is used to determined nested rows in the "rows" binding.  The subrows property is an ordered to-many relationship containing additional bound row objects. The default is @"subrows".
        */
        #[method_id(@__retain_semantics Other subrowsKeyPath)]
        pub unsafe fn subrowsKeyPath(&self) -> Id<NSString>;

        #[cfg(feature = "Foundation_NSString")]
        /**
          Set and get the key path for the subrows, which is used to determined nested rows in the "rows" binding.  The subrows property is an ordered to-many relationship containing additional bound row objects. The default is @"subrows".
        */
        #[method(setSubrowsKeyPath:)]
        pub unsafe fn setSubrowsKeyPath(&self, subrows_key_path: &NSString);

        #[cfg(feature = "Foundation_NSString")]
        /**
          Set and get the criteria key path, which determines the criteria for a row in the "rows" binding.  (The criteria objects are what the delegate returns from - ruleEditor: child: forCriterion: withRowType:).  The criteria property is an ordered to-many relationship. The default is @"criteria".
        */
        #[method_id(@__retain_semantics Other criteriaKeyPath)]
        pub unsafe fn criteriaKeyPath(&self) -> Id<NSString>;

        #[cfg(feature = "Foundation_NSString")]
        /**
          Set and get the criteria key path, which determines the criteria for a row in the "rows" binding.  (The criteria objects are what the delegate returns from - ruleEditor: child: forCriterion: withRowType:).  The criteria property is an ordered to-many relationship. The default is @"criteria".
        */
        #[method(setCriteriaKeyPath:)]
        pub unsafe fn setCriteriaKeyPath(&self, criteria_key_path: &NSString);

        #[cfg(feature = "Foundation_NSString")]
        /**
          Set and get the display values key path, which determines the display values for a row (the display values are what the delegate returns from - ruleEditor: displayValueForCriterion: inRow:).  The criteria property is an ordered to-many relationship. The default is @"displayValues".
        */
        #[method_id(@__retain_semantics Other displayValuesKeyPath)]
        pub unsafe fn displayValuesKeyPath(&self) -> Id<NSString>;

        #[cfg(feature = "Foundation_NSString")]
        /**
          Set and get the display values key path, which determines the display values for a row (the display values are what the delegate returns from - ruleEditor: displayValueForCriterion: inRow:).  The criteria property is an ordered to-many relationship. The default is @"displayValues".
        */
        #[method(setDisplayValuesKeyPath:)]
        pub unsafe fn setDisplayValuesKeyPath(&self, display_values_key_path: &NSString);
    }
);

extern_protocol!(
    pub unsafe trait NSRuleEditorDelegate: NSObjectProtocol {
        #[cfg(feature = "AppKit_NSRuleEditor")]
        #[method(ruleEditor:numberOfChildrenForCriterion:withRowType:)]
        unsafe fn ruleEditor_numberOfChildrenForCriterion_withRowType(
            &self,
            editor: &NSRuleEditor,
            criterion: Option<&Object>,
            row_type: NSRuleEditorRowType,
        ) -> NSInteger;

        #[cfg(feature = "AppKit_NSRuleEditor")]
        #[method_id(@__retain_semantics Other ruleEditor:child:forCriterion:withRowType:)]
        unsafe fn ruleEditor_child_forCriterion_withRowType(
            &self,
            editor: &NSRuleEditor,
            index: NSInteger,
            criterion: Option<&Object>,
            row_type: NSRuleEditorRowType,
        ) -> Id<Object>;

        #[cfg(feature = "AppKit_NSRuleEditor")]
        #[method_id(@__retain_semantics Other ruleEditor:displayValueForCriterion:inRow:)]
        unsafe fn ruleEditor_displayValueForCriterion_inRow(
            &self,
            editor: &NSRuleEditor,
            criterion: &Object,
            row: NSInteger,
        ) -> Id<Object>;

        #[cfg(all(feature = "AppKit_NSRuleEditor", feature = "Foundation_NSDictionary"))]
        #[optional]
        #[method_id(@__retain_semantics Other ruleEditor:predicatePartsForCriterion:withDisplayValue:inRow:)]
        unsafe fn ruleEditor_predicatePartsForCriterion_withDisplayValue_inRow(
            &self,
            editor: &NSRuleEditor,
            criterion: &Object,
            value: &Object,
            row: NSInteger,
        ) -> Option<Id<NSDictionary<NSRuleEditorPredicatePartKey, Object>>>;

        #[cfg(feature = "Foundation_NSNotification")]
        #[optional]
        #[method(ruleEditorRowsDidChange:)]
        unsafe fn ruleEditorRowsDidChange(&self, notification: &NSNotification);
    }

    unsafe impl ProtocolType for dyn NSRuleEditorDelegate {}
);

extern_static!(NSRuleEditorRowsDidChangeNotification: &'static NSNotificationName);

extern_methods!(
    /// Methods declared on superclass `NSControl`
    #[cfg(feature = "AppKit_NSRuleEditor")]
    unsafe impl NSRuleEditor {
        #[method_id(@__retain_semantics Init initWithFrame:)]
        pub unsafe fn initWithFrame(this: Option<Allocated<Self>>, frame_rect: NSRect) -> Id<Self>;
    }
);
