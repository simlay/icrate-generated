//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

ns_enum!(
    #[underlying(NSInteger)]
    /**
     The gravity area describes the area within a StackView that a view will be placed.
    This placement is also highly related to the set orientation and layoutDirection.

    Gravity areas will align to a specific direction in the StackView, which are described through these enum values.
    Each gravity area is a distinct portion of the StackView, and the constraints for spacing between gravities is described further in the documentation for the spacing property.
    In addition to the gravity spacing constraints, the center gravity area also has a constraint tying it to the center of the StackView with a layout priority of NSLayoutPriorityDefaultLow.

    For horizontally-oriented StackViews, NSStackViewGravityLeading, NSStackViewGravityCenter, and NSStackViewGravityTrailing should be used. Leading and trailing are described by the userInterfaceLayoutDirection of the StackView, (leading = left for NSUserInterfaceLayoutDirectionLeftToRight vs leading = right for NSUserInterfaceLayoutDirectionRightToLeft).

    For a vertically-oriented StackView, NSStackViewGravityTop, NSStackViewGravityCenter, and NSStackViewGravityBottom should be used.

    See also:
    - insertView:atIndex:inGravity:
    - viewsInGravity:
    - setViews:inGravity:
    - NSUserInterfaceLayoutOrientation
    - NSUserInterfaceLayoutDirection
    */
    pub enum NSStackViewGravity {
        NSStackViewGravityTop = 1,
        NSStackViewGravityLeading = 1,
        NSStackViewGravityCenter = 2,
        NSStackViewGravityBottom = 3,
        NSStackViewGravityTrailing = 3,
    }
);

ns_enum!(
    #[underlying(NSInteger)]
    /**
      Distributionâ€”the layout along the stacking axis.
    All NSStackViewDistribution enum values fit first and last stacked views tightly to the container, except for NSStackViewDistributionGravityAreas.
    */
    pub enum NSStackViewDistribution {
        NSStackViewDistributionGravityAreas = -1,
        NSStackViewDistributionFill = 0,
        NSStackViewDistributionFillEqually = 1,
        NSStackViewDistributionFillProportionally = 2,
        NSStackViewDistributionEqualSpacing = 3,
        NSStackViewDistributionEqualCentering = 4,
    }
);

typed_extensible_enum!(
    pub type NSStackViewVisibilityPriority = c_float;
);

extern_static!(NSStackViewVisibilityPriorityMustHold: NSStackViewVisibilityPriority = 1000);

extern_static!(
    NSStackViewVisibilityPriorityDetachOnlyIfNecessary: NSStackViewVisibilityPriority = 900
);

extern_static!(NSStackViewVisibilityPriorityNotVisible: NSStackViewVisibilityPriority = 0);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "AppKit_NSStackView")]
    pub struct NSStackView;

    #[cfg(feature = "AppKit_NSStackView")]
    unsafe impl ClassType for NSStackView {
        #[inherits(NSResponder, NSObject)]
        type Super = NSView;
    }
);

#[cfg(feature = "AppKit_NSStackView")]
unsafe impl NSAccessibility for NSStackView {}

#[cfg(feature = "AppKit_NSStackView")]
unsafe impl NSAccessibilityElementProtocol for NSStackView {}

#[cfg(feature = "AppKit_NSStackView")]
unsafe impl NSAnimatablePropertyContainer for NSStackView {}

#[cfg(feature = "AppKit_NSStackView")]
unsafe impl NSAppearanceCustomization for NSStackView {}

#[cfg(feature = "AppKit_NSStackView")]
unsafe impl NSCoding for NSStackView {}

#[cfg(feature = "AppKit_NSStackView")]
unsafe impl NSDraggingDestination for NSStackView {}

#[cfg(feature = "AppKit_NSStackView")]
unsafe impl NSObjectProtocol for NSStackView {}

#[cfg(feature = "AppKit_NSStackView")]
unsafe impl NSUserInterfaceItemIdentification for NSStackView {}

extern_methods!(
    #[cfg(feature = "AppKit_NSStackView")]
    unsafe impl NSStackView {
        #[cfg(feature = "Foundation_NSArray")]
        #[method_id(@__retain_semantics Other stackViewWithViews:)]
        pub unsafe fn stackViewWithViews(views: &NSArray<NSView>) -> Id<Self>;

        #[method_id(@__retain_semantics Other delegate)]
        pub unsafe fn delegate(&self) -> Option<Id<ProtocolObject<dyn NSStackViewDelegate>>>;

        #[method(setDelegate:)]
        pub unsafe fn setDelegate(
            &self,
            delegate: Option<&ProtocolObject<dyn NSStackViewDelegate>>,
        );

        /**
          Orientation of the StackView, defaults to NSUserInterfaceLayoutOrientationHorizontal
        */
        #[method(orientation)]
        pub unsafe fn orientation(&self) -> NSUserInterfaceLayoutOrientation;

        /**
          Orientation of the StackView, defaults to NSUserInterfaceLayoutOrientationHorizontal
        */
        #[method(setOrientation:)]
        pub unsafe fn setOrientation(&self, orientation: NSUserInterfaceLayoutOrientation);

        /**
          Describes how subviews are aligned within the StackView, defaults to `NSLayoutAttributeCenterY` for horizontal stacks, `NSLayoutAttributeCenterX` for vertical stacks. Setting `NSLayoutAttributeNotAnAttribute` will cause the internal alignment constraints to not be created, and could result in an ambiguous layout. Setting an inapplicable attribute for the set orientation will result in the alignment being ignored (similar to its handling with NSLayoutAttributeNotAnAttribute). The alignment constraints are established at a priority of `NSLayoutPriorityDefaultLow` and are overridable for individual views using external constraints.
        */
        #[method(alignment)]
        pub unsafe fn alignment(&self) -> NSLayoutAttribute;

        /**
          Describes how subviews are aligned within the StackView, defaults to `NSLayoutAttributeCenterY` for horizontal stacks, `NSLayoutAttributeCenterX` for vertical stacks. Setting `NSLayoutAttributeNotAnAttribute` will cause the internal alignment constraints to not be created, and could result in an ambiguous layout. Setting an inapplicable attribute for the set orientation will result in the alignment being ignored (similar to its handling with NSLayoutAttributeNotAnAttribute). The alignment constraints are established at a priority of `NSLayoutPriorityDefaultLow` and are overridable for individual views using external constraints.
        */
        #[method(setAlignment:)]
        pub unsafe fn setAlignment(&self, alignment: NSLayoutAttribute);

        /**
          Default padding inside the StackView, around all of the subviews.
        */
        #[method(edgeInsets)]
        pub unsafe fn edgeInsets(&self) -> NSEdgeInsets;

        /**
          Default padding inside the StackView, around all of the subviews.
        */
        #[method(setEdgeInsets:)]
        pub unsafe fn setEdgeInsets(&self, edge_insets: NSEdgeInsets);

        /**
          The spacing and sizing distribution of stacked views along the primary axis. Defaults to GravityAreas.
        */
        #[method(distribution)]
        pub unsafe fn distribution(&self) -> NSStackViewDistribution;

        /**
          The spacing and sizing distribution of stacked views along the primary axis. Defaults to GravityAreas.
        */
        #[method(setDistribution:)]
        pub unsafe fn setDistribution(&self, distribution: NSStackViewDistribution);

        /**
          Default (minimum) spacing between each view
        */
        #[method(spacing)]
        pub unsafe fn spacing(&self) -> CGFloat;

        /**
          Default (minimum) spacing between each view
        */
        #[method(setSpacing:)]
        pub unsafe fn setSpacing(&self, spacing: CGFloat);

        #[method(setCustomSpacing:afterView:)]
        pub unsafe fn setCustomSpacing_afterView(&self, spacing: CGFloat, view: &NSView);

        #[method(customSpacingAfterView:)]
        pub unsafe fn customSpacingAfterView(&self, view: &NSView) -> CGFloat;

        /**
          If YES, when a stacked view's `hidden` property is set to YES, the view will be detached from the stack and reattached when set to NO. Similarly, if the view has a lowered visibility priority and is detached from the stack view, it will be set as `hidden` rather than removed from the view hierarchy. Defaults to YES for apps linked on the 10.11 SDK or later.
        */
        #[method(detachesHiddenViews)]
        pub unsafe fn detachesHiddenViews(&self) -> bool;

        /**
          If YES, when a stacked view's `hidden` property is set to YES, the view will be detached from the stack and reattached when set to NO. Similarly, if the view has a lowered visibility priority and is detached from the stack view, it will be set as `hidden` rather than removed from the view hierarchy. Defaults to YES for apps linked on the 10.11 SDK or later.
        */
        #[method(setDetachesHiddenViews:)]
        pub unsafe fn setDetachesHiddenViews(&self, detaches_hidden_views: bool);

        #[cfg(feature = "Foundation_NSArray")]
        /**
          The list of views that are arranged in a stack by the receiver. They are a subset of \c -subviews, with potential difference in ordering.
        */
        #[method_id(@__retain_semantics Other arrangedSubviews)]
        pub unsafe fn arrangedSubviews(&self) -> Id<NSArray<NSView>>;

        #[method(addArrangedSubview:)]
        pub unsafe fn addArrangedSubview(&self, view: &NSView);

        #[method(insertArrangedSubview:atIndex:)]
        pub unsafe fn insertArrangedSubview_atIndex(&self, view: &NSView, index: NSInteger);

        #[method(removeArrangedSubview:)]
        pub unsafe fn removeArrangedSubview(&self, view: &NSView);

        #[cfg(feature = "Foundation_NSArray")]
        /**
          The arrangedSubviews that are currently detached/hidden.
        */
        #[method_id(@__retain_semantics Other detachedViews)]
        pub unsafe fn detachedViews(&self) -> Id<NSArray<NSView>>;

        #[method(setVisibilityPriority:forView:)]
        pub unsafe fn setVisibilityPriority_forView(
            &self,
            priority: NSStackViewVisibilityPriority,
            view: &NSView,
        );

        #[method(visibilityPriorityForView:)]
        pub unsafe fn visibilityPriorityForView(
            &self,
            view: &NSView,
        ) -> NSStackViewVisibilityPriority;

        #[method(clippingResistancePriorityForOrientation:)]
        pub unsafe fn clippingResistancePriorityForOrientation(
            &self,
            orientation: NSLayoutConstraintOrientation,
        ) -> NSLayoutPriority;

        #[method(setClippingResistancePriority:forOrientation:)]
        pub unsafe fn setClippingResistancePriority_forOrientation(
            &self,
            clipping_resistance_priority: NSLayoutPriority,
            orientation: NSLayoutConstraintOrientation,
        );

        #[method(huggingPriorityForOrientation:)]
        pub unsafe fn huggingPriorityForOrientation(
            &self,
            orientation: NSLayoutConstraintOrientation,
        ) -> NSLayoutPriority;

        #[method(setHuggingPriority:forOrientation:)]
        pub unsafe fn setHuggingPriority_forOrientation(
            &self,
            hugging_priority: NSLayoutPriority,
            orientation: NSLayoutConstraintOrientation,
        );
    }
);

extern_protocol!(
    pub unsafe trait NSStackViewDelegate: NSObjectProtocol {
        #[cfg(all(
            feature = "AppKit_NSStackView",
            feature = "AppKit_NSView",
            feature = "Foundation_NSArray"
        ))]
        #[optional]
        #[method(stackView:willDetachViews:)]
        unsafe fn stackView_willDetachViews(
            &self,
            stack_view: &NSStackView,
            views: &NSArray<NSView>,
        );

        #[cfg(all(
            feature = "AppKit_NSStackView",
            feature = "AppKit_NSView",
            feature = "Foundation_NSArray"
        ))]
        #[optional]
        #[method(stackView:didReattachViews:)]
        unsafe fn stackView_didReattachViews(
            &self,
            stack_view: &NSStackView,
            views: &NSArray<NSView>,
        );
    }

    unsafe impl ProtocolType for dyn NSStackViewDelegate {}
);

extern_methods!(
    /**
      API that is intended for use when the `distribution` of the receiver is set to `NSStackViewDistributionGravityAreas`.
    */
    /// NSStackViewGravityAreas
    #[cfg(feature = "AppKit_NSStackView")]
    unsafe impl NSStackView {
        #[cfg(feature = "AppKit_NSView")]
        #[method(addView:inGravity:)]
        pub unsafe fn addView_inGravity(&self, view: &NSView, gravity: NSStackViewGravity);

        #[cfg(feature = "AppKit_NSView")]
        #[method(insertView:atIndex:inGravity:)]
        pub unsafe fn insertView_atIndex_inGravity(
            &self,
            view: &NSView,
            index: NSUInteger,
            gravity: NSStackViewGravity,
        );

        #[cfg(feature = "AppKit_NSView")]
        #[method(removeView:)]
        pub unsafe fn removeView(&self, view: &NSView);

        #[cfg(all(feature = "AppKit_NSView", feature = "Foundation_NSArray"))]
        #[method_id(@__retain_semantics Other viewsInGravity:)]
        pub unsafe fn viewsInGravity(&self, gravity: NSStackViewGravity) -> Id<NSArray<NSView>>;

        #[cfg(all(feature = "AppKit_NSView", feature = "Foundation_NSArray"))]
        #[method(setViews:inGravity:)]
        pub unsafe fn setViews_inGravity(
            &self,
            views: &NSArray<NSView>,
            gravity: NSStackViewGravity,
        );

        #[cfg(all(feature = "AppKit_NSView", feature = "Foundation_NSArray"))]
        /**
         Returns an array of all the views managed by this StackView, regardless of detach-status or gravity area.
        This is indexed in the order of indexing within the StackView. Detached views are indexed at the positions they would have been if they were still attached.
        */
        #[method_id(@__retain_semantics Other views)]
        pub unsafe fn views(&self) -> Id<NSArray<NSView>>;
    }
);

extern_methods!(
    /// NSStackViewDeprecated
    #[cfg(feature = "AppKit_NSStackView")]
    unsafe impl NSStackView {
        /**
         Property describing whether or not all spacing between views should be equivalent. Defaults to NO.
        If set to YES, this modifies the constraints used internally for spacing in such manners:
        - All spacing is >= spacing @ NSLayoutPriorityRequired
        - All spacing is == spacing @ huggingPriority
        - All spacing is == each other @ NSLayoutPriorityDefaultLow
        - Custom spacing is ignored. StackView's spacing property is used as the minimum spacing between each view
        */
        #[deprecated = "Set -distribution to NSStackViewDistributionEqualSpacing instead."]
        #[method(hasEqualSpacing)]
        pub unsafe fn hasEqualSpacing(&self) -> bool;

        /**
         Property describing whether or not all spacing between views should be equivalent. Defaults to NO.
        If set to YES, this modifies the constraints used internally for spacing in such manners:
        - All spacing is >= spacing @ NSLayoutPriorityRequired
        - All spacing is == spacing @ huggingPriority
        - All spacing is == each other @ NSLayoutPriorityDefaultLow
        - Custom spacing is ignored. StackView's spacing property is used as the minimum spacing between each view
        */
        #[deprecated = "Set -distribution to NSStackViewDistributionEqualSpacing instead."]
        #[method(setHasEqualSpacing:)]
        pub unsafe fn setHasEqualSpacing(&self, has_equal_spacing: bool);
    }
);

extern_methods!(
    /// Methods declared on superclass `NSView`
    #[cfg(feature = "AppKit_NSStackView")]
    unsafe impl NSStackView {
        #[method_id(@__retain_semantics Init initWithFrame:)]
        pub unsafe fn initWithFrame(this: Option<Allocated<Self>>, frame_rect: NSRect) -> Id<Self>;
    }
);
