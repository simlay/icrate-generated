//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "AppKit_NSTintConfiguration")]
    pub struct NSTintConfiguration;

    #[cfg(feature = "AppKit_NSTintConfiguration")]
    unsafe impl ClassType for NSTintConfiguration {
        type Super = NSObject;
    }
);

#[cfg(feature = "AppKit_NSTintConfiguration")]
unsafe impl NSCoding for NSTintConfiguration {}

#[cfg(feature = "AppKit_NSTintConfiguration")]
unsafe impl NSObjectProtocol for NSTintConfiguration {}

#[cfg(feature = "AppKit_NSTintConfiguration")]
unsafe impl NSSecureCoding for NSTintConfiguration {}

extern_methods!(
    #[cfg(feature = "AppKit_NSTintConfiguration")]
    unsafe impl NSTintConfiguration {
        /**
         Specifies that content should be tinted using the system default for its context.
        For example, a source list icon's default tint matches the active Accent Color.
        */
        #[method_id(@__retain_semantics Other defaultTintConfiguration)]
        pub unsafe fn defaultTintConfiguration() -> Id<NSTintConfiguration>;

        /**
         Specifies that content should prefer a monochrome appearance.
        Monochrome content remains monochrome regardless of the system Accent Color.
        */
        #[method_id(@__retain_semantics Other monochromeTintConfiguration)]
        pub unsafe fn monochromeTintConfiguration() -> Id<NSTintConfiguration>;

        #[cfg(feature = "AppKit_NSColor")]
        #[method_id(@__retain_semantics Other tintConfigurationWithPreferredColor:)]
        pub unsafe fn tintConfigurationWithPreferredColor(color: &NSColor) -> Id<Self>;

        #[cfg(feature = "AppKit_NSColor")]
        #[method_id(@__retain_semantics Other tintConfigurationWithFixedColor:)]
        pub unsafe fn tintConfigurationWithFixedColor(color: &NSColor) -> Id<Self>;

        #[cfg(feature = "AppKit_NSColor")]
        /**
         The base NSColor supplied when creating the tint configuration object. If the receiver wasn't created using a base NSColor, this property returns nil.
        */
        #[method_id(@__retain_semantics Other baseTintColor)]
        pub unsafe fn baseTintColor(&self) -> Option<Id<NSColor>>;

        #[cfg(feature = "AppKit_NSColor")]
        /**
         An equivalent NSColor matching the effective content tint of the receiver. If the receiver can't be represented as a NSColor, this property returns nil.
        */
        #[method_id(@__retain_semantics Other equivalentContentTintColor)]
        pub unsafe fn equivalentContentTintColor(&self) -> Option<Id<NSColor>>;

        /**
         If YES, the tint configuration alters its effect based on the user's preferred Accent Color. Otherwise, the tint configuration produces a constant effect regardless of the Accent Color preference.
        */
        #[method(adaptsToUserAccentColor)]
        pub unsafe fn adaptsToUserAccentColor(&self) -> bool;
    }
);
