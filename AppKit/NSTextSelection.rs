//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

ns_enum!(
    #[underlying(NSInteger)]
    pub enum NSTextSelectionGranularity {
        NSTextSelectionGranularityCharacter = 0,
        NSTextSelectionGranularityWord = 1,
        NSTextSelectionGranularityParagraph = 2,
        NSTextSelectionGranularityLine = 3,
        NSTextSelectionGranularitySentence = 4,
    }
);

ns_enum!(
    #[underlying(NSInteger)]
    pub enum NSTextSelectionAffinity {
        NSTextSelectionAffinityUpstream = 0,
        NSTextSelectionAffinityDownstream = 1,
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "AppKit_NSTextSelection")]
    pub struct NSTextSelection;

    #[cfg(feature = "AppKit_NSTextSelection")]
    unsafe impl ClassType for NSTextSelection {
        type Super = NSObject;
    }
);

#[cfg(feature = "AppKit_NSTextSelection")]
unsafe impl NSCoding for NSTextSelection {}

#[cfg(feature = "AppKit_NSTextSelection")]
unsafe impl NSObjectProtocol for NSTextSelection {}

#[cfg(feature = "AppKit_NSTextSelection")]
unsafe impl NSSecureCoding for NSTextSelection {}

extern_methods!(
    #[cfg(feature = "AppKit_NSTextSelection")]
    unsafe impl NSTextSelection {
        #[cfg(all(feature = "AppKit_NSTextRange", feature = "Foundation_NSArray"))]
        #[method_id(@__retain_semantics Init initWithRanges:affinity:granularity:)]
        pub unsafe fn initWithRanges_affinity_granularity(
            this: Option<Allocated<Self>>,
            text_ranges: &NSArray<NSTextRange>,
            affinity: NSTextSelectionAffinity,
            granularity: NSTextSelectionGranularity,
        ) -> Id<Self>;

        #[cfg(feature = "Foundation_NSCoder")]
        #[method_id(@__retain_semantics Init initWithCoder:)]
        pub unsafe fn initWithCoder(
            this: Option<Allocated<Self>>,
            coder: &NSCoder,
        ) -> Option<Id<Self>>;

        #[cfg(feature = "AppKit_NSTextRange")]
        #[method_id(@__retain_semantics Init initWithRange:affinity:granularity:)]
        pub unsafe fn initWithRange_affinity_granularity(
            this: Option<Allocated<Self>>,
            range: &NSTextRange,
            affinity: NSTextSelectionAffinity,
            granularity: NSTextSelectionGranularity,
        ) -> Id<Self>;

        #[method_id(@__retain_semantics Init initWithLocation:affinity:)]
        pub unsafe fn initWithLocation_affinity(
            this: Option<Allocated<Self>>,
            location: &ProtocolObject<dyn NSTextLocation>,
            affinity: NSTextSelectionAffinity,
        ) -> Id<Self>;

        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

        #[cfg(all(feature = "AppKit_NSTextRange", feature = "Foundation_NSArray"))]
        /**
          Represents an array of disjoint logical ranges in the selection. The array must be logically ordered. When editing, all ranges in a text selection constitute a single insertion point.
        */
        #[method_id(@__retain_semantics Other textRanges)]
        pub unsafe fn textRanges(&self) -> Id<NSArray<NSTextRange>>;

        /**
          The granularity of the selection. NSTextSelectionGranularityByCharacter by default. Extending operations should modify the selection by the granularity.
        */
        #[method(granularity)]
        pub unsafe fn granularity(&self) -> NSTextSelectionGranularity;

        /**
          Either upstream or downstream selection. NSTextSelectionAffinityDownstream by default. For a 0-length selection, it describes the visual location of the text cursor between the head of line containing the selection location (downstream) or tail of the previous line (upstream). For a selection with contents, it describes the logical direction of non-anchored edge of the selection.
        */
        #[method(affinity)]
        pub unsafe fn affinity(&self) -> NSTextSelectionAffinity;

        /**
          Transient text selection during drag handling
        */
        #[method(isTransient)]
        pub unsafe fn isTransient(&self) -> bool;

        /**
          Represents the anchor position offset from the beginning of a line fragment in the visual order for the initial tap or mouse down. That is from the left for a horizontal line fragment and from the top for a vertical. Navigating between lines uses this point when the current line fragment associated with the selection is shorter than the next line visited. 0.0 by default.
        */
        #[method(anchorPositionOffset)]
        pub unsafe fn anchorPositionOffset(&self) -> CGFloat;

        /**
          Represents the anchor position offset from the beginning of a line fragment in the visual order for the initial tap or mouse down. That is from the left for a horizontal line fragment and from the top for a vertical. Navigating between lines uses this point when the current line fragment associated with the selection is shorter than the next line visited. 0.0 by default.
        */
        #[method(setAnchorPositionOffset:)]
        pub unsafe fn setAnchorPositionOffset(&self, anchor_position_offset: CGFloat);

        /**
          Indicates whether the selection should be interpreted as logical or visual.
        */
        #[method(isLogical)]
        pub unsafe fn isLogical(&self) -> bool;

        /**
          Indicates whether the selection should be interpreted as logical or visual.
        */
        #[method(setLogical:)]
        pub unsafe fn setLogical(&self, logical: bool);

        /**
          Specifies the secondary character location when user taps/clicks at a directional boundary. Setting non-nil location has a side effect of making -logical=NO.
        */
        #[method_id(@__retain_semantics Other secondarySelectionLocation)]
        pub unsafe fn secondarySelectionLocation(
            &self,
        ) -> Option<Id<ProtocolObject<dyn NSTextLocation>>>;

        /**
          Specifies the secondary character location when user taps/clicks at a directional boundary. Setting non-nil location has a side effect of making -logical=NO.
        */
        #[method(setSecondarySelectionLocation:)]
        pub unsafe fn setSecondarySelectionLocation(
            &self,
            secondary_selection_location: Option<&ProtocolObject<dyn NSTextLocation>>,
        );

        #[cfg(feature = "Foundation_NSDictionary")]
        /**
          The template attributes used for characters replacing the contents of this selection.
        */
        #[method_id(@__retain_semantics Other typingAttributes)]
        pub unsafe fn typingAttributes(&self) -> Id<NSDictionary<NSAttributedStringKey, Object>>;

        #[cfg(feature = "Foundation_NSDictionary")]
        /**
          The template attributes used for characters replacing the contents of this selection.
        */
        #[method(setTypingAttributes:)]
        pub unsafe fn setTypingAttributes(
            &self,
            typing_attributes: &NSDictionary<NSAttributedStringKey, Object>,
        );

        #[cfg(all(feature = "AppKit_NSTextRange", feature = "Foundation_NSArray"))]
        #[method_id(@__retain_semantics Other textSelectionWithTextRanges:)]
        pub unsafe fn textSelectionWithTextRanges(
            &self,
            text_ranges: &NSArray<NSTextRange>,
        ) -> Id<NSTextSelection>;
    }
);
