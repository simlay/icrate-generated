//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AuthenticationServices::*;
use crate::Foundation::*;

#[cfg(not(any(target_os = "tvos")))]
extern_static!(ASWebAuthenticationSessionErrorDomain: &'static NSErrorDomain);

#[cfg(not(any(target_os = "tvos")))]
ns_error_enum!(
    #[underlying(NSInteger)]
    pub enum ASWebAuthenticationSessionErrorCode {
        #[cfg(not(any(target_os = "tvos")))]
        ASWebAuthenticationSessionErrorCodeCanceledLogin = 1,
        #[cfg(not(any(target_os = "watchos")))]
        ASWebAuthenticationSessionErrorCodePresentationContextNotProvided = 2,
        #[cfg(not(any(target_os = "watchos")))]
        ASWebAuthenticationSessionErrorCodePresentationContextInvalid = 3,
    }
);

pub type ASWebAuthenticationSessionCompletionHandler = *mut Block<(*mut NSURL, *mut NSError), ()>;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "AuthenticationServices_ASWebAuthenticationSession")]
    #[cfg(not(any(target_os = "tvos")))]
    pub struct ASWebAuthenticationSession;

    #[cfg(not(any(target_os = "tvos")))]
    #[cfg(feature = "AuthenticationServices_ASWebAuthenticationSession")]
    unsafe impl ClassType for ASWebAuthenticationSession {
        type Super = NSObject;
        type Mutability = InteriorMutable;
    }
);

#[cfg(feature = "AuthenticationServices_ASWebAuthenticationSession")]
#[cfg(not(any(target_os = "tvos")))]
unsafe impl NSObjectProtocol for ASWebAuthenticationSession {}

#[cfg(not(any(target_os = "tvos")))]
extern_methods!(
    #[cfg(feature = "AuthenticationServices_ASWebAuthenticationSession")]
    #[cfg(not(any(target_os = "tvos")))]
    unsafe impl ASWebAuthenticationSession {
        #[cfg(all(feature = "Foundation_NSString", feature = "Foundation_NSURL"))]
        #[method_id(@__retain_semantics Init initWithURL:callbackURLScheme:completionHandler:)]
        pub unsafe fn initWithURL_callbackURLScheme_completionHandler(
            this: Option<Allocated<Self>>,
            url: &NSURL,
            callback_url_scheme: Option<&NSString>,
            completion_handler: ASWebAuthenticationSessionCompletionHandler,
        ) -> Id<Self>;

        #[cfg(not(any(target_os = "watchos")))]
        #[method_id(@__retain_semantics Other presentationContextProvider)]
        pub unsafe fn presentationContextProvider(
            &self,
        ) -> Option<Id<ProtocolObject<dyn ASWebAuthenticationPresentationContextProviding>>>;

        #[cfg(not(any(target_os = "watchos")))]
        #[method(setPresentationContextProvider:)]
        pub unsafe fn setPresentationContextProvider(
            &self,
            presentation_context_provider: Option<
                &ProtocolObject<dyn ASWebAuthenticationPresentationContextProviding>,
            >,
        );

        #[method(prefersEphemeralWebBrowserSession)]
        pub unsafe fn prefersEphemeralWebBrowserSession(&self) -> bool;

        #[method(setPrefersEphemeralWebBrowserSession:)]
        pub unsafe fn setPrefersEphemeralWebBrowserSession(
            &self,
            prefers_ephemeral_web_browser_session: bool,
        );

        #[method(canStart)]
        pub unsafe fn canStart(&self) -> bool;

        #[method(start)]
        pub unsafe fn start(&self) -> bool;

        #[method(cancel)]
        pub unsafe fn cancel(&self);

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Id<Self>;

        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;
    }
);

#[cfg(not(any(target_os = "tvos", target_os = "watchos")))]
extern_protocol!(
    pub unsafe trait ASWebAuthenticationPresentationContextProviding:
        NSObjectProtocol
    {
        #[cfg(feature = "AuthenticationServices_ASWebAuthenticationSession")]
        #[cfg(not(any(target_os = "tvos", target_os = "watchos")))]
        #[method_id(@__retain_semantics Other presentationAnchorForWebAuthenticationSession:)]
        unsafe fn presentationAnchorForWebAuthenticationSession(
            &self,
            session: &ASWebAuthenticationSession,
        ) -> Id<ASPresentationAnchor>;
    }

    unsafe impl ProtocolType for dyn ASWebAuthenticationPresentationContextProviding {}
);
