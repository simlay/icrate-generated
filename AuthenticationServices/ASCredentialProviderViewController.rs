//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AuthenticationServices::*;
use crate::Foundation::*;

extern_methods!(
    #[cfg(feature = "AuthenticationServices_ASCredentialProviderViewController")]
    #[cfg(not(any(target_os = "tvos", target_os = "watchos")))]
    unsafe impl ASCredentialProviderViewController {
        #[cfg(not(any(target_os = "tvos", target_os = "watchos")))]
        #[cfg(feature = "AuthenticationServices_ASCredentialProviderExtensionContext")]
        #[method_id(@__retain_semantics Other extensionContext)]
        pub unsafe fn extensionContext(&self) -> Id<ASCredentialProviderExtensionContext>;

        #[cfg(not(any(target_os = "tvos", target_os = "watchos")))]
        #[cfg(all(
            feature = "AuthenticationServices_ASCredentialServiceIdentifier",
            feature = "Foundation_NSArray"
        ))]
        #[method(prepareCredentialListForServiceIdentifiers:)]
        pub unsafe fn prepareCredentialListForServiceIdentifiers(
            &self,
            service_identifiers: &NSArray<ASCredentialServiceIdentifier>,
        );

        #[cfg(not(any(target_os = "tvos", target_os = "watchos")))]
        #[cfg(feature = "AuthenticationServices_ASPasswordCredentialIdentity")]
        #[method(provideCredentialWithoutUserInteractionForIdentity:)]
        pub unsafe fn provideCredentialWithoutUserInteractionForIdentity(
            &self,
            credential_identity: &ASPasswordCredentialIdentity,
        );

        #[cfg(not(any(target_os = "tvos", target_os = "watchos")))]
        #[cfg(feature = "AuthenticationServices_ASPasswordCredentialIdentity")]
        #[method(prepareInterfaceToProvideCredentialForIdentity:)]
        pub unsafe fn prepareInterfaceToProvideCredentialForIdentity(
            &self,
            credential_identity: &ASPasswordCredentialIdentity,
        );

        #[cfg(not(any(target_os = "tvos", target_os = "watchos")))]
        #[method(prepareInterfaceForExtensionConfiguration)]
        pub unsafe fn prepareInterfaceForExtensionConfiguration(&self);
    }
);
