//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AuthenticationServices::*;
use crate::Foundation::*;

extern_static!(ASCredentialIdentityStoreErrorDomain: &'static NSErrorDomain);

ns_error_enum!(
    #[underlying(NSInteger)]
    /**
      @enum ASCredentialIdentityStoreErrorCode
    @constant ASCredentialIdentityStoreErrorCodeInternalError The operation failed due to an internal error.
    @constant ASCredentialIdentityStoreErrorCodeStoreDisabled The operation failed because the credential identity store is disabled.
    @constant ASCredentialIdentityStoreErrorCodeStoreBusy The operation failed because the credential identity store is busy. Attempt the operation again at a later time.
    */
    pub enum ASCredentialIdentityStoreErrorCode {
        ASCredentialIdentityStoreErrorCodeInternalError = 0,
        ASCredentialIdentityStoreErrorCodeStoreDisabled = 1,
        ASCredentialIdentityStoreErrorCodeStoreBusy = 2,
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "AuthenticationServices_ASCredentialIdentityStore")]
    pub struct ASCredentialIdentityStore;

    #[cfg(feature = "AuthenticationServices_ASCredentialIdentityStore")]
    unsafe impl ClassType for ASCredentialIdentityStore {
        type Super = NSObject;
    }
);

#[cfg(feature = "AuthenticationServices_ASCredentialIdentityStore")]
unsafe impl NSObjectProtocol for ASCredentialIdentityStore {}

extern_methods!(
    #[cfg(feature = "AuthenticationServices_ASCredentialIdentityStore")]
    unsafe impl ASCredentialIdentityStore {
        #[method_id(@__retain_semantics Other sharedStore)]
        pub unsafe fn sharedStore() -> Id<ASCredentialIdentityStore>;

        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

        #[cfg(feature = "AuthenticationServices_ASCredentialIdentityStoreState")]
        #[method(getCredentialIdentityStoreStateWithCompletion:)]
        pub unsafe fn getCredentialIdentityStoreStateWithCompletion(
            &self,
            completion: &Block<(NonNull<ASCredentialIdentityStoreState>,), ()>,
        );

        #[cfg(all(
            feature = "AuthenticationServices_ASPasswordCredentialIdentity",
            feature = "Foundation_NSArray",
            feature = "Foundation_NSError"
        ))]
        #[method(saveCredentialIdentities:completion:)]
        pub unsafe fn saveCredentialIdentities_completion(
            &self,
            credential_identities: &NSArray<ASPasswordCredentialIdentity>,
            completion: Option<&Block<(Bool, *mut NSError), ()>>,
        );

        #[cfg(all(
            feature = "AuthenticationServices_ASPasswordCredentialIdentity",
            feature = "Foundation_NSArray",
            feature = "Foundation_NSError"
        ))]
        #[method(removeCredentialIdentities:completion:)]
        pub unsafe fn removeCredentialIdentities_completion(
            &self,
            credential_identities: &NSArray<ASPasswordCredentialIdentity>,
            completion: Option<&Block<(Bool, *mut NSError), ()>>,
        );

        #[cfg(feature = "Foundation_NSError")]
        #[method(removeAllCredentialIdentitiesWithCompletion:)]
        pub unsafe fn removeAllCredentialIdentitiesWithCompletion(
            &self,
            completion: Option<&Block<(Bool, *mut NSError), ()>>,
        );

        #[cfg(all(
            feature = "AuthenticationServices_ASPasswordCredentialIdentity",
            feature = "Foundation_NSArray",
            feature = "Foundation_NSError"
        ))]
        #[method(replaceCredentialIdentitiesWithIdentities:completion:)]
        pub unsafe fn replaceCredentialIdentitiesWithIdentities_completion(
            &self,
            new_credential_identities: &NSArray<ASPasswordCredentialIdentity>,
            completion: Option<&Block<(Bool, *mut NSError), ()>>,
        );
    }
);
