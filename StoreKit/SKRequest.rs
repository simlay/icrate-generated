//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::Foundation::*;
use crate::StoreKit::*;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "StoreKit_SKRequest")]
    /**
      Base class used to fetch data from the store.  Should not be used directly.
    */
    pub struct SKRequest;

    #[cfg(feature = "StoreKit_SKRequest")]
    unsafe impl ClassType for SKRequest {
        type Super = NSObject;
    }
);

#[cfg(feature = "StoreKit_SKRequest")]
/**
  Base class used to fetch data from the store.  Should not be used directly.
*/
unsafe impl NSObjectProtocol for SKRequest {}

extern_methods!(
    /**
      Base class used to fetch data from the store.  Should not be used directly.
    */
    #[cfg(feature = "StoreKit_SKRequest")]
    unsafe impl SKRequest {
        #[method_id(@__retain_semantics Other delegate)]
        pub unsafe fn delegate(&self) -> Option<Id<ProtocolObject<dyn SKRequestDelegate>>>;

        #[method(setDelegate:)]
        pub unsafe fn setDelegate(&self, delegate: Option<&ProtocolObject<dyn SKRequestDelegate>>);

        #[method(cancel)]
        pub unsafe fn cancel(&self);

        #[method(start)]
        pub unsafe fn start(&self);
    }
);

extern_protocol!(
    pub unsafe trait SKRequestDelegate: NSObjectProtocol {
        #[cfg(feature = "StoreKit_SKRequest")]
        #[optional]
        #[method(requestDidFinish:)]
        unsafe fn requestDidFinish(&self, request: &SKRequest);

        #[cfg(all(feature = "Foundation_NSError", feature = "StoreKit_SKRequest"))]
        #[optional]
        #[method(request:didFailWithError:)]
        unsafe fn request_didFailWithError(&self, request: &SKRequest, error: &NSError);
    }

    unsafe impl ProtocolType for dyn SKRequestDelegate {}
);
