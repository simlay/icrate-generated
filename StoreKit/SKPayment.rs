//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::Foundation::*;
use crate::StoreKit::*;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "StoreKit_SKPayment")]
    pub struct SKPayment;

    #[cfg(feature = "StoreKit_SKPayment")]
    unsafe impl ClassType for SKPayment {
        type Super = NSObject;
    }
);

#[cfg(feature = "StoreKit_SKPayment")]
unsafe impl NSObjectProtocol for SKPayment {}

extern_methods!(
    #[cfg(feature = "StoreKit_SKPayment")]
    unsafe impl SKPayment {
        #[cfg(feature = "StoreKit_SKProduct")]
        #[method_id(@__retain_semantics Other paymentWithProduct:)]
        pub unsafe fn paymentWithProduct(product: &SKProduct) -> Id<Self>;

        #[cfg(feature = "Foundation_NSString")]
        #[deprecated]
        #[method_id(@__retain_semantics Other paymentWithProductIdentifier:)]
        pub unsafe fn paymentWithProductIdentifier(identifier: &NSString) -> Id<Object>;

        #[cfg(feature = "Foundation_NSString")]
        /**
          Identifier agreed upon with the store.  Required.
        */
        #[method_id(@__retain_semantics Other productIdentifier)]
        pub unsafe fn productIdentifier(&self) -> Id<NSString>;

        #[cfg(feature = "Foundation_NSData")]
        /**
          Payment request data agreed upon with the store.  Optional.
        */
        #[method_id(@__retain_semantics Other requestData)]
        pub unsafe fn requestData(&self) -> Option<Id<NSData>>;

        /**
          default: 1.  Must be at least 1.
        */
        #[method(quantity)]
        pub unsafe fn quantity(&self) -> NSInteger;

        #[cfg(feature = "Foundation_NSString")]
        /**
          Application-specific user identifier.  Optional.
        */
        #[method_id(@__retain_semantics Other applicationUsername)]
        pub unsafe fn applicationUsername(&self) -> Option<Id<NSString>>;

        /**
          Force an "ask to buy" flow for this payment, in the sandbox
        */
        #[method(simulatesAskToBuyInSandbox)]
        pub unsafe fn simulatesAskToBuyInSandbox(&self) -> bool;

        #[cfg(feature = "StoreKit_SKPaymentDiscount")]
        /**
          The relevant data for specifying a discount to be applied to this payment. Optional.
        */
        #[method_id(@__retain_semantics Other paymentDiscount)]
        pub unsafe fn paymentDiscount(&self) -> Option<Id<SKPaymentDiscount>>;
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "StoreKit_SKMutablePayment")]
    pub struct SKMutablePayment;

    #[cfg(feature = "StoreKit_SKMutablePayment")]
    unsafe impl ClassType for SKMutablePayment {
        #[inherits(NSObject)]
        type Super = SKPayment;
    }
);

#[cfg(feature = "StoreKit_SKMutablePayment")]
unsafe impl NSObjectProtocol for SKMutablePayment {}

extern_methods!(
    #[cfg(feature = "StoreKit_SKMutablePayment")]
    unsafe impl SKMutablePayment {
        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other applicationUsername)]
        pub unsafe fn applicationUsername(&self) -> Option<Id<NSString>>;

        #[cfg(feature = "Foundation_NSString")]
        #[method(setApplicationUsername:)]
        pub unsafe fn setApplicationUsername(&self, application_username: Option<&NSString>);

        #[cfg(feature = "StoreKit_SKPaymentDiscount")]
        #[method_id(@__retain_semantics Other paymentDiscount)]
        pub unsafe fn paymentDiscount(&self) -> Option<Id<SKPaymentDiscount>>;

        #[cfg(feature = "StoreKit_SKPaymentDiscount")]
        #[method(setPaymentDiscount:)]
        pub unsafe fn setPaymentDiscount(&self, payment_discount: Option<&SKPaymentDiscount>);

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other productIdentifier)]
        pub unsafe fn productIdentifier(&self) -> Id<NSString>;

        #[cfg(feature = "Foundation_NSString")]
        #[method(setProductIdentifier:)]
        pub unsafe fn setProductIdentifier(&self, product_identifier: &NSString);

        #[method(quantity)]
        pub unsafe fn quantity(&self) -> NSInteger;

        #[method(setQuantity:)]
        pub unsafe fn setQuantity(&self, quantity: NSInteger);

        #[cfg(feature = "Foundation_NSData")]
        #[method_id(@__retain_semantics Other requestData)]
        pub unsafe fn requestData(&self) -> Option<Id<NSData>>;

        #[cfg(feature = "Foundation_NSData")]
        #[method(setRequestData:)]
        pub unsafe fn setRequestData(&self, request_data: Option<&NSData>);

        #[method(simulatesAskToBuyInSandbox)]
        pub unsafe fn simulatesAskToBuyInSandbox(&self) -> bool;

        #[method(setSimulatesAskToBuyInSandbox:)]
        pub unsafe fn setSimulatesAskToBuyInSandbox(&self, simulates_ask_to_buy_in_sandbox: bool);
    }
);

extern_methods!(
    /// Methods declared on superclass `SKPayment`
    #[cfg(feature = "StoreKit_SKMutablePayment")]
    unsafe impl SKMutablePayment {
        #[cfg(feature = "StoreKit_SKProduct")]
        #[method_id(@__retain_semantics Other paymentWithProduct:)]
        pub unsafe fn paymentWithProduct(product: &SKProduct) -> Id<Self>;
    }
);
