//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Accessibility::*;
use crate::Foundation::*;

ns_enum!(
    #[underlying(NSUInteger)]
    /**
      If an object combines a significant amount of content into one label that is not always pertinent,
    using the accessibilityCustomContent method below provides an alternative way to deliver content to the user.

    For example, in a photos app, you may want the user to know the date, time, orientation, and shutter speed of a photo.
    However, that information may not always be necessary to the user. Using the AXCustomContentProvider protocol
    allows the user to experience the content in a more appropriate manner for that assistive technology.
    */
    pub enum AXCustomContentImportance {
        AXCustomContentImportanceDefault = 0,
        AXCustomContentImportanceHigh = 1,
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "Accessibility_AXCustomContent")]
    pub struct AXCustomContent;

    #[cfg(feature = "Accessibility_AXCustomContent")]
    unsafe impl ClassType for AXCustomContent {
        type Super = NSObject;
    }
);

#[cfg(feature = "Accessibility_AXCustomContent")]
unsafe impl NSCoding for AXCustomContent {}

#[cfg(feature = "Accessibility_AXCustomContent")]
unsafe impl NSObjectProtocol for AXCustomContent {}

#[cfg(feature = "Accessibility_AXCustomContent")]
unsafe impl NSSecureCoding for AXCustomContent {}

extern_methods!(
    #[cfg(feature = "Accessibility_AXCustomContent")]
    unsafe impl AXCustomContent {
        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other customContentWithLabel:value:)]
        pub unsafe fn customContentWithLabel_value(label: &NSString, value: &NSString) -> Id<Self>;

        #[cfg(feature = "Foundation_NSAttributedString")]
        #[method_id(@__retain_semantics Other customContentWithAttributedLabel:attributedValue:)]
        pub unsafe fn customContentWithAttributedLabel_attributedValue(
            label: &NSAttributedString,
            value: &NSAttributedString,
        ) -> Id<Self>;

        #[cfg(feature = "Foundation_NSString")]
        /**
          A localized string that describes how to name this content.
         For example, 'Orientation' would be an appropriate name used for photo information.
        */
        #[method_id(@__retain_semantics Other label)]
        pub unsafe fn label(&self) -> Id<NSString>;

        #[cfg(feature = "Foundation_NSAttributedString")]
        #[method_id(@__retain_semantics Other attributedLabel)]
        pub unsafe fn attributedLabel(&self) -> Id<NSAttributedString>;

        #[cfg(feature = "Foundation_NSString")]
        /**
          A localized string that describes the content.
         For example, 'Portrait' or 'Landscape' would be an appropriate content value for 'Orientation.'
        */
        #[method_id(@__retain_semantics Other value)]
        pub unsafe fn value(&self) -> Id<NSString>;

        #[cfg(feature = "Foundation_NSAttributedString")]
        #[method_id(@__retain_semantics Other attributedValue)]
        pub unsafe fn attributedValue(&self) -> Id<NSAttributedString>;

        /**
          Changing this property allows the user to choose when they experience this content, based on preference.
         For example, this content may be spoken all the time, or only in a "verbose" mode.
         Default: AXCustomContentImportanceDefault
        */
        #[method(importance)]
        pub unsafe fn importance(&self) -> AXCustomContentImportance;

        /**
          Changing this property allows the user to choose when they experience this content, based on preference.
         For example, this content may be spoken all the time, or only in a "verbose" mode.
         Default: AXCustomContentImportanceDefault
        */
        #[method(setImportance:)]
        pub unsafe fn setImportance(&self, importance: AXCustomContentImportance);

        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Id<Self>;
    }
);

extern_protocol!(
    pub unsafe trait AXCustomContentProvider: NSObjectProtocol {
        #[cfg(all(
            feature = "Accessibility_AXCustomContent",
            feature = "Foundation_NSArray"
        ))]
        #[method_id(@__retain_semantics Other accessibilityCustomContent)]
        unsafe fn accessibilityCustomContent(&self) -> Id<NSArray<AXCustomContent>>;

        #[cfg(all(
            feature = "Accessibility_AXCustomContent",
            feature = "Foundation_NSArray"
        ))]
        #[method(setAccessibilityCustomContent:)]
        unsafe fn setAccessibilityCustomContent(
            &self,
            accessibility_custom_content: Option<&NSArray<AXCustomContent>>,
        );
    }

    unsafe impl ProtocolType for dyn AXCustomContentProvider {}
);
