//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::Contacts::*;
use crate::CoreLocation::*;
use crate::Foundation::*;
use crate::MapKit::*;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "MapKit_MKOverlayPathRenderer")]
    pub struct MKOverlayPathRenderer;

    #[cfg(feature = "MapKit_MKOverlayPathRenderer")]
    unsafe impl ClassType for MKOverlayPathRenderer {
        #[inherits(NSObject)]
        type Super = MKOverlayRenderer;
    }
);

#[cfg(feature = "MapKit_MKOverlayPathRenderer")]
unsafe impl NSObjectProtocol for MKOverlayPathRenderer {}

extern_methods!(
    #[cfg(feature = "MapKit_MKOverlayPathRenderer")]
    unsafe impl MKOverlayPathRenderer {
        #[cfg(feature = "AppKit_NSColor")]
        #[method_id(@__retain_semantics Other fillColor)]
        pub unsafe fn fillColor(&self) -> Option<Id<NSColor>>;

        #[cfg(feature = "AppKit_NSColor")]
        #[method(setFillColor:)]
        pub unsafe fn setFillColor(&self, fill_color: Option<&NSColor>);

        #[cfg(feature = "AppKit_NSColor")]
        #[method_id(@__retain_semantics Other strokeColor)]
        pub unsafe fn strokeColor(&self) -> Option<Id<NSColor>>;

        #[cfg(feature = "AppKit_NSColor")]
        #[method(setStrokeColor:)]
        pub unsafe fn setStrokeColor(&self, stroke_color: Option<&NSColor>);

        /**
          defaults to 0, which is MKRoadWidthAtZoomScale(currentZoomScale)
        */
        #[method(lineWidth)]
        pub unsafe fn lineWidth(&self) -> CGFloat;

        /**
          defaults to 0, which is MKRoadWidthAtZoomScale(currentZoomScale)
        */
        #[method(setLineWidth:)]
        pub unsafe fn setLineWidth(&self, line_width: CGFloat);

        /**
          defaults to 10
        */
        #[method(miterLimit)]
        pub unsafe fn miterLimit(&self) -> CGFloat;

        /**
          defaults to 10
        */
        #[method(setMiterLimit:)]
        pub unsafe fn setMiterLimit(&self, miter_limit: CGFloat);

        /**
          defaults to 0
        */
        #[method(lineDashPhase)]
        pub unsafe fn lineDashPhase(&self) -> CGFloat;

        /**
          defaults to 0
        */
        #[method(setLineDashPhase:)]
        pub unsafe fn setLineDashPhase(&self, line_dash_phase: CGFloat);

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSNumber"))]
        /**
          defaults to nil
        */
        #[method_id(@__retain_semantics Other lineDashPattern)]
        pub unsafe fn lineDashPattern(&self) -> Option<Id<NSArray<NSNumber>>>;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSNumber"))]
        /**
          defaults to nil
        */
        #[method(setLineDashPattern:)]
        pub unsafe fn setLineDashPattern(&self, line_dash_pattern: Option<&NSArray<NSNumber>>);

        /**
         For renderers which support vector drawing, controls whether the overlay is rendered
        as a bitmap when being composited with the map.

        When false (the default), the overlay will be rendered as vector geometry whenever possible.
        Note that certain geometry or configurations may force rasterization even when the value
        of this property is false.
        */
        #[method(shouldRasterize)]
        pub unsafe fn shouldRasterize(&self) -> bool;

        /**
         For renderers which support vector drawing, controls whether the overlay is rendered
        as a bitmap when being composited with the map.

        When false (the default), the overlay will be rendered as vector geometry whenever possible.
        Note that certain geometry or configurations may force rasterization even when the value
        of this property is false.
        */
        #[method(setShouldRasterize:)]
        pub unsafe fn setShouldRasterize(&self, should_rasterize: bool);

        #[method(createPath)]
        pub unsafe fn createPath(&self);

        #[method(invalidatePath)]
        pub unsafe fn invalidatePath(&self);
    }
);

extern_methods!(
    /// Methods declared on superclass `MKOverlayRenderer`
    #[cfg(feature = "MapKit_MKOverlayPathRenderer")]
    unsafe impl MKOverlayPathRenderer {
        #[method_id(@__retain_semantics Init initWithOverlay:)]
        pub unsafe fn initWithOverlay(
            this: Option<Allocated<Self>>,
            overlay: &ProtocolObject<dyn MKOverlay>,
        ) -> Id<Self>;
    }
);
