//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::Contacts::*;
use crate::CoreLocation::*;
use crate::Foundation::*;
use crate::MapKit::*;

#[cfg(not(any(target_os = "watchos")))]
ns_options!(
    #[underlying(NSUInteger)]
    pub enum MKLocalSearchResultType {
        #[cfg(not(any(target_os = "watchos")))]
        MKLocalSearchResultTypeAddress = 1 << 0,
        #[cfg(not(any(target_os = "watchos")))]
        MKLocalSearchResultTypePointOfInterest = 1 << 1,
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "MapKit_MKLocalSearchRequest")]
    #[cfg(not(any(target_os = "watchos")))]
    pub struct MKLocalSearchRequest;

    #[cfg(not(any(target_os = "watchos")))]
    #[cfg(feature = "MapKit_MKLocalSearchRequest")]
    unsafe impl ClassType for MKLocalSearchRequest {
        type Super = NSObject;
    }
);

#[cfg(feature = "MapKit_MKLocalSearchRequest")]
#[cfg(not(any(target_os = "watchos")))]
unsafe impl NSObjectProtocol for MKLocalSearchRequest {}

#[cfg(not(any(target_os = "watchos")))]
extern_methods!(
    #[cfg(feature = "MapKit_MKLocalSearchRequest")]
    unsafe impl MKLocalSearchRequest {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

        #[cfg(feature = "Foundation_NSString")]
        #[cfg(not(any(target_os = "watchos")))]
        #[method_id(@__retain_semantics Init initWithNaturalLanguageQuery:)]
        pub unsafe fn initWithNaturalLanguageQuery(
            this: Option<Allocated<Self>>,
            natural_language_query: &NSString,
        ) -> Id<Self>;

        #[cfg(feature = "Foundation_NSString")]
        #[cfg(not(any(target_os = "watchos")))]
        #[method_id(@__retain_semantics Init initWithNaturalLanguageQuery:region:)]
        pub unsafe fn initWithNaturalLanguageQuery_region(
            this: Option<Allocated<Self>>,
            natural_language_query: &NSString,
            region: MKCoordinateRegion,
        ) -> Id<Self>;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other naturalLanguageQuery)]
        pub unsafe fn naturalLanguageQuery(&self) -> Option<Id<NSString>>;

        #[cfg(feature = "Foundation_NSString")]
        #[method(setNaturalLanguageQuery:)]
        pub unsafe fn setNaturalLanguageQuery(&self, natural_language_query: Option<&NSString>);

        #[method(region)]
        pub unsafe fn region(&self) -> MKCoordinateRegion;

        #[method(setRegion:)]
        pub unsafe fn setRegion(&self, region: MKCoordinateRegion);

        #[cfg(not(any(target_os = "watchos")))]
        #[method(resultTypes)]
        pub unsafe fn resultTypes(&self) -> MKLocalSearchResultType;

        #[cfg(not(any(target_os = "watchos")))]
        #[method(setResultTypes:)]
        pub unsafe fn setResultTypes(&self, result_types: MKLocalSearchResultType);

        #[cfg(feature = "MapKit_MKPointOfInterestFilter")]
        #[cfg(not(any(target_os = "watchos")))]
        #[method_id(@__retain_semantics Other pointOfInterestFilter)]
        pub unsafe fn pointOfInterestFilter(&self) -> Option<Id<MKPointOfInterestFilter>>;

        #[cfg(feature = "MapKit_MKPointOfInterestFilter")]
        #[cfg(not(any(target_os = "watchos")))]
        #[method(setPointOfInterestFilter:)]
        pub unsafe fn setPointOfInterestFilter(
            &self,
            point_of_interest_filter: Option<&MKPointOfInterestFilter>,
        );
    }
);
