//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;

ns_enum!(
    #[underlying(NSUInteger)]
    /**
     @enum NSURLCacheStoragePolicy

    @discussion The NSURLCacheStoragePolicy enum defines constants that
    can be used to specify the type of storage that is allowable for an
    NSCachedURLResponse object that is to be stored in an NSURLCache.

    @constant NSURLCacheStorageAllowed Specifies that storage in an
    NSURLCache is allowed without restriction.

    @constant NSURLCacheStorageAllowedInMemoryOnly Specifies that
    storage in an NSURLCache is allowed; however storage should be
    done in memory only, no disk storage should be done.

    @constant NSURLCacheStorageNotAllowed Specifies that storage in an
    NSURLCache is not allowed in any fashion, either in memory or on
    disk.
    */
    pub enum NSURLCacheStoragePolicy {
        NSURLCacheStorageAllowed = 0,
        NSURLCacheStorageAllowedInMemoryOnly = 1,
        NSURLCacheStorageNotAllowed = 2,
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "Foundation_NSCachedURLResponse")]
    /**
     @class NSCachedURLResponse
    NSCachedURLResponse is a class whose objects functions as a wrapper for
    objects that are stored in the framework's caching system.
    It is used to maintain characteristics and attributes of a cached
    object.
    */
    pub struct NSCachedURLResponse;

    #[cfg(feature = "Foundation_NSCachedURLResponse")]
    unsafe impl ClassType for NSCachedURLResponse {
        type Super = NSObject;
    }
);

#[cfg(feature = "Foundation_NSCachedURLResponse")]
/**
 @class NSCachedURLResponse
NSCachedURLResponse is a class whose objects functions as a wrapper for
objects that are stored in the framework's caching system.
It is used to maintain characteristics and attributes of a cached
object.
*/
unsafe impl NSCoding for NSCachedURLResponse {}

#[cfg(feature = "Foundation_NSCachedURLResponse")]
/**
 @class NSCachedURLResponse
NSCachedURLResponse is a class whose objects functions as a wrapper for
objects that are stored in the framework's caching system.
It is used to maintain characteristics and attributes of a cached
object.
*/
unsafe impl NSObjectProtocol for NSCachedURLResponse {}

#[cfg(feature = "Foundation_NSCachedURLResponse")]
/**
 @class NSCachedURLResponse
NSCachedURLResponse is a class whose objects functions as a wrapper for
objects that are stored in the framework's caching system.
It is used to maintain characteristics and attributes of a cached
object.
*/
unsafe impl NSSecureCoding for NSCachedURLResponse {}

extern_methods!(
    /**
     @class NSCachedURLResponse
    NSCachedURLResponse is a class whose objects functions as a wrapper for
    objects that are stored in the framework's caching system.
    It is used to maintain characteristics and attributes of a cached
    object.
    */
    #[cfg(feature = "Foundation_NSCachedURLResponse")]
    unsafe impl NSCachedURLResponse {
        #[cfg(all(feature = "Foundation_NSData", feature = "Foundation_NSURLResponse"))]
        #[method_id(@__retain_semantics Init initWithResponse:data:)]
        pub unsafe fn initWithResponse_data(
            this: Option<Allocated<Self>>,
            response: &NSURLResponse,
            data: &NSData,
        ) -> Id<Self>;

        #[cfg(all(
            feature = "Foundation_NSData",
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSURLResponse"
        ))]
        #[method_id(@__retain_semantics Init initWithResponse:data:userInfo:storagePolicy:)]
        pub unsafe fn initWithResponse_data_userInfo_storagePolicy(
            this: Option<Allocated<Self>>,
            response: &NSURLResponse,
            data: &NSData,
            user_info: Option<&NSDictionary>,
            storage_policy: NSURLCacheStoragePolicy,
        ) -> Id<Self>;

        #[cfg(feature = "Foundation_NSURLResponse")]
        /**
         @abstract Returns the response wrapped by this instance.
        @result The response wrapped by this instance.
        */
        #[method_id(@__retain_semantics Other response)]
        pub unsafe fn response(&self) -> Id<NSURLResponse>;

        #[cfg(feature = "Foundation_NSData")]
        /**
         @abstract Returns the data of the receiver.
        @result The data of the receiver.
        */
        #[method_id(@__retain_semantics Other data)]
        pub unsafe fn data(&self) -> Id<NSData>;

        #[cfg(feature = "Foundation_NSDictionary")]
        /**
         @abstract Returns the userInfo dictionary of the receiver.
        @result The userInfo dictionary of the receiver.
        */
        #[method_id(@__retain_semantics Other userInfo)]
        pub unsafe fn userInfo(&self) -> Option<Id<NSDictionary>>;

        /**
         @abstract Returns the NSURLCacheStoragePolicy constant of the receiver.
        @result The NSURLCacheStoragePolicy constant of the receiver.
        */
        #[method(storagePolicy)]
        pub unsafe fn storagePolicy(&self) -> NSURLCacheStoragePolicy;
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "Foundation_NSURLCache")]
    pub struct NSURLCache;

    #[cfg(feature = "Foundation_NSURLCache")]
    unsafe impl ClassType for NSURLCache {
        type Super = NSObject;
    }
);

#[cfg(feature = "Foundation_NSURLCache")]
unsafe impl NSObjectProtocol for NSURLCache {}

extern_methods!(
    #[cfg(feature = "Foundation_NSURLCache")]
    unsafe impl NSURLCache {
        /**
         @property sharedURLCache
        @abstract Returns the shared NSURLCache instance or
        sets the NSURLCache instance shared by all clients of
        the current process. This will be the new object returned when
        calls to the <tt>sharedURLCache</tt> method are made.
        @discussion Unless set explicitly through a call to
        <tt>+setSharedURLCache:</tt>, this method returns an NSURLCache
        instance created with the following default values:
        <ul>
        <li>Memory capacity: 4 megabytes (4 * 1024 * 1024 bytes)
        <li>Disk capacity: 20 megabytes (20 * 1024 * 1024 bytes)
        <li>Disk path: <nobr>(user home directory)/Library/Caches/(application bundle id)</nobr>
        </ul>
        <p>Users who do not have special caching requirements or
        constraints should find the default shared cache instance
        acceptable. If this default shared cache instance is not
        acceptable, <tt>+setSharedURLCache:</tt> can be called to set a
        different NSURLCache instance to be returned from this method.
        Callers should take care to ensure that the setter is called
        at a time when no other caller has a reference to the previously-set
        shared URL cache. This is to prevent storing cache data from
        becoming unexpectedly unretrievable.
        @result the shared NSURLCache instance.
        */
        #[method_id(@__retain_semantics Other sharedURLCache)]
        pub unsafe fn sharedURLCache() -> Id<NSURLCache>;

        /**
         @property sharedURLCache
        @abstract Returns the shared NSURLCache instance or
        sets the NSURLCache instance shared by all clients of
        the current process. This will be the new object returned when
        calls to the <tt>sharedURLCache</tt> method are made.
        @discussion Unless set explicitly through a call to
        <tt>+setSharedURLCache:</tt>, this method returns an NSURLCache
        instance created with the following default values:
        <ul>
        <li>Memory capacity: 4 megabytes (4 * 1024 * 1024 bytes)
        <li>Disk capacity: 20 megabytes (20 * 1024 * 1024 bytes)
        <li>Disk path: <nobr>(user home directory)/Library/Caches/(application bundle id)</nobr>
        </ul>
        <p>Users who do not have special caching requirements or
        constraints should find the default shared cache instance
        acceptable. If this default shared cache instance is not
        acceptable, <tt>+setSharedURLCache:</tt> can be called to set a
        different NSURLCache instance to be returned from this method.
        Callers should take care to ensure that the setter is called
        at a time when no other caller has a reference to the previously-set
        shared URL cache. This is to prevent storing cache data from
        becoming unexpectedly unretrievable.
        @result the shared NSURLCache instance.
        */
        #[method(setSharedURLCache:)]
        pub unsafe fn setSharedURLCache(shared_url_cache: &NSURLCache);

        #[cfg(feature = "Foundation_NSString")]
        #[deprecated]
        #[method_id(@__retain_semantics Init initWithMemoryCapacity:diskCapacity:diskPath:)]
        pub unsafe fn initWithMemoryCapacity_diskCapacity_diskPath(
            this: Option<Allocated<Self>>,
            memory_capacity: NSUInteger,
            disk_capacity: NSUInteger,
            path: Option<&NSString>,
        ) -> Id<Self>;

        #[cfg(feature = "Foundation_NSURL")]
        #[method_id(@__retain_semantics Init initWithMemoryCapacity:diskCapacity:directoryURL:)]
        pub unsafe fn initWithMemoryCapacity_diskCapacity_directoryURL(
            this: Option<Allocated<Self>>,
            memory_capacity: NSUInteger,
            disk_capacity: NSUInteger,
            directory_url: Option<&NSURL>,
        ) -> Id<Self>;

        #[cfg(all(
            feature = "Foundation_NSCachedURLResponse",
            feature = "Foundation_NSURLRequest"
        ))]
        #[method_id(@__retain_semantics Other cachedResponseForRequest:)]
        pub unsafe fn cachedResponseForRequest(
            &self,
            request: &NSURLRequest,
        ) -> Option<Id<NSCachedURLResponse>>;

        #[cfg(all(
            feature = "Foundation_NSCachedURLResponse",
            feature = "Foundation_NSURLRequest"
        ))]
        #[method(storeCachedResponse:forRequest:)]
        pub unsafe fn storeCachedResponse_forRequest(
            &self,
            cached_response: &NSCachedURLResponse,
            request: &NSURLRequest,
        );

        #[cfg(feature = "Foundation_NSURLRequest")]
        #[method(removeCachedResponseForRequest:)]
        pub unsafe fn removeCachedResponseForRequest(&self, request: &NSURLRequest);

        #[method(removeAllCachedResponses)]
        pub unsafe fn removeAllCachedResponses(&self);

        #[cfg(feature = "Foundation_NSDate")]
        #[method(removeCachedResponsesSinceDate:)]
        pub unsafe fn removeCachedResponsesSinceDate(&self, date: &NSDate);

        /**
         @abstract In-memory capacity of the receiver.
        @discussion At the time this call is made, the in-memory cache will truncate its contents to the size given, if necessary.
        @result The in-memory capacity, measured in bytes, for the receiver.
        */
        #[method(memoryCapacity)]
        pub unsafe fn memoryCapacity(&self) -> NSUInteger;

        /**
         @abstract In-memory capacity of the receiver.
        @discussion At the time this call is made, the in-memory cache will truncate its contents to the size given, if necessary.
        @result The in-memory capacity, measured in bytes, for the receiver.
        */
        #[method(setMemoryCapacity:)]
        pub unsafe fn setMemoryCapacity(&self, memory_capacity: NSUInteger);

        /**
         @abstract The on-disk capacity of the receiver.
        @discussion The on-disk capacity, measured in bytes, for the receiver. On mutation the on-disk cache will truncate its contents to the size given, if necessary.
        */
        #[method(diskCapacity)]
        pub unsafe fn diskCapacity(&self) -> NSUInteger;

        /**
         @abstract The on-disk capacity of the receiver.
        @discussion The on-disk capacity, measured in bytes, for the receiver. On mutation the on-disk cache will truncate its contents to the size given, if necessary.
        */
        #[method(setDiskCapacity:)]
        pub unsafe fn setDiskCapacity(&self, disk_capacity: NSUInteger);

        /**
         @abstract Returns the current amount of space consumed by the
        in-memory cache of the receiver.
        @discussion This size, measured in bytes, indicates the current
        usage of the in-memory cache.
        @result the current usage of the in-memory cache of the receiver.
        */
        #[method(currentMemoryUsage)]
        pub unsafe fn currentMemoryUsage(&self) -> NSUInteger;

        /**
         @abstract Returns the current amount of space consumed by the
        on-disk cache of the receiver.
        @discussion This size, measured in bytes, indicates the current
        usage of the on-disk cache.
        @result the current usage of the on-disk cache of the receiver.
        */
        #[method(currentDiskUsage)]
        pub unsafe fn currentDiskUsage(&self) -> NSUInteger;
    }
);

extern_methods!(
    /// NSURLSessionTaskAdditions
    #[cfg(feature = "Foundation_NSURLCache")]
    unsafe impl NSURLCache {
        #[cfg(all(
            feature = "Foundation_NSCachedURLResponse",
            feature = "Foundation_NSURLSessionDataTask"
        ))]
        #[method(storeCachedResponse:forDataTask:)]
        pub unsafe fn storeCachedResponse_forDataTask(
            &self,
            cached_response: &NSCachedURLResponse,
            data_task: &NSURLSessionDataTask,
        );

        #[cfg(all(
            feature = "Foundation_NSCachedURLResponse",
            feature = "Foundation_NSURLSessionDataTask"
        ))]
        #[method(getCachedResponseForDataTask:completionHandler:)]
        pub unsafe fn getCachedResponseForDataTask_completionHandler(
            &self,
            data_task: &NSURLSessionDataTask,
            completion_handler: &Block<(*mut NSCachedURLResponse,), ()>,
        );

        #[cfg(feature = "Foundation_NSURLSessionDataTask")]
        #[method(removeCachedResponseForDataTask:)]
        pub unsafe fn removeCachedResponseForDataTask(&self, data_task: &NSURLSessionDataTask);
    }
);
