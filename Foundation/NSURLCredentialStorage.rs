//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "Foundation_NSURLCredentialStorage")]
    /**
     @class NSURLCredentialStorage
    @discussion NSURLCredentialStorage implements a singleton object (shared instance) which manages the shared credentials cache. Note: Whereas in Mac OS X any application can access any credential with a persistence of NSURLCredentialPersistencePermanent provided the user gives permission, in iPhone OS an application can access only its own credentials.
    */
    pub struct NSURLCredentialStorage;

    #[cfg(feature = "Foundation_NSURLCredentialStorage")]
    unsafe impl ClassType for NSURLCredentialStorage {
        type Super = NSObject;
    }
);

#[cfg(feature = "Foundation_NSURLCredentialStorage")]
/**
 @class NSURLCredentialStorage
@discussion NSURLCredentialStorage implements a singleton object (shared instance) which manages the shared credentials cache. Note: Whereas in Mac OS X any application can access any credential with a persistence of NSURLCredentialPersistencePermanent provided the user gives permission, in iPhone OS an application can access only its own credentials.
*/
unsafe impl NSObjectProtocol for NSURLCredentialStorage {}

extern_methods!(
    /**
     @class NSURLCredentialStorage
    @discussion NSURLCredentialStorage implements a singleton object (shared instance) which manages the shared credentials cache. Note: Whereas in Mac OS X any application can access any credential with a persistence of NSURLCredentialPersistencePermanent provided the user gives permission, in iPhone OS an application can access only its own credentials.
    */
    #[cfg(feature = "Foundation_NSURLCredentialStorage")]
    unsafe impl NSURLCredentialStorage {
        /**
         @property sharedCredentialStorage
        @abstract Get the shared singleton authentication storage
        @result the shared authentication storage
        */
        #[method_id(@__retain_semantics Other sharedCredentialStorage)]
        pub unsafe fn sharedCredentialStorage() -> Id<NSURLCredentialStorage>;

        #[cfg(all(
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSString",
            feature = "Foundation_NSURLCredential",
            feature = "Foundation_NSURLProtectionSpace"
        ))]
        #[method_id(@__retain_semantics Other credentialsForProtectionSpace:)]
        pub unsafe fn credentialsForProtectionSpace(
            &self,
            space: &NSURLProtectionSpace,
        ) -> Option<Id<NSDictionary<NSString, NSURLCredential>>>;

        #[cfg(all(
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSString",
            feature = "Foundation_NSURLCredential",
            feature = "Foundation_NSURLProtectionSpace"
        ))]
        /**
         @abstract Get a dictionary mapping NSURLProtectionSpaces to dictionaries which map usernames to NSURLCredentials
        @result an NSDictionary where the keys are NSURLProtectionSpaces
        and the values are dictionaries, in which the keys are usernames
        and the values are NSURLCredentials
        */
        #[method_id(@__retain_semantics Other allCredentials)]
        pub unsafe fn allCredentials(
            &self,
        ) -> Id<NSDictionary<NSURLProtectionSpace, NSDictionary<NSString, NSURLCredential>>>;

        #[cfg(all(
            feature = "Foundation_NSURLCredential",
            feature = "Foundation_NSURLProtectionSpace"
        ))]
        #[method(setCredential:forProtectionSpace:)]
        pub unsafe fn setCredential_forProtectionSpace(
            &self,
            credential: &NSURLCredential,
            space: &NSURLProtectionSpace,
        );

        #[cfg(all(
            feature = "Foundation_NSURLCredential",
            feature = "Foundation_NSURLProtectionSpace"
        ))]
        #[method(removeCredential:forProtectionSpace:)]
        pub unsafe fn removeCredential_forProtectionSpace(
            &self,
            credential: &NSURLCredential,
            space: &NSURLProtectionSpace,
        );

        #[cfg(all(
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSString",
            feature = "Foundation_NSURLCredential",
            feature = "Foundation_NSURLProtectionSpace"
        ))]
        #[method(removeCredential:forProtectionSpace:options:)]
        pub unsafe fn removeCredential_forProtectionSpace_options(
            &self,
            credential: &NSURLCredential,
            space: &NSURLProtectionSpace,
            options: Option<&NSDictionary<NSString, Object>>,
        );

        #[cfg(all(
            feature = "Foundation_NSURLCredential",
            feature = "Foundation_NSURLProtectionSpace"
        ))]
        #[method_id(@__retain_semantics Other defaultCredentialForProtectionSpace:)]
        pub unsafe fn defaultCredentialForProtectionSpace(
            &self,
            space: &NSURLProtectionSpace,
        ) -> Option<Id<NSURLCredential>>;

        #[cfg(all(
            feature = "Foundation_NSURLCredential",
            feature = "Foundation_NSURLProtectionSpace"
        ))]
        #[method(setDefaultCredential:forProtectionSpace:)]
        pub unsafe fn setDefaultCredential_forProtectionSpace(
            &self,
            credential: &NSURLCredential,
            space: &NSURLProtectionSpace,
        );
    }
);

extern_methods!(
    /// NSURLSessionTaskAdditions
    #[cfg(feature = "Foundation_NSURLCredentialStorage")]
    unsafe impl NSURLCredentialStorage {
        #[cfg(all(
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSString",
            feature = "Foundation_NSURLCredential",
            feature = "Foundation_NSURLProtectionSpace",
            feature = "Foundation_NSURLSessionTask"
        ))]
        #[method(getCredentialsForProtectionSpace:task:completionHandler:)]
        pub unsafe fn getCredentialsForProtectionSpace_task_completionHandler(
            &self,
            protection_space: &NSURLProtectionSpace,
            task: &NSURLSessionTask,
            completion_handler: &Block<(*mut NSDictionary<NSString, NSURLCredential>,), ()>,
        );

        #[cfg(all(
            feature = "Foundation_NSURLCredential",
            feature = "Foundation_NSURLProtectionSpace",
            feature = "Foundation_NSURLSessionTask"
        ))]
        #[method(setCredential:forProtectionSpace:task:)]
        pub unsafe fn setCredential_forProtectionSpace_task(
            &self,
            credential: &NSURLCredential,
            protection_space: &NSURLProtectionSpace,
            task: &NSURLSessionTask,
        );

        #[cfg(all(
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSString",
            feature = "Foundation_NSURLCredential",
            feature = "Foundation_NSURLProtectionSpace",
            feature = "Foundation_NSURLSessionTask"
        ))]
        #[method(removeCredential:forProtectionSpace:options:task:)]
        pub unsafe fn removeCredential_forProtectionSpace_options_task(
            &self,
            credential: &NSURLCredential,
            protection_space: &NSURLProtectionSpace,
            options: Option<&NSDictionary<NSString, Object>>,
            task: &NSURLSessionTask,
        );

        #[cfg(all(
            feature = "Foundation_NSURLCredential",
            feature = "Foundation_NSURLProtectionSpace",
            feature = "Foundation_NSURLSessionTask"
        ))]
        #[method(getDefaultCredentialForProtectionSpace:task:completionHandler:)]
        pub unsafe fn getDefaultCredentialForProtectionSpace_task_completionHandler(
            &self,
            space: &NSURLProtectionSpace,
            task: &NSURLSessionTask,
            completion_handler: &Block<(*mut NSURLCredential,), ()>,
        );

        #[cfg(all(
            feature = "Foundation_NSURLCredential",
            feature = "Foundation_NSURLProtectionSpace",
            feature = "Foundation_NSURLSessionTask"
        ))]
        #[method(setDefaultCredential:forProtectionSpace:task:)]
        pub unsafe fn setDefaultCredential_forProtectionSpace_task(
            &self,
            credential: &NSURLCredential,
            protection_space: &NSURLProtectionSpace,
            task: &NSURLSessionTask,
        );
    }
);

extern_static!(NSURLCredentialStorageChangedNotification: &'static NSNotificationName);

extern_static!(NSURLCredentialStorageRemoveSynchronizableCredentials: &'static NSString);
