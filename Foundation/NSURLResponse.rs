//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "Foundation_NSURLResponse")]
    /**
     @class NSURLResponse

    @abstract An NSURLResponse object represents a URL load response in a
    manner independent of protocol and URL scheme.

    @discussion NSURLResponse encapsulates the metadata associated
    with a URL load. Note that NSURLResponse objects do not contain
    the actual bytes representing the content of a URL. See
    NSURLConnection and NSURLConnectionDelegate for more information
    about receiving the content data for a URL load.
    */
    pub struct NSURLResponse;

    #[cfg(feature = "Foundation_NSURLResponse")]
    unsafe impl ClassType for NSURLResponse {
        type Super = NSObject;
    }
);

#[cfg(feature = "Foundation_NSURLResponse")]
/**
 @class NSURLResponse

@abstract An NSURLResponse object represents a URL load response in a
manner independent of protocol and URL scheme.

@discussion NSURLResponse encapsulates the metadata associated
with a URL load. Note that NSURLResponse objects do not contain
the actual bytes representing the content of a URL. See
NSURLConnection and NSURLConnectionDelegate for more information
about receiving the content data for a URL load.
*/
unsafe impl NSCoding for NSURLResponse {}

#[cfg(feature = "Foundation_NSURLResponse")]
/**
 @class NSURLResponse

@abstract An NSURLResponse object represents a URL load response in a
manner independent of protocol and URL scheme.

@discussion NSURLResponse encapsulates the metadata associated
with a URL load. Note that NSURLResponse objects do not contain
the actual bytes representing the content of a URL. See
NSURLConnection and NSURLConnectionDelegate for more information
about receiving the content data for a URL load.
*/
unsafe impl NSObjectProtocol for NSURLResponse {}

#[cfg(feature = "Foundation_NSURLResponse")]
/**
 @class NSURLResponse

@abstract An NSURLResponse object represents a URL load response in a
manner independent of protocol and URL scheme.

@discussion NSURLResponse encapsulates the metadata associated
with a URL load. Note that NSURLResponse objects do not contain
the actual bytes representing the content of a URL. See
NSURLConnection and NSURLConnectionDelegate for more information
about receiving the content data for a URL load.
*/
unsafe impl NSSecureCoding for NSURLResponse {}

extern_methods!(
    /**
     @class NSURLResponse

    @abstract An NSURLResponse object represents a URL load response in a
    manner independent of protocol and URL scheme.

    @discussion NSURLResponse encapsulates the metadata associated
    with a URL load. Note that NSURLResponse objects do not contain
    the actual bytes representing the content of a URL. See
    NSURLConnection and NSURLConnectionDelegate for more information
    about receiving the content data for a URL load.
    */
    #[cfg(feature = "Foundation_NSURLResponse")]
    unsafe impl NSURLResponse {
        #[cfg(all(feature = "Foundation_NSString", feature = "Foundation_NSURL"))]
        #[method_id(@__retain_semantics Init initWithURL:MIMEType:expectedContentLength:textEncodingName:)]
        pub unsafe fn initWithURL_MIMEType_expectedContentLength_textEncodingName(
            this: Option<Allocated<Self>>,
            url: &NSURL,
            mime_type: Option<&NSString>,
            length: NSInteger,
            name: Option<&NSString>,
        ) -> Id<Self>;

        #[cfg(feature = "Foundation_NSURL")]
        /**
         @abstract Returns the URL of the receiver.
        @result The URL of the receiver.
        */
        #[method_id(@__retain_semantics Other URL)]
        pub unsafe fn URL(&self) -> Option<Id<NSURL>>;

        #[cfg(feature = "Foundation_NSString")]
        /**
         @abstract Returns the MIME type of the receiver.
        @discussion The MIME type is based on the information provided
        from an origin source. However, that value may be changed or
        corrected by a protocol implementation if it can be determined
        that the origin server or source reported the information
        incorrectly or imprecisely. An attempt to guess the MIME type may
        be made if the origin source did not report any such information.
        @result The MIME type of the receiver.
        */
        #[method_id(@__retain_semantics Other MIMEType)]
        pub unsafe fn MIMEType(&self) -> Option<Id<NSString>>;

        /**
         @abstract Returns the expected content length of the receiver.
        @discussion Some protocol implementations report a content length
        as part of delivering load metadata, but not all protocols
        guarantee the amount of data that will be delivered in actuality.
        Hence, this method returns an expected amount. Clients should use
        this value as an advisory, and should be prepared to deal with
        either more or less data.
        @result The expected content length of the receiver, or -1 if
        there is no expectation that can be arrived at regarding expected
        content length.
        */
        #[method(expectedContentLength)]
        pub unsafe fn expectedContentLength(&self) -> c_longlong;

        #[cfg(feature = "Foundation_NSString")]
        /**
         @abstract Returns the name of the text encoding of the receiver.
        @discussion This name will be the actual string reported by the
        origin source during the course of performing a protocol-specific
        URL load. Clients can inspect this string and convert it to an
        NSStringEncoding or CFStringEncoding using the methods and
        functions made available in the appropriate framework.
        @result The name of the text encoding of the receiver, or nil if no
        text encoding was specified.
        */
        #[method_id(@__retain_semantics Other textEncodingName)]
        pub unsafe fn textEncodingName(&self) -> Option<Id<NSString>>;

        #[cfg(feature = "Foundation_NSString")]
        /**
         @abstract Returns a suggested filename if the resource were saved to disk.
        @discussion The method first checks if the server has specified a filename using the
        content disposition header. If no valid filename is specified using that mechanism,
        this method checks the last path component of the URL. If no valid filename can be
        obtained using the last path component, this method uses the URL's host as the filename.
        If the URL's host can't be converted to a valid filename, the filename "unknown" is used.
        In most cases, this method appends the proper file extension based on the MIME type.
        This method always returns a valid filename.
        @result A suggested filename to use if saving the resource to disk.
        */
        #[method_id(@__retain_semantics Other suggestedFilename)]
        pub unsafe fn suggestedFilename(&self) -> Option<Id<NSString>>;
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "Foundation_NSHTTPURLResponse")]
    /**
     @class NSHTTPURLResponse

    @abstract An NSHTTPURLResponse object represents a response to an
    HTTP URL load. It is a specialization of NSURLResponse which
    provides conveniences for accessing information specific to HTTP
    protocol responses.
    */
    pub struct NSHTTPURLResponse;

    #[cfg(feature = "Foundation_NSHTTPURLResponse")]
    unsafe impl ClassType for NSHTTPURLResponse {
        #[inherits(NSObject)]
        type Super = NSURLResponse;
    }
);

#[cfg(feature = "Foundation_NSHTTPURLResponse")]
/**
 @class NSHTTPURLResponse

@abstract An NSHTTPURLResponse object represents a response to an
HTTP URL load. It is a specialization of NSURLResponse which
provides conveniences for accessing information specific to HTTP
protocol responses.
*/
unsafe impl NSCoding for NSHTTPURLResponse {}

#[cfg(feature = "Foundation_NSHTTPURLResponse")]
/**
 @class NSHTTPURLResponse

@abstract An NSHTTPURLResponse object represents a response to an
HTTP URL load. It is a specialization of NSURLResponse which
provides conveniences for accessing information specific to HTTP
protocol responses.
*/
unsafe impl NSObjectProtocol for NSHTTPURLResponse {}

#[cfg(feature = "Foundation_NSHTTPURLResponse")]
/**
 @class NSHTTPURLResponse

@abstract An NSHTTPURLResponse object represents a response to an
HTTP URL load. It is a specialization of NSURLResponse which
provides conveniences for accessing information specific to HTTP
protocol responses.
*/
unsafe impl NSSecureCoding for NSHTTPURLResponse {}

extern_methods!(
    /**
     @class NSHTTPURLResponse

    @abstract An NSHTTPURLResponse object represents a response to an
    HTTP URL load. It is a specialization of NSURLResponse which
    provides conveniences for accessing information specific to HTTP
    protocol responses.
    */
    #[cfg(feature = "Foundation_NSHTTPURLResponse")]
    unsafe impl NSHTTPURLResponse {
        #[cfg(all(
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSString",
            feature = "Foundation_NSURL"
        ))]
        #[method_id(@__retain_semantics Init initWithURL:statusCode:HTTPVersion:headerFields:)]
        pub unsafe fn initWithURL_statusCode_HTTPVersion_headerFields(
            this: Option<Allocated<Self>>,
            url: &NSURL,
            status_code: NSInteger,
            http_version: Option<&NSString>,
            header_fields: Option<&NSDictionary<NSString, NSString>>,
        ) -> Option<Id<Self>>;

        /**
         @abstract Returns the HTTP status code of the receiver.
        @result The HTTP status code of the receiver.
        */
        #[method(statusCode)]
        pub unsafe fn statusCode(&self) -> NSInteger;

        #[cfg(feature = "Foundation_NSDictionary")]
        /**
         @abstract Returns a dictionary containing all the HTTP header fields
        of the receiver.
        @discussion By examining this header dictionary, clients can see
        the "raw" header information which was reported to the protocol
        implementation by the HTTP server. This may be of use to
        sophisticated or special-purpose HTTP clients.
        @result A dictionary containing all the HTTP header fields of the
        receiver.
        */
        #[method_id(@__retain_semantics Other allHeaderFields)]
        pub unsafe fn allHeaderFields(&self) -> Id<NSDictionary>;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other valueForHTTPHeaderField:)]
        pub unsafe fn valueForHTTPHeaderField(&self, field: &NSString) -> Option<Id<NSString>>;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other localizedStringForStatusCode:)]
        pub unsafe fn localizedStringForStatusCode(status_code: NSInteger) -> Id<NSString>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSURLResponse`
    /**
     @class NSHTTPURLResponse

    @abstract An NSHTTPURLResponse object represents a response to an
    HTTP URL load. It is a specialization of NSURLResponse which
    provides conveniences for accessing information specific to HTTP
    protocol responses.
    */
    #[cfg(feature = "Foundation_NSHTTPURLResponse")]
    unsafe impl NSHTTPURLResponse {
        #[cfg(all(feature = "Foundation_NSString", feature = "Foundation_NSURL"))]
        #[method_id(@__retain_semantics Init initWithURL:MIMEType:expectedContentLength:textEncodingName:)]
        pub unsafe fn initWithURL_MIMEType_expectedContentLength_textEncodingName(
            this: Option<Allocated<Self>>,
            url: &NSURL,
            mime_type: Option<&NSString>,
            length: NSInteger,
            name: Option<&NSString>,
        ) -> Id<Self>;
    }
);
