//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;

ns_enum!(
    #[underlying(NSInteger)]
    pub enum NSCollectionChangeType {
        NSCollectionChangeInsert = 0,
        NSCollectionChangeRemove = 1,
    }
);

__inner_extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "Foundation_NSOrderedCollectionChange")]
    pub struct NSOrderedCollectionChange<
        ObjectType: Message = Object,
        ObjectTypeOwnership: Ownership = Shared,
    > {
        _inner0: PhantomData<*mut (ObjectType, ObjectTypeOwnership)>,
        notunwindsafe: PhantomData<&'static mut ()>,
    }

    #[cfg(feature = "Foundation_NSOrderedCollectionChange")]
    unsafe impl<ObjectType: Message, ObjectTypeOwnership: Ownership> ClassType
        for NSOrderedCollectionChange<ObjectType, ObjectTypeOwnership>
    {
        type Super = NSObject;
    }
);

#[cfg(feature = "Foundation_NSOrderedCollectionChange")]
unsafe impl<ObjectType: Message, ObjectTypeOwnership: Ownership> NSObjectProtocol
    for NSOrderedCollectionChange<ObjectType, ObjectTypeOwnership>
{
}

extern_methods!(
    #[cfg(feature = "Foundation_NSOrderedCollectionChange")]
    unsafe impl<ObjectType: Message, ObjectTypeOwnership: Ownership>
        NSOrderedCollectionChange<ObjectType, ObjectTypeOwnership>
    {
        #[method_id(@__retain_semantics Other changeWithObject:type:index:)]
        pub unsafe fn changeWithObject_type_index(
            an_object: Option<&ObjectType>,
            r#type: NSCollectionChangeType,
            index: NSUInteger,
        ) -> Id<NSOrderedCollectionChange<ObjectType>>;

        #[method_id(@__retain_semantics Other changeWithObject:type:index:associatedIndex:)]
        pub unsafe fn changeWithObject_type_index_associatedIndex(
            an_object: Option<&ObjectType>,
            r#type: NSCollectionChangeType,
            index: NSUInteger,
            associated_index: NSUInteger,
        ) -> Id<NSOrderedCollectionChange<ObjectType>>;

        /**
          The object that was inserted or removed, if recorded
        */
        #[method_id(@__retain_semantics Other object)]
        pub unsafe fn object(&self) -> Option<Id<ObjectType, ObjectTypeOwnership>>;

        /**
          The change type: insert or remove
        */
        #[method(changeType)]
        pub unsafe fn changeType(&self) -> NSCollectionChangeType;

        /**
          For removes, the index of the object in the original state.
         For inserts, the index of the object in the final state.
        */
        #[method(index)]
        pub unsafe fn index(&self) -> NSUInteger;

        /**
          When non-NSNotFound, indicates that this change is one half of a move, with
         this value referring to the index of the other change that completes it.
         For differences produced by identity comparison (instead of equality), each
         change representing a move operation may store different objects.
        */
        #[method(associatedIndex)]
        pub unsafe fn associatedIndex(&self) -> NSUInteger;

        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

        #[method_id(@__retain_semantics Init initWithObject:type:index:)]
        pub unsafe fn initWithObject_type_index(
            this: Option<Allocated<Self>>,
            an_object: Option<&ObjectType>,
            r#type: NSCollectionChangeType,
            index: NSUInteger,
        ) -> Id<Self>;

        #[method_id(@__retain_semantics Init initWithObject:type:index:associatedIndex:)]
        pub unsafe fn initWithObject_type_index_associatedIndex(
            this: Option<Allocated<Self>>,
            an_object: Option<&ObjectType>,
            r#type: NSCollectionChangeType,
            index: NSUInteger,
            associated_index: NSUInteger,
        ) -> Id<Self>;
    }
);
