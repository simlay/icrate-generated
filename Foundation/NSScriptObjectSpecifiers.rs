//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;

ns_enum!(
    #[underlying(NSInteger)]
    pub enum __anonymous__ {
        NSNoSpecifierError = 0,
        NSNoTopLevelContainersSpecifierError = 1,
        NSContainerSpecifierError = 2,
        NSUnknownKeySpecifierError = 3,
        NSInvalidIndexSpecifierError = 4,
        NSInternalSpecifierError = 5,
        NSOperationNotSupportedForKeySpecifierError = 6,
    }
);

ns_enum!(
    #[underlying(NSUInteger)]
    pub enum NSInsertionPosition {
        NSPositionAfter = 0,
        NSPositionBefore = 1,
        NSPositionBeginning = 2,
        NSPositionEnd = 3,
        NSPositionReplace = 4,
    }
);

ns_enum!(
    #[underlying(NSUInteger)]
    pub enum NSRelativePosition {
        NSRelativeAfter = 0,
        NSRelativeBefore = 1,
    }
);

ns_enum!(
    #[underlying(NSUInteger)]
    pub enum NSWhoseSubelementIdentifier {
        NSIndexSubelement = 0,
        NSEverySubelement = 1,
        NSMiddleSubelement = 2,
        NSRandomSubelement = 3,
        NSNoSubelement = 4,
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "Foundation_NSScriptObjectSpecifier")]
    /**
      This class represents a specifier to a set of objects.  It can be evaluated to return the objects it specifiers.  This abstract superclass is subclassed for each type of specifier.
     A specifier always accesses a specific property of an object or array of objects.  The object accessed is called the container (or container).  When object specifiers are nested the container[s] are described by the container specifier.  When an object specifier has no container specifier, the container objects must be supplied explicitly.
     Object specifiers can be nested.  The child retains its container specifier.
    */
    pub struct NSScriptObjectSpecifier;

    #[cfg(feature = "Foundation_NSScriptObjectSpecifier")]
    unsafe impl ClassType for NSScriptObjectSpecifier {
        type Super = NSObject;
    }
);

#[cfg(feature = "Foundation_NSScriptObjectSpecifier")]
/**
  This class represents a specifier to a set of objects.  It can be evaluated to return the objects it specifiers.  This abstract superclass is subclassed for each type of specifier.
 A specifier always accesses a specific property of an object or array of objects.  The object accessed is called the container (or container).  When object specifiers are nested the container[s] are described by the container specifier.  When an object specifier has no container specifier, the container objects must be supplied explicitly.
 Object specifiers can be nested.  The child retains its container specifier.
*/
unsafe impl NSCoding for NSScriptObjectSpecifier {}

#[cfg(feature = "Foundation_NSScriptObjectSpecifier")]
/**
  This class represents a specifier to a set of objects.  It can be evaluated to return the objects it specifiers.  This abstract superclass is subclassed for each type of specifier.
 A specifier always accesses a specific property of an object or array of objects.  The object accessed is called the container (or container).  When object specifiers are nested the container[s] are described by the container specifier.  When an object specifier has no container specifier, the container objects must be supplied explicitly.
 Object specifiers can be nested.  The child retains its container specifier.
*/
unsafe impl NSObjectProtocol for NSScriptObjectSpecifier {}

extern_methods!(
    /**
      This class represents a specifier to a set of objects.  It can be evaluated to return the objects it specifiers.  This abstract superclass is subclassed for each type of specifier.
     A specifier always accesses a specific property of an object or array of objects.  The object accessed is called the container (or container).  When object specifiers are nested the container[s] are described by the container specifier.  When an object specifier has no container specifier, the container objects must be supplied explicitly.
     Object specifiers can be nested.  The child retains its container specifier.
    */
    #[cfg(feature = "Foundation_NSScriptObjectSpecifier")]
    unsafe impl NSScriptObjectSpecifier {
        #[cfg(feature = "Foundation_NSAppleEventDescriptor")]
        #[method_id(@__retain_semantics Other objectSpecifierWithDescriptor:)]
        pub unsafe fn objectSpecifierWithDescriptor(
            descriptor: &NSAppleEventDescriptor,
        ) -> Option<Id<NSScriptObjectSpecifier>>;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Init initWithContainerSpecifier:key:)]
        pub unsafe fn initWithContainerSpecifier_key(
            this: Option<Allocated<Self>>,
            container: &NSScriptObjectSpecifier,
            property: &NSString,
        ) -> Id<Self>;

        #[cfg(all(
            feature = "Foundation_NSScriptClassDescription",
            feature = "Foundation_NSString"
        ))]
        #[method_id(@__retain_semantics Init initWithContainerClassDescription:containerSpecifier:key:)]
        pub unsafe fn initWithContainerClassDescription_containerSpecifier_key(
            this: Option<Allocated<Self>>,
            class_desc: &NSScriptClassDescription,
            container: Option<&NSScriptObjectSpecifier>,
            property: &NSString,
        ) -> Id<Self>;

        #[cfg(feature = "Foundation_NSCoder")]
        #[method_id(@__retain_semantics Init initWithCoder:)]
        pub unsafe fn initWithCoder(
            this: Option<Allocated<Self>>,
            in_coder: &NSCoder,
        ) -> Option<Id<Self>>;

        #[method_id(@__retain_semantics Other childSpecifier)]
        pub unsafe fn childSpecifier(&self) -> Option<Id<NSScriptObjectSpecifier>>;

        #[method(setChildSpecifier:)]
        pub unsafe fn setChildSpecifier(&self, child_specifier: Option<&NSScriptObjectSpecifier>);

        /**
          You generally should not call the set method.  It is called automatically by setContainerSpecifier:.
        */
        #[method_id(@__retain_semantics Other containerSpecifier)]
        pub unsafe fn containerSpecifier(&self) -> Option<Id<NSScriptObjectSpecifier>>;

        /**
          You generally should not call the set method.  It is called automatically by setContainerSpecifier:.
        */
        #[method(setContainerSpecifier:)]
        pub unsafe fn setContainerSpecifier(
            &self,
            container_specifier: Option<&NSScriptObjectSpecifier>,
        );

        /**
          setContainerSpecifier: calls [child setChildSpecifier:self] as well.
        */
        #[method(containerIsObjectBeingTested)]
        pub unsafe fn containerIsObjectBeingTested(&self) -> bool;

        /**
          setContainerSpecifier: calls [child setChildSpecifier:self] as well.
        */
        #[method(setContainerIsObjectBeingTested:)]
        pub unsafe fn setContainerIsObjectBeingTested(
            &self,
            container_is_object_being_tested: bool,
        );

        /**
          If our containerSpecifier is nil, this flag determines whether the top-level container is the default top-level object or the object currently being tested by an NSWhoseSpecifier.
        */
        #[method(containerIsRangeContainerObject)]
        pub unsafe fn containerIsRangeContainerObject(&self) -> bool;

        /**
          If our containerSpecifier is nil, this flag determines whether the top-level container is the default top-level object or the object currently being tested by an NSWhoseSpecifier.
        */
        #[method(setContainerIsRangeContainerObject:)]
        pub unsafe fn setContainerIsRangeContainerObject(
            &self,
            container_is_range_container_object: bool,
        );

        #[cfg(feature = "Foundation_NSString")]
        /**
          If our containerSpecifier is nil, this flag determines whether the top-level container is the default top-level object or the object that is the container for the current range specifier being evaluated.
         One or neither of -containerIsObjectBeingTested and -containerIsRangeContainerObject should be set to YES.  Setting both of these to YES makes no sense.
        */
        #[method_id(@__retain_semantics Other key)]
        pub unsafe fn key(&self) -> Id<NSString>;

        #[cfg(feature = "Foundation_NSString")]
        /**
          If our containerSpecifier is nil, this flag determines whether the top-level container is the default top-level object or the object that is the container for the current range specifier being evaluated.
         One or neither of -containerIsObjectBeingTested and -containerIsRangeContainerObject should be set to YES.  Setting both of these to YES makes no sense.
        */
        #[method(setKey:)]
        pub unsafe fn setKey(&self, key: &NSString);

        #[cfg(feature = "Foundation_NSScriptClassDescription")]
        /**
          The name of the key in the container object to be accessed by this specifier.
        */
        #[method_id(@__retain_semantics Other containerClassDescription)]
        pub unsafe fn containerClassDescription(&self) -> Option<Id<NSScriptClassDescription>>;

        #[cfg(feature = "Foundation_NSScriptClassDescription")]
        /**
          The name of the key in the container object to be accessed by this specifier.
        */
        #[method(setContainerClassDescription:)]
        pub unsafe fn setContainerClassDescription(
            &self,
            container_class_description: Option<&NSScriptClassDescription>,
        );

        #[cfg(feature = "Foundation_NSScriptClassDescription")]
        #[method_id(@__retain_semantics Other keyClassDescription)]
        pub unsafe fn keyClassDescription(&self) -> Option<Id<NSScriptClassDescription>>;

        #[method(indicesOfObjectsByEvaluatingWithContainer:count:)]
        pub unsafe fn indicesOfObjectsByEvaluatingWithContainer_count(
            &self,
            container: &Object,
            count: NonNull<NSInteger>,
        ) -> *mut NSInteger;

        #[method_id(@__retain_semantics Other objectsByEvaluatingWithContainers:)]
        pub unsafe fn objectsByEvaluatingWithContainers(
            &self,
            containers: &Object,
        ) -> Option<Id<Object>>;

        #[method_id(@__retain_semantics Other objectsByEvaluatingSpecifier)]
        pub unsafe fn objectsByEvaluatingSpecifier(&self) -> Option<Id<Object>>;

        #[method(evaluationErrorNumber)]
        pub unsafe fn evaluationErrorNumber(&self) -> NSInteger;

        #[method(setEvaluationErrorNumber:)]
        pub unsafe fn setEvaluationErrorNumber(&self, evaluation_error_number: NSInteger);

        #[method_id(@__retain_semantics Other evaluationErrorSpecifier)]
        pub unsafe fn evaluationErrorSpecifier(&self) -> Option<Id<NSScriptObjectSpecifier>>;

        #[cfg(feature = "Foundation_NSAppleEventDescriptor")]
        /**
          Return an Apple event descriptor that represents the receiver. If the receiver was created with +objectSpecifierWithDescriptor: that passed-in descriptor is returned. Otherwise a new one is created and returned (autoreleased, of course).
        */
        #[method_id(@__retain_semantics Other descriptor)]
        pub unsafe fn descriptor(&self) -> Option<Id<NSAppleEventDescriptor>>;
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "Foundation_NSIndexSpecifier")]
    /**
      An Index specifiers return the object at the specified index for the specifier's property.  A negative index counts from the end of the array.
    */
    pub struct NSIndexSpecifier;

    #[cfg(feature = "Foundation_NSIndexSpecifier")]
    unsafe impl ClassType for NSIndexSpecifier {
        #[inherits(NSObject)]
        type Super = NSScriptObjectSpecifier;
    }
);

#[cfg(feature = "Foundation_NSIndexSpecifier")]
/**
  An Index specifiers return the object at the specified index for the specifier's property.  A negative index counts from the end of the array.
*/
unsafe impl NSCoding for NSIndexSpecifier {}

#[cfg(feature = "Foundation_NSIndexSpecifier")]
/**
  An Index specifiers return the object at the specified index for the specifier's property.  A negative index counts from the end of the array.
*/
unsafe impl NSObjectProtocol for NSIndexSpecifier {}

extern_methods!(
    /**
      An Index specifiers return the object at the specified index for the specifier's property.  A negative index counts from the end of the array.
    */
    #[cfg(feature = "Foundation_NSIndexSpecifier")]
    unsafe impl NSIndexSpecifier {
        #[cfg(all(
            feature = "Foundation_NSScriptClassDescription",
            feature = "Foundation_NSString"
        ))]
        #[method_id(@__retain_semantics Init initWithContainerClassDescription:containerSpecifier:key:index:)]
        pub unsafe fn initWithContainerClassDescription_containerSpecifier_key_index(
            this: Option<Allocated<Self>>,
            class_desc: &NSScriptClassDescription,
            container: Option<&NSScriptObjectSpecifier>,
            property: &NSString,
            index: NSInteger,
        ) -> Id<Self>;

        #[method(index)]
        pub unsafe fn index(&self) -> NSInteger;

        #[method(setIndex:)]
        pub unsafe fn setIndex(&self, index: NSInteger);
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "Foundation_NSMiddleSpecifier")]
    /**
      A Middle specifier returns the middle object from the objects for the specifier's property.  If there are an even number of objects it returns the object before the midpoint.
    */
    pub struct NSMiddleSpecifier;

    #[cfg(feature = "Foundation_NSMiddleSpecifier")]
    unsafe impl ClassType for NSMiddleSpecifier {
        #[inherits(NSObject)]
        type Super = NSScriptObjectSpecifier;
    }
);

#[cfg(feature = "Foundation_NSMiddleSpecifier")]
/**
  A Middle specifier returns the middle object from the objects for the specifier's property.  If there are an even number of objects it returns the object before the midpoint.
*/
unsafe impl NSCoding for NSMiddleSpecifier {}

#[cfg(feature = "Foundation_NSMiddleSpecifier")]
/**
  A Middle specifier returns the middle object from the objects for the specifier's property.  If there are an even number of objects it returns the object before the midpoint.
*/
unsafe impl NSObjectProtocol for NSMiddleSpecifier {}

extern_methods!(
    /**
      A Middle specifier returns the middle object from the objects for the specifier's property.  If there are an even number of objects it returns the object before the midpoint.
    */
    #[cfg(feature = "Foundation_NSMiddleSpecifier")]
    unsafe impl NSMiddleSpecifier {}
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "Foundation_NSNameSpecifier")]
    /**
      A Name specifier returns the object with the specified name.
    */
    pub struct NSNameSpecifier;

    #[cfg(feature = "Foundation_NSNameSpecifier")]
    unsafe impl ClassType for NSNameSpecifier {
        #[inherits(NSObject)]
        type Super = NSScriptObjectSpecifier;
    }
);

#[cfg(feature = "Foundation_NSNameSpecifier")]
/**
  A Name specifier returns the object with the specified name.
*/
unsafe impl NSCoding for NSNameSpecifier {}

#[cfg(feature = "Foundation_NSNameSpecifier")]
/**
  A Name specifier returns the object with the specified name.
*/
unsafe impl NSObjectProtocol for NSNameSpecifier {}

extern_methods!(
    /**
      A Name specifier returns the object with the specified name.
    */
    #[cfg(feature = "Foundation_NSNameSpecifier")]
    unsafe impl NSNameSpecifier {
        #[cfg(feature = "Foundation_NSCoder")]
        #[method_id(@__retain_semantics Init initWithCoder:)]
        pub unsafe fn initWithCoder(
            this: Option<Allocated<Self>>,
            in_coder: &NSCoder,
        ) -> Option<Id<Self>>;

        #[cfg(all(
            feature = "Foundation_NSScriptClassDescription",
            feature = "Foundation_NSString"
        ))]
        #[method_id(@__retain_semantics Init initWithContainerClassDescription:containerSpecifier:key:name:)]
        pub unsafe fn initWithContainerClassDescription_containerSpecifier_key_name(
            this: Option<Allocated<Self>>,
            class_desc: &NSScriptClassDescription,
            container: Option<&NSScriptObjectSpecifier>,
            property: &NSString,
            name: &NSString,
        ) -> Id<Self>;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other name)]
        pub unsafe fn name(&self) -> Id<NSString>;

        #[cfg(feature = "Foundation_NSString")]
        #[method(setName:)]
        pub unsafe fn setName(&self, name: &NSString);
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "Foundation_NSPositionalSpecifier")]
    pub struct NSPositionalSpecifier;

    #[cfg(feature = "Foundation_NSPositionalSpecifier")]
    unsafe impl ClassType for NSPositionalSpecifier {
        type Super = NSObject;
    }
);

#[cfg(feature = "Foundation_NSPositionalSpecifier")]
unsafe impl NSObjectProtocol for NSPositionalSpecifier {}

extern_methods!(
    #[cfg(feature = "Foundation_NSPositionalSpecifier")]
    unsafe impl NSPositionalSpecifier {
        #[cfg(feature = "Foundation_NSScriptObjectSpecifier")]
        #[method_id(@__retain_semantics Init initWithPosition:objectSpecifier:)]
        pub unsafe fn initWithPosition_objectSpecifier(
            this: Option<Allocated<Self>>,
            position: NSInsertionPosition,
            specifier: &NSScriptObjectSpecifier,
        ) -> Id<Self>;

        /**
          Return the position or object specifier that was specified at initialization time.
        */
        #[method(position)]
        pub unsafe fn position(&self) -> NSInsertionPosition;

        #[cfg(feature = "Foundation_NSScriptObjectSpecifier")]
        #[method_id(@__retain_semantics Other objectSpecifier)]
        pub unsafe fn objectSpecifier(&self) -> Id<NSScriptObjectSpecifier>;

        #[cfg(feature = "Foundation_NSScriptClassDescription")]
        #[method(setInsertionClassDescription:)]
        pub unsafe fn setInsertionClassDescription(
            &self,
            class_description: &NSScriptClassDescription,
        );

        #[method(evaluate)]
        pub unsafe fn evaluate(&self);

        /**
          Return the container into which insertion should be done, if evaluation has been successful, or nil otherwise.  If this object has never been evaluated, evaluation is attempted.
        */
        #[method_id(@__retain_semantics Other insertionContainer)]
        pub unsafe fn insertionContainer(&self) -> Option<Id<Object>>;

        #[cfg(feature = "Foundation_NSString")]
        /**
          Return the key for the to-many relationship for which insertion should be done, if evaluation has been successful, or nil otherwise.  If this object has never been evaluated, evaluation is attempted.
        */
        #[method_id(@__retain_semantics Other insertionKey)]
        pub unsafe fn insertionKey(&self) -> Option<Id<NSString>>;

        /**
          Return an index into the set of keyed to-many relationship objects before which insertion should be done in the insertion container, if evaluation has been successful, or -1 otherwise.  If this object has never been evaluated, evaluation is attempted.
        */
        #[method(insertionIndex)]
        pub unsafe fn insertionIndex(&self) -> NSInteger;

        /**
          Return YES if evaluation has been successful and the object to be inserted should actually replace the keyed, indexed object in the insertion container, instead of being inserted before it, or NO otherwise.  If this object has never been evaluated, evaluation is attempted.
        */
        #[method(insertionReplaces)]
        pub unsafe fn insertionReplaces(&self) -> bool;
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "Foundation_NSPropertySpecifier")]
    /**
      This returns all the objects for the specifier's property.  This is used for accessing singular properties as well as for the "Every" specifier type for plural properties.
    */
    pub struct NSPropertySpecifier;

    #[cfg(feature = "Foundation_NSPropertySpecifier")]
    unsafe impl ClassType for NSPropertySpecifier {
        #[inherits(NSObject)]
        type Super = NSScriptObjectSpecifier;
    }
);

#[cfg(feature = "Foundation_NSPropertySpecifier")]
/**
  This returns all the objects for the specifier's property.  This is used for accessing singular properties as well as for the "Every" specifier type for plural properties.
*/
unsafe impl NSCoding for NSPropertySpecifier {}

#[cfg(feature = "Foundation_NSPropertySpecifier")]
/**
  This returns all the objects for the specifier's property.  This is used for accessing singular properties as well as for the "Every" specifier type for plural properties.
*/
unsafe impl NSObjectProtocol for NSPropertySpecifier {}

extern_methods!(
    /**
      This returns all the objects for the specifier's property.  This is used for accessing singular properties as well as for the "Every" specifier type for plural properties.
    */
    #[cfg(feature = "Foundation_NSPropertySpecifier")]
    unsafe impl NSPropertySpecifier {}
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "Foundation_NSRandomSpecifier")]
    /**
      A Random specifier returns an object chosen at random from the objects for the specifier's property.
    */
    pub struct NSRandomSpecifier;

    #[cfg(feature = "Foundation_NSRandomSpecifier")]
    unsafe impl ClassType for NSRandomSpecifier {
        #[inherits(NSObject)]
        type Super = NSScriptObjectSpecifier;
    }
);

#[cfg(feature = "Foundation_NSRandomSpecifier")]
/**
  A Random specifier returns an object chosen at random from the objects for the specifier's property.
*/
unsafe impl NSCoding for NSRandomSpecifier {}

#[cfg(feature = "Foundation_NSRandomSpecifier")]
/**
  A Random specifier returns an object chosen at random from the objects for the specifier's property.
*/
unsafe impl NSObjectProtocol for NSRandomSpecifier {}

extern_methods!(
    /**
      A Random specifier returns an object chosen at random from the objects for the specifier's property.
    */
    #[cfg(feature = "Foundation_NSRandomSpecifier")]
    unsafe impl NSRandomSpecifier {}
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "Foundation_NSRangeSpecifier")]
    /**
      A Range specifier returns a contiguous subset of the objects for the specifier's property.
    */
    pub struct NSRangeSpecifier;

    #[cfg(feature = "Foundation_NSRangeSpecifier")]
    unsafe impl ClassType for NSRangeSpecifier {
        #[inherits(NSObject)]
        type Super = NSScriptObjectSpecifier;
    }
);

#[cfg(feature = "Foundation_NSRangeSpecifier")]
/**
  A Range specifier returns a contiguous subset of the objects for the specifier's property.
*/
unsafe impl NSCoding for NSRangeSpecifier {}

#[cfg(feature = "Foundation_NSRangeSpecifier")]
/**
  A Range specifier returns a contiguous subset of the objects for the specifier's property.
*/
unsafe impl NSObjectProtocol for NSRangeSpecifier {}

extern_methods!(
    /**
      A Range specifier returns a contiguous subset of the objects for the specifier's property.
    */
    #[cfg(feature = "Foundation_NSRangeSpecifier")]
    unsafe impl NSRangeSpecifier {
        #[cfg(feature = "Foundation_NSCoder")]
        #[method_id(@__retain_semantics Init initWithCoder:)]
        pub unsafe fn initWithCoder(
            this: Option<Allocated<Self>>,
            in_coder: &NSCoder,
        ) -> Option<Id<Self>>;

        #[cfg(all(
            feature = "Foundation_NSScriptClassDescription",
            feature = "Foundation_NSString"
        ))]
        #[method_id(@__retain_semantics Init initWithContainerClassDescription:containerSpecifier:key:startSpecifier:endSpecifier:)]
        pub unsafe fn initWithContainerClassDescription_containerSpecifier_key_startSpecifier_endSpecifier(
            this: Option<Allocated<Self>>,
            class_desc: &NSScriptClassDescription,
            container: Option<&NSScriptObjectSpecifier>,
            property: &NSString,
            start_spec: Option<&NSScriptObjectSpecifier>,
            end_spec: Option<&NSScriptObjectSpecifier>,
        ) -> Id<Self>;

        #[method_id(@__retain_semantics Other startSpecifier)]
        pub unsafe fn startSpecifier(&self) -> Option<Id<NSScriptObjectSpecifier>>;

        #[method(setStartSpecifier:)]
        pub unsafe fn setStartSpecifier(&self, start_specifier: Option<&NSScriptObjectSpecifier>);

        #[method_id(@__retain_semantics Other endSpecifier)]
        pub unsafe fn endSpecifier(&self) -> Option<Id<NSScriptObjectSpecifier>>;

        #[method(setEndSpecifier:)]
        pub unsafe fn setEndSpecifier(&self, end_specifier: Option<&NSScriptObjectSpecifier>);
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "Foundation_NSRelativeSpecifier")]
    pub struct NSRelativeSpecifier;

    #[cfg(feature = "Foundation_NSRelativeSpecifier")]
    unsafe impl ClassType for NSRelativeSpecifier {
        #[inherits(NSObject)]
        type Super = NSScriptObjectSpecifier;
    }
);

#[cfg(feature = "Foundation_NSRelativeSpecifier")]
unsafe impl NSCoding for NSRelativeSpecifier {}

#[cfg(feature = "Foundation_NSRelativeSpecifier")]
unsafe impl NSObjectProtocol for NSRelativeSpecifier {}

extern_methods!(
    #[cfg(feature = "Foundation_NSRelativeSpecifier")]
    unsafe impl NSRelativeSpecifier {
        #[cfg(feature = "Foundation_NSCoder")]
        #[method_id(@__retain_semantics Init initWithCoder:)]
        pub unsafe fn initWithCoder(
            this: Option<Allocated<Self>>,
            in_coder: &NSCoder,
        ) -> Option<Id<Self>>;

        #[cfg(all(
            feature = "Foundation_NSScriptClassDescription",
            feature = "Foundation_NSString"
        ))]
        #[method_id(@__retain_semantics Init initWithContainerClassDescription:containerSpecifier:key:relativePosition:baseSpecifier:)]
        pub unsafe fn initWithContainerClassDescription_containerSpecifier_key_relativePosition_baseSpecifier(
            this: Option<Allocated<Self>>,
            class_desc: &NSScriptClassDescription,
            container: Option<&NSScriptObjectSpecifier>,
            property: &NSString,
            rel_pos: NSRelativePosition,
            base_specifier: Option<&NSScriptObjectSpecifier>,
        ) -> Id<Self>;

        #[method(relativePosition)]
        pub unsafe fn relativePosition(&self) -> NSRelativePosition;

        #[method(setRelativePosition:)]
        pub unsafe fn setRelativePosition(&self, relative_position: NSRelativePosition);

        #[method_id(@__retain_semantics Other baseSpecifier)]
        pub unsafe fn baseSpecifier(&self) -> Option<Id<NSScriptObjectSpecifier>>;

        #[method(setBaseSpecifier:)]
        pub unsafe fn setBaseSpecifier(&self, base_specifier: Option<&NSScriptObjectSpecifier>);
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "Foundation_NSUniqueIDSpecifier")]
    /**
      A Unique ID specifier returns the object with the specified ID.
    */
    pub struct NSUniqueIDSpecifier;

    #[cfg(feature = "Foundation_NSUniqueIDSpecifier")]
    unsafe impl ClassType for NSUniqueIDSpecifier {
        #[inherits(NSObject)]
        type Super = NSScriptObjectSpecifier;
    }
);

#[cfg(feature = "Foundation_NSUniqueIDSpecifier")]
/**
  A Unique ID specifier returns the object with the specified ID.
*/
unsafe impl NSCoding for NSUniqueIDSpecifier {}

#[cfg(feature = "Foundation_NSUniqueIDSpecifier")]
/**
  A Unique ID specifier returns the object with the specified ID.
*/
unsafe impl NSObjectProtocol for NSUniqueIDSpecifier {}

extern_methods!(
    /**
      A Unique ID specifier returns the object with the specified ID.
    */
    #[cfg(feature = "Foundation_NSUniqueIDSpecifier")]
    unsafe impl NSUniqueIDSpecifier {
        #[cfg(feature = "Foundation_NSCoder")]
        #[method_id(@__retain_semantics Init initWithCoder:)]
        pub unsafe fn initWithCoder(
            this: Option<Allocated<Self>>,
            in_coder: &NSCoder,
        ) -> Option<Id<Self>>;

        #[cfg(all(
            feature = "Foundation_NSScriptClassDescription",
            feature = "Foundation_NSString"
        ))]
        #[method_id(@__retain_semantics Init initWithContainerClassDescription:containerSpecifier:key:uniqueID:)]
        pub unsafe fn initWithContainerClassDescription_containerSpecifier_key_uniqueID(
            this: Option<Allocated<Self>>,
            class_desc: &NSScriptClassDescription,
            container: Option<&NSScriptObjectSpecifier>,
            property: &NSString,
            unique_id: &Object,
        ) -> Id<Self>;

        #[method_id(@__retain_semantics Other uniqueID)]
        pub unsafe fn uniqueID(&self) -> Id<Object>;

        #[method(setUniqueID:)]
        pub unsafe fn setUniqueID(&self, unique_id: &Object);
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "Foundation_NSWhoseSpecifier")]
    /**
      The "subelement" stuff is to support stuff like "the first word whose..."
    */
    pub struct NSWhoseSpecifier;

    #[cfg(feature = "Foundation_NSWhoseSpecifier")]
    unsafe impl ClassType for NSWhoseSpecifier {
        #[inherits(NSObject)]
        type Super = NSScriptObjectSpecifier;
    }
);

#[cfg(feature = "Foundation_NSWhoseSpecifier")]
/**
  The "subelement" stuff is to support stuff like "the first word whose..."
*/
unsafe impl NSCoding for NSWhoseSpecifier {}

#[cfg(feature = "Foundation_NSWhoseSpecifier")]
/**
  The "subelement" stuff is to support stuff like "the first word whose..."
*/
unsafe impl NSObjectProtocol for NSWhoseSpecifier {}

extern_methods!(
    /**
      The "subelement" stuff is to support stuff like "the first word whose..."
    */
    #[cfg(feature = "Foundation_NSWhoseSpecifier")]
    unsafe impl NSWhoseSpecifier {
        #[cfg(feature = "Foundation_NSCoder")]
        #[method_id(@__retain_semantics Init initWithCoder:)]
        pub unsafe fn initWithCoder(
            this: Option<Allocated<Self>>,
            in_coder: &NSCoder,
        ) -> Option<Id<Self>>;

        #[cfg(all(
            feature = "Foundation_NSScriptClassDescription",
            feature = "Foundation_NSScriptWhoseTest",
            feature = "Foundation_NSString"
        ))]
        #[method_id(@__retain_semantics Init initWithContainerClassDescription:containerSpecifier:key:test:)]
        pub unsafe fn initWithContainerClassDescription_containerSpecifier_key_test(
            this: Option<Allocated<Self>>,
            class_desc: &NSScriptClassDescription,
            container: Option<&NSScriptObjectSpecifier>,
            property: &NSString,
            test: &NSScriptWhoseTest,
        ) -> Id<Self>;

        #[cfg(feature = "Foundation_NSScriptWhoseTest")]
        #[method_id(@__retain_semantics Other test)]
        pub unsafe fn test(&self) -> Id<NSScriptWhoseTest>;

        #[cfg(feature = "Foundation_NSScriptWhoseTest")]
        #[method(setTest:)]
        pub unsafe fn setTest(&self, test: &NSScriptWhoseTest);

        #[method(startSubelementIdentifier)]
        pub unsafe fn startSubelementIdentifier(&self) -> NSWhoseSubelementIdentifier;

        #[method(setStartSubelementIdentifier:)]
        pub unsafe fn setStartSubelementIdentifier(
            &self,
            start_subelement_identifier: NSWhoseSubelementIdentifier,
        );

        #[method(startSubelementIndex)]
        pub unsafe fn startSubelementIndex(&self) -> NSInteger;

        #[method(setStartSubelementIndex:)]
        pub unsafe fn setStartSubelementIndex(&self, start_subelement_index: NSInteger);

        /**
          Only used if the startSubelementIdentifier == NSIndexSubelement
        */
        #[method(endSubelementIdentifier)]
        pub unsafe fn endSubelementIdentifier(&self) -> NSWhoseSubelementIdentifier;

        /**
          Only used if the startSubelementIdentifier == NSIndexSubelement
        */
        #[method(setEndSubelementIdentifier:)]
        pub unsafe fn setEndSubelementIdentifier(
            &self,
            end_subelement_identifier: NSWhoseSubelementIdentifier,
        );

        #[method(endSubelementIndex)]
        pub unsafe fn endSubelementIndex(&self) -> NSInteger;

        #[method(setEndSubelementIndex:)]
        pub unsafe fn setEndSubelementIndex(&self, end_subelement_index: NSInteger);
    }
);

extern_methods!(
    /// Methods declared on superclass `NSScriptObjectSpecifier`
    /**
      An Index specifiers return the object at the specified index for the specifier's property.  A negative index counts from the end of the array.
    */
    #[cfg(feature = "Foundation_NSIndexSpecifier")]
    unsafe impl NSIndexSpecifier {
        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Init initWithContainerSpecifier:key:)]
        pub unsafe fn initWithContainerSpecifier_key(
            this: Option<Allocated<Self>>,
            container: &NSScriptObjectSpecifier,
            property: &NSString,
        ) -> Id<Self>;

        #[cfg(all(
            feature = "Foundation_NSScriptClassDescription",
            feature = "Foundation_NSString"
        ))]
        #[method_id(@__retain_semantics Init initWithContainerClassDescription:containerSpecifier:key:)]
        pub unsafe fn initWithContainerClassDescription_containerSpecifier_key(
            this: Option<Allocated<Self>>,
            class_desc: &NSScriptClassDescription,
            container: Option<&NSScriptObjectSpecifier>,
            property: &NSString,
        ) -> Id<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSScriptObjectSpecifier`
    /**
      A Middle specifier returns the middle object from the objects for the specifier's property.  If there are an even number of objects it returns the object before the midpoint.
    */
    #[cfg(feature = "Foundation_NSMiddleSpecifier")]
    unsafe impl NSMiddleSpecifier {
        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Init initWithContainerSpecifier:key:)]
        pub unsafe fn initWithContainerSpecifier_key(
            this: Option<Allocated<Self>>,
            container: &NSScriptObjectSpecifier,
            property: &NSString,
        ) -> Id<Self>;

        #[cfg(all(
            feature = "Foundation_NSScriptClassDescription",
            feature = "Foundation_NSString"
        ))]
        #[method_id(@__retain_semantics Init initWithContainerClassDescription:containerSpecifier:key:)]
        pub unsafe fn initWithContainerClassDescription_containerSpecifier_key(
            this: Option<Allocated<Self>>,
            class_desc: &NSScriptClassDescription,
            container: Option<&NSScriptObjectSpecifier>,
            property: &NSString,
        ) -> Id<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSScriptObjectSpecifier`
    /**
      A Name specifier returns the object with the specified name.
    */
    #[cfg(feature = "Foundation_NSNameSpecifier")]
    unsafe impl NSNameSpecifier {
        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Init initWithContainerSpecifier:key:)]
        pub unsafe fn initWithContainerSpecifier_key(
            this: Option<Allocated<Self>>,
            container: &NSScriptObjectSpecifier,
            property: &NSString,
        ) -> Id<Self>;

        #[cfg(all(
            feature = "Foundation_NSScriptClassDescription",
            feature = "Foundation_NSString"
        ))]
        #[method_id(@__retain_semantics Init initWithContainerClassDescription:containerSpecifier:key:)]
        pub unsafe fn initWithContainerClassDescription_containerSpecifier_key(
            this: Option<Allocated<Self>>,
            class_desc: &NSScriptClassDescription,
            container: Option<&NSScriptObjectSpecifier>,
            property: &NSString,
        ) -> Id<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSScriptObjectSpecifier`
    /**
      This returns all the objects for the specifier's property.  This is used for accessing singular properties as well as for the "Every" specifier type for plural properties.
    */
    #[cfg(feature = "Foundation_NSPropertySpecifier")]
    unsafe impl NSPropertySpecifier {
        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Init initWithContainerSpecifier:key:)]
        pub unsafe fn initWithContainerSpecifier_key(
            this: Option<Allocated<Self>>,
            container: &NSScriptObjectSpecifier,
            property: &NSString,
        ) -> Id<Self>;

        #[cfg(all(
            feature = "Foundation_NSScriptClassDescription",
            feature = "Foundation_NSString"
        ))]
        #[method_id(@__retain_semantics Init initWithContainerClassDescription:containerSpecifier:key:)]
        pub unsafe fn initWithContainerClassDescription_containerSpecifier_key(
            this: Option<Allocated<Self>>,
            class_desc: &NSScriptClassDescription,
            container: Option<&NSScriptObjectSpecifier>,
            property: &NSString,
        ) -> Id<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSScriptObjectSpecifier`
    /**
      A Random specifier returns an object chosen at random from the objects for the specifier's property.
    */
    #[cfg(feature = "Foundation_NSRandomSpecifier")]
    unsafe impl NSRandomSpecifier {
        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Init initWithContainerSpecifier:key:)]
        pub unsafe fn initWithContainerSpecifier_key(
            this: Option<Allocated<Self>>,
            container: &NSScriptObjectSpecifier,
            property: &NSString,
        ) -> Id<Self>;

        #[cfg(all(
            feature = "Foundation_NSScriptClassDescription",
            feature = "Foundation_NSString"
        ))]
        #[method_id(@__retain_semantics Init initWithContainerClassDescription:containerSpecifier:key:)]
        pub unsafe fn initWithContainerClassDescription_containerSpecifier_key(
            this: Option<Allocated<Self>>,
            class_desc: &NSScriptClassDescription,
            container: Option<&NSScriptObjectSpecifier>,
            property: &NSString,
        ) -> Id<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSScriptObjectSpecifier`
    /**
      A Range specifier returns a contiguous subset of the objects for the specifier's property.
    */
    #[cfg(feature = "Foundation_NSRangeSpecifier")]
    unsafe impl NSRangeSpecifier {
        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Init initWithContainerSpecifier:key:)]
        pub unsafe fn initWithContainerSpecifier_key(
            this: Option<Allocated<Self>>,
            container: &NSScriptObjectSpecifier,
            property: &NSString,
        ) -> Id<Self>;

        #[cfg(all(
            feature = "Foundation_NSScriptClassDescription",
            feature = "Foundation_NSString"
        ))]
        #[method_id(@__retain_semantics Init initWithContainerClassDescription:containerSpecifier:key:)]
        pub unsafe fn initWithContainerClassDescription_containerSpecifier_key(
            this: Option<Allocated<Self>>,
            class_desc: &NSScriptClassDescription,
            container: Option<&NSScriptObjectSpecifier>,
            property: &NSString,
        ) -> Id<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSScriptObjectSpecifier`
    #[cfg(feature = "Foundation_NSRelativeSpecifier")]
    unsafe impl NSRelativeSpecifier {
        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Init initWithContainerSpecifier:key:)]
        pub unsafe fn initWithContainerSpecifier_key(
            this: Option<Allocated<Self>>,
            container: &NSScriptObjectSpecifier,
            property: &NSString,
        ) -> Id<Self>;

        #[cfg(all(
            feature = "Foundation_NSScriptClassDescription",
            feature = "Foundation_NSString"
        ))]
        #[method_id(@__retain_semantics Init initWithContainerClassDescription:containerSpecifier:key:)]
        pub unsafe fn initWithContainerClassDescription_containerSpecifier_key(
            this: Option<Allocated<Self>>,
            class_desc: &NSScriptClassDescription,
            container: Option<&NSScriptObjectSpecifier>,
            property: &NSString,
        ) -> Id<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSScriptObjectSpecifier`
    /**
      A Unique ID specifier returns the object with the specified ID.
    */
    #[cfg(feature = "Foundation_NSUniqueIDSpecifier")]
    unsafe impl NSUniqueIDSpecifier {
        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Init initWithContainerSpecifier:key:)]
        pub unsafe fn initWithContainerSpecifier_key(
            this: Option<Allocated<Self>>,
            container: &NSScriptObjectSpecifier,
            property: &NSString,
        ) -> Id<Self>;

        #[cfg(all(
            feature = "Foundation_NSScriptClassDescription",
            feature = "Foundation_NSString"
        ))]
        #[method_id(@__retain_semantics Init initWithContainerClassDescription:containerSpecifier:key:)]
        pub unsafe fn initWithContainerClassDescription_containerSpecifier_key(
            this: Option<Allocated<Self>>,
            class_desc: &NSScriptClassDescription,
            container: Option<&NSScriptObjectSpecifier>,
            property: &NSString,
        ) -> Id<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSScriptObjectSpecifier`
    /**
      The "subelement" stuff is to support stuff like "the first word whose..."
    */
    #[cfg(feature = "Foundation_NSWhoseSpecifier")]
    unsafe impl NSWhoseSpecifier {
        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Init initWithContainerSpecifier:key:)]
        pub unsafe fn initWithContainerSpecifier_key(
            this: Option<Allocated<Self>>,
            container: &NSScriptObjectSpecifier,
            property: &NSString,
        ) -> Id<Self>;

        #[cfg(all(
            feature = "Foundation_NSScriptClassDescription",
            feature = "Foundation_NSString"
        ))]
        #[method_id(@__retain_semantics Init initWithContainerClassDescription:containerSpecifier:key:)]
        pub unsafe fn initWithContainerClassDescription_containerSpecifier_key(
            this: Option<Allocated<Self>>,
            class_desc: &NSScriptClassDescription,
            container: Option<&NSScriptObjectSpecifier>,
            property: &NSString,
        ) -> Id<Self>;
    }
);
