//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "Foundation_NSExtensionContext")]
    /**
      Class representing the extension request's context
    */
    pub struct NSExtensionContext;

    #[cfg(feature = "Foundation_NSExtensionContext")]
    unsafe impl ClassType for NSExtensionContext {
        type Super = NSObject;
    }
);

#[cfg(feature = "Foundation_NSExtensionContext")]
/**
  Class representing the extension request's context
*/
unsafe impl NSObjectProtocol for NSExtensionContext {}

extern_methods!(
    /**
      Class representing the extension request's context
    */
    #[cfg(feature = "Foundation_NSExtensionContext")]
    unsafe impl NSExtensionContext {
        #[cfg(feature = "Foundation_NSArray")]
        /**
          The list of input NSExtensionItems associated with the context. If the context has no input items, this array will be empty.
        */
        #[method_id(@__retain_semantics Other inputItems)]
        pub unsafe fn inputItems(&self) -> Id<NSArray>;

        #[cfg(feature = "Foundation_NSArray")]
        #[method(completeRequestReturningItems:completionHandler:)]
        pub unsafe fn completeRequestReturningItems_completionHandler(
            &self,
            items: Option<&NSArray>,
            completion_handler: Option<&Block<(Bool,), ()>>,
        );

        #[cfg(feature = "Foundation_NSError")]
        #[method(cancelRequestWithError:)]
        pub unsafe fn cancelRequestWithError(&self, error: &NSError);

        #[cfg(feature = "Foundation_NSURL")]
        #[method(openURL:completionHandler:)]
        pub unsafe fn openURL_completionHandler(
            &self,
            url: &NSURL,
            completion_handler: Option<&Block<(Bool,), ()>>,
        );
    }
);

extern_static!(NSExtensionItemsAndErrorsKey: Option<&'static NSString>);

extern_static!(NSExtensionHostWillEnterForegroundNotification: Option<&'static NSString>);

extern_static!(NSExtensionHostDidEnterBackgroundNotification: Option<&'static NSString>);

extern_static!(NSExtensionHostWillResignActiveNotification: Option<&'static NSString>);

extern_static!(NSExtensionHostDidBecomeActiveNotification: Option<&'static NSString>);
