//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;

pub type NSUserScriptTaskCompletionHandler = *mut Block<(*mut NSError,), ()>;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "Foundation_NSUserScriptTask")]
    #[cfg(not(any(target_os = "ios", target_os = "tvos", target_os = "watchos")))]
    pub struct NSUserScriptTask;

    #[cfg(not(any(target_os = "ios", target_os = "tvos", target_os = "watchos")))]
    #[cfg(feature = "Foundation_NSUserScriptTask")]
    unsafe impl ClassType for NSUserScriptTask {
        type Super = NSObject;
    }
);

#[cfg(feature = "Foundation_NSUserScriptTask")]
#[cfg(not(any(target_os = "ios", target_os = "tvos", target_os = "watchos")))]
unsafe impl NSObjectProtocol for NSUserScriptTask {}

extern_methods!(
    #[cfg(feature = "Foundation_NSUserScriptTask")]
    #[cfg(not(any(target_os = "ios", target_os = "tvos", target_os = "watchos")))]
    unsafe impl NSUserScriptTask {
        #[cfg(not(any(target_os = "ios", target_os = "tvos", target_os = "watchos")))]
        #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSURL"))]
        #[method_id(@__retain_semantics Init initWithURL:error:_)]
        pub unsafe fn initWithURL_error(
            this: Option<Allocated<Self>>,
            url: &NSURL,
        ) -> Result<Id<Self>, Id<NSError>>;

        #[cfg(not(any(target_os = "ios", target_os = "tvos", target_os = "watchos")))]
        #[cfg(feature = "Foundation_NSURL")]
        #[method_id(@__retain_semantics Other scriptURL)]
        pub unsafe fn scriptURL(&self) -> Id<NSURL>;

        #[cfg(not(any(target_os = "ios", target_os = "tvos", target_os = "watchos")))]
        #[method(executeWithCompletionHandler:)]
        pub unsafe fn executeWithCompletionHandler(
            &self,
            handler: NSUserScriptTaskCompletionHandler,
        );
    }
);

pub type NSUserUnixTaskCompletionHandler = *mut Block<(*mut NSError,), ()>;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "Foundation_NSUserUnixTask")]
    #[cfg(not(any(target_os = "ios", target_os = "tvos", target_os = "watchos")))]
    pub struct NSUserUnixTask;

    #[cfg(not(any(target_os = "ios", target_os = "tvos", target_os = "watchos")))]
    #[cfg(feature = "Foundation_NSUserUnixTask")]
    unsafe impl ClassType for NSUserUnixTask {
        #[inherits(NSObject)]
        type Super = NSUserScriptTask;
    }
);

#[cfg(feature = "Foundation_NSUserUnixTask")]
#[cfg(not(any(target_os = "ios", target_os = "tvos", target_os = "watchos")))]
unsafe impl NSObjectProtocol for NSUserUnixTask {}

extern_methods!(
    #[cfg(feature = "Foundation_NSUserUnixTask")]
    #[cfg(not(any(target_os = "ios", target_os = "tvos", target_os = "watchos")))]
    unsafe impl NSUserUnixTask {
        #[cfg(not(any(target_os = "ios", target_os = "tvos", target_os = "watchos")))]
        #[cfg(feature = "Foundation_NSFileHandle")]
        #[method_id(@__retain_semantics Other standardInput)]
        pub unsafe fn standardInput(&self) -> Option<Id<NSFileHandle>>;

        #[cfg(not(any(target_os = "ios", target_os = "tvos", target_os = "watchos")))]
        #[cfg(feature = "Foundation_NSFileHandle")]
        #[method(setStandardInput:)]
        pub unsafe fn setStandardInput(&self, standard_input: Option<&NSFileHandle>);

        #[cfg(not(any(target_os = "ios", target_os = "tvos", target_os = "watchos")))]
        #[cfg(feature = "Foundation_NSFileHandle")]
        #[method_id(@__retain_semantics Other standardOutput)]
        pub unsafe fn standardOutput(&self) -> Option<Id<NSFileHandle>>;

        #[cfg(not(any(target_os = "ios", target_os = "tvos", target_os = "watchos")))]
        #[cfg(feature = "Foundation_NSFileHandle")]
        #[method(setStandardOutput:)]
        pub unsafe fn setStandardOutput(&self, standard_output: Option<&NSFileHandle>);

        #[cfg(not(any(target_os = "ios", target_os = "tvos", target_os = "watchos")))]
        #[cfg(feature = "Foundation_NSFileHandle")]
        #[method_id(@__retain_semantics Other standardError)]
        pub unsafe fn standardError(&self) -> Option<Id<NSFileHandle>>;

        #[cfg(not(any(target_os = "ios", target_os = "tvos", target_os = "watchos")))]
        #[cfg(feature = "Foundation_NSFileHandle")]
        #[method(setStandardError:)]
        pub unsafe fn setStandardError(&self, standard_error: Option<&NSFileHandle>);

        #[cfg(not(any(target_os = "ios", target_os = "tvos", target_os = "watchos")))]
        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method(executeWithArguments:completionHandler:)]
        pub unsafe fn executeWithArguments_completionHandler(
            &self,
            arguments: Option<&NSArray<NSString>>,
            handler: NSUserUnixTaskCompletionHandler,
        );
    }
);

pub type NSUserAppleScriptTaskCompletionHandler =
    *mut Block<(*mut NSAppleEventDescriptor, *mut NSError), ()>;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "Foundation_NSUserAppleScriptTask")]
    #[cfg(not(any(target_os = "ios", target_os = "tvos", target_os = "watchos")))]
    pub struct NSUserAppleScriptTask;

    #[cfg(not(any(target_os = "ios", target_os = "tvos", target_os = "watchos")))]
    #[cfg(feature = "Foundation_NSUserAppleScriptTask")]
    unsafe impl ClassType for NSUserAppleScriptTask {
        #[inherits(NSObject)]
        type Super = NSUserScriptTask;
    }
);

#[cfg(feature = "Foundation_NSUserAppleScriptTask")]
#[cfg(not(any(target_os = "ios", target_os = "tvos", target_os = "watchos")))]
unsafe impl NSObjectProtocol for NSUserAppleScriptTask {}

extern_methods!(
    #[cfg(feature = "Foundation_NSUserAppleScriptTask")]
    #[cfg(not(any(target_os = "ios", target_os = "tvos", target_os = "watchos")))]
    unsafe impl NSUserAppleScriptTask {
        #[cfg(not(any(target_os = "ios", target_os = "tvos", target_os = "watchos")))]
        #[cfg(feature = "Foundation_NSAppleEventDescriptor")]
        #[method(executeWithAppleEvent:completionHandler:)]
        pub unsafe fn executeWithAppleEvent_completionHandler(
            &self,
            event: Option<&NSAppleEventDescriptor>,
            handler: NSUserAppleScriptTaskCompletionHandler,
        );
    }
);

pub type NSUserAutomatorTaskCompletionHandler = *mut Block<(*mut Object, *mut NSError), ()>;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "Foundation_NSUserAutomatorTask")]
    #[cfg(not(any(target_os = "ios", target_os = "tvos", target_os = "watchos")))]
    pub struct NSUserAutomatorTask;

    #[cfg(not(any(target_os = "ios", target_os = "tvos", target_os = "watchos")))]
    #[cfg(feature = "Foundation_NSUserAutomatorTask")]
    unsafe impl ClassType for NSUserAutomatorTask {
        #[inherits(NSObject)]
        type Super = NSUserScriptTask;
    }
);

#[cfg(feature = "Foundation_NSUserAutomatorTask")]
#[cfg(not(any(target_os = "ios", target_os = "tvos", target_os = "watchos")))]
unsafe impl NSObjectProtocol for NSUserAutomatorTask {}

extern_methods!(
    #[cfg(feature = "Foundation_NSUserAutomatorTask")]
    #[cfg(not(any(target_os = "ios", target_os = "tvos", target_os = "watchos")))]
    unsafe impl NSUserAutomatorTask {
        #[cfg(not(any(target_os = "ios", target_os = "tvos", target_os = "watchos")))]
        #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other variables)]
        pub unsafe fn variables(&self) -> Option<Id<NSDictionary<NSString, Object>>>;

        #[cfg(not(any(target_os = "ios", target_os = "tvos", target_os = "watchos")))]
        #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSString"))]
        #[method(setVariables:)]
        pub unsafe fn setVariables(&self, variables: Option<&NSDictionary<NSString, Object>>);

        #[cfg(not(any(target_os = "ios", target_os = "tvos", target_os = "watchos")))]
        #[method(executeWithInput:completionHandler:)]
        pub unsafe fn executeWithInput_completionHandler(
            &self,
            input: Option<&ProtocolObject<dyn NSSecureCoding>>,
            handler: NSUserAutomatorTaskCompletionHandler,
        );
    }
);

extern_methods!(
    /// Methods declared on superclass `NSUserScriptTask`
    #[cfg(feature = "Foundation_NSUserUnixTask")]
    #[cfg(not(any(target_os = "ios", target_os = "tvos", target_os = "watchos")))]
    unsafe impl NSUserUnixTask {
        #[cfg(not(any(target_os = "ios", target_os = "tvos", target_os = "watchos")))]
        #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSURL"))]
        #[method_id(@__retain_semantics Init initWithURL:error:_)]
        pub unsafe fn initWithURL_error(
            this: Option<Allocated<Self>>,
            url: &NSURL,
        ) -> Result<Id<Self>, Id<NSError>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSUserScriptTask`
    #[cfg(feature = "Foundation_NSUserAppleScriptTask")]
    #[cfg(not(any(target_os = "ios", target_os = "tvos", target_os = "watchos")))]
    unsafe impl NSUserAppleScriptTask {
        #[cfg(not(any(target_os = "ios", target_os = "tvos", target_os = "watchos")))]
        #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSURL"))]
        #[method_id(@__retain_semantics Init initWithURL:error:_)]
        pub unsafe fn initWithURL_error(
            this: Option<Allocated<Self>>,
            url: &NSURL,
        ) -> Result<Id<Self>, Id<NSError>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSUserScriptTask`
    #[cfg(feature = "Foundation_NSUserAutomatorTask")]
    #[cfg(not(any(target_os = "ios", target_os = "tvos", target_os = "watchos")))]
    unsafe impl NSUserAutomatorTask {
        #[cfg(not(any(target_os = "ios", target_os = "tvos", target_os = "watchos")))]
        #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSURL"))]
        #[method_id(@__retain_semantics Init initWithURL:error:_)]
        pub unsafe fn initWithURL_error(
            this: Option<Allocated<Self>>,
            url: &NSURL,
        ) -> Result<Id<Self>, Id<NSError>>;
    }
);
