//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::CoreData::*;
use crate::Foundation::*;

ns_enum!(
    #[underlying(NSUInteger)]
    pub enum NSDeleteRule {
        NSNoActionDeleteRule = 0,
        NSNullifyDeleteRule = 1,
        NSCascadeDeleteRule = 2,
        NSDenyDeleteRule = 3,
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "CoreData_NSRelationshipDescription")]
    /**
      Relationships represent references to other objects. They usually come in pairs, where the reference back is called the "inverse".
    */
    pub struct NSRelationshipDescription;

    #[cfg(feature = "CoreData_NSRelationshipDescription")]
    unsafe impl ClassType for NSRelationshipDescription {
        #[inherits(NSObject)]
        type Super = NSPropertyDescription;
    }
);

#[cfg(feature = "CoreData_NSRelationshipDescription")]
/**
  Relationships represent references to other objects. They usually come in pairs, where the reference back is called the "inverse".
*/
unsafe impl NSCoding for NSRelationshipDescription {}

#[cfg(feature = "CoreData_NSRelationshipDescription")]
/**
  Relationships represent references to other objects. They usually come in pairs, where the reference back is called the "inverse".
*/
unsafe impl NSObjectProtocol for NSRelationshipDescription {}

extern_methods!(
    /**
      Relationships represent references to other objects. They usually come in pairs, where the reference back is called the "inverse".
    */
    #[cfg(feature = "CoreData_NSRelationshipDescription")]
    unsafe impl NSRelationshipDescription {
        #[cfg(feature = "CoreData_NSEntityDescription")]
        #[method_id(@__retain_semantics Other destinationEntity)]
        pub unsafe fn destinationEntity(&self) -> Option<Id<NSEntityDescription>>;

        #[cfg(feature = "CoreData_NSEntityDescription")]
        #[method(setDestinationEntity:)]
        pub unsafe fn setDestinationEntity(&self, destination_entity: Option<&NSEntityDescription>);

        #[method_id(@__retain_semantics Other inverseRelationship)]
        pub unsafe fn inverseRelationship(&self) -> Option<Id<NSRelationshipDescription>>;

        #[method(setInverseRelationship:)]
        pub unsafe fn setInverseRelationship(
            &self,
            inverse_relationship: Option<&NSRelationshipDescription>,
        );

        /**
          Min and max count indicate the number of objects referenced (1/1 for a to-one relationship, 0 for the max count means undefined) - note that the counts are only enforced if the relationship value is not nil/"empty" (so as long as the relationship value is optional, there might be zero objects in the relationship, which might be less than the min count)
        */
        #[method(maxCount)]
        pub unsafe fn maxCount(&self) -> NSUInteger;

        /**
          Min and max count indicate the number of objects referenced (1/1 for a to-one relationship, 0 for the max count means undefined) - note that the counts are only enforced if the relationship value is not nil/"empty" (so as long as the relationship value is optional, there might be zero objects in the relationship, which might be less than the min count)
        */
        #[method(setMaxCount:)]
        pub unsafe fn setMaxCount(&self, max_count: NSUInteger);

        #[method(minCount)]
        pub unsafe fn minCount(&self) -> NSUInteger;

        #[method(setMinCount:)]
        pub unsafe fn setMinCount(&self, min_count: NSUInteger);

        #[method(deleteRule)]
        pub unsafe fn deleteRule(&self) -> NSDeleteRule;

        #[method(setDeleteRule:)]
        pub unsafe fn setDeleteRule(&self, delete_rule: NSDeleteRule);

        /**
          convenience method to test whether the relationship is to-one or to-many
        */
        #[method(isToMany)]
        pub unsafe fn isToMany(&self) -> bool;

        #[cfg(feature = "Foundation_NSData")]
        /**
          Returns the version hash for the relationship.  This value includes the versionHash information from the NSPropertyDescription superclass, the name of the destination entity and the inverse relationship, and the min and max count.
        */
        #[method_id(@__retain_semantics Other versionHash)]
        pub unsafe fn versionHash(&self) -> Id<NSData>;

        #[method(isOrdered)]
        pub unsafe fn isOrdered(&self) -> bool;

        #[method(setOrdered:)]
        pub unsafe fn setOrdered(&self, ordered: bool);
    }
);
