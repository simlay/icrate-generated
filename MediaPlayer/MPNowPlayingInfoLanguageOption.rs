//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::Foundation::*;
use crate::MediaPlayer::*;

extern_static!(MPLanguageOptionCharacteristicIsMainProgramContent: &'static NSString);

extern_static!(MPLanguageOptionCharacteristicIsAuxiliaryContent: &'static NSString);

extern_static!(MPLanguageOptionCharacteristicContainsOnlyForcedSubtitles: &'static NSString);

extern_static!(MPLanguageOptionCharacteristicTranscribesSpokenDialog: &'static NSString);

extern_static!(MPLanguageOptionCharacteristicDescribesMusicAndSound: &'static NSString);

extern_static!(MPLanguageOptionCharacteristicEasyToRead: &'static NSString);

extern_static!(MPLanguageOptionCharacteristicDescribesVideo: &'static NSString);

extern_static!(MPLanguageOptionCharacteristicLanguageTranslation: &'static NSString);

extern_static!(MPLanguageOptionCharacteristicDubbedTranslation: &'static NSString);

extern_static!(MPLanguageOptionCharacteristicVoiceOverTranslation: &'static NSString);

ns_enum!(
    #[underlying(NSUInteger)]
    pub enum MPNowPlayingInfoLanguageOptionType {
        MPNowPlayingInfoLanguageOptionTypeAudible = 0,
        MPNowPlayingInfoLanguageOptionTypeLegible = 1,
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "MediaPlayer_MPNowPlayingInfoLanguageOption")]
    /**
      Represents a single language option option.
    */
    pub struct MPNowPlayingInfoLanguageOption;

    #[cfg(feature = "MediaPlayer_MPNowPlayingInfoLanguageOption")]
    unsafe impl ClassType for MPNowPlayingInfoLanguageOption {
        type Super = NSObject;
    }
);

#[cfg(feature = "MediaPlayer_MPNowPlayingInfoLanguageOption")]
/**
  Represents a single language option option.
*/
unsafe impl NSObjectProtocol for MPNowPlayingInfoLanguageOption {}

extern_methods!(
    /**
      Represents a single language option option.
    */
    #[cfg(feature = "MediaPlayer_MPNowPlayingInfoLanguageOption")]
    unsafe impl MPNowPlayingInfoLanguageOption {
        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Init initWithType:languageTag:characteristics:displayName:identifier:)]
        pub unsafe fn initWithType_languageTag_characteristics_displayName_identifier(
            this: Option<Allocated<Self>>,
            language_option_type: MPNowPlayingInfoLanguageOptionType,
            language_tag: &NSString,
            language_option_characteristics: Option<&NSArray<NSString>>,
            display_name: &NSString,
            identifier: &NSString,
        ) -> Id<Self>;

        #[method(isAutomaticLegibleLanguageOption)]
        pub unsafe fn isAutomaticLegibleLanguageOption(&self) -> bool;

        #[method(isAutomaticAudibleLanguageOption)]
        pub unsafe fn isAutomaticAudibleLanguageOption(&self) -> bool;

        /**
          The type of language option.
        */
        #[method(languageOptionType)]
        pub unsafe fn languageOptionType(&self) -> MPNowPlayingInfoLanguageOptionType;

        #[cfg(feature = "Foundation_NSString")]
        /**
          The IETF BCP 47 language tag.
         A nil languageTag reprsents that this option should be disabled.
         A languageTag with the value of MPLangaugeOptionAutoLangaugeTag represents
         that the best langauge based on the system preferences should be used.
        */
        #[method_id(@__retain_semantics Other languageTag)]
        pub unsafe fn languageTag(&self) -> Option<Id<NSString>>;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        /**
          Characteristics describing the content of the language options.
         See the LanguageOptionCharacteristics for the most commonly used values.
        */
        #[method_id(@__retain_semantics Other languageOptionCharacteristics)]
        pub unsafe fn languageOptionCharacteristics(&self) -> Option<Id<NSArray<NSString>>>;

        #[cfg(feature = "Foundation_NSString")]
        /**
          A user presentable display name for this option.
        */
        #[method_id(@__retain_semantics Other displayName)]
        pub unsafe fn displayName(&self) -> Option<Id<NSString>>;

        #[cfg(feature = "Foundation_NSString")]
        /**
          A unique identifier representing this option.
        */
        #[method_id(@__retain_semantics Other identifier)]
        pub unsafe fn identifier(&self) -> Option<Id<NSString>>;
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "MediaPlayer_MPNowPlayingInfoLanguageOptionGroup")]
    /**
      Represents a mutually exclusive group of language options.
     Only one language option within a given group may be active at a time.
    */
    pub struct MPNowPlayingInfoLanguageOptionGroup;

    #[cfg(feature = "MediaPlayer_MPNowPlayingInfoLanguageOptionGroup")]
    unsafe impl ClassType for MPNowPlayingInfoLanguageOptionGroup {
        type Super = NSObject;
    }
);

#[cfg(feature = "MediaPlayer_MPNowPlayingInfoLanguageOptionGroup")]
/**
  Represents a mutually exclusive group of language options.
 Only one language option within a given group may be active at a time.
*/
unsafe impl NSObjectProtocol for MPNowPlayingInfoLanguageOptionGroup {}

extern_methods!(
    /**
      Represents a mutually exclusive group of language options.
     Only one language option within a given group may be active at a time.
    */
    #[cfg(feature = "MediaPlayer_MPNowPlayingInfoLanguageOptionGroup")]
    unsafe impl MPNowPlayingInfoLanguageOptionGroup {
        #[cfg(all(
            feature = "Foundation_NSArray",
            feature = "MediaPlayer_MPNowPlayingInfoLanguageOption"
        ))]
        #[method_id(@__retain_semantics Init initWithLanguageOptions:defaultLanguageOption:allowEmptySelection:)]
        pub unsafe fn initWithLanguageOptions_defaultLanguageOption_allowEmptySelection(
            this: Option<Allocated<Self>>,
            language_options: &NSArray<MPNowPlayingInfoLanguageOption>,
            default_language_option: Option<&MPNowPlayingInfoLanguageOption>,
            allow_empty_selection: bool,
        ) -> Id<Self>;

        #[cfg(all(
            feature = "Foundation_NSArray",
            feature = "MediaPlayer_MPNowPlayingInfoLanguageOption"
        ))]
        /**
          The available language options within this group.
        */
        #[method_id(@__retain_semantics Other languageOptions)]
        pub unsafe fn languageOptions(&self) -> Id<NSArray<MPNowPlayingInfoLanguageOption>>;

        #[cfg(feature = "MediaPlayer_MPNowPlayingInfoLanguageOption")]
        /**
          The default language option, if any, within this group.
        */
        #[method_id(@__retain_semantics Other defaultLanguageOption)]
        pub unsafe fn defaultLanguageOption(&self) -> Option<Id<MPNowPlayingInfoLanguageOption>>;

        /**
          Indicates whether a selection in this group is required at all times.
        */
        #[method(allowEmptySelection)]
        pub unsafe fn allowEmptySelection(&self) -> bool;
    }
);
