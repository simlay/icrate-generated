//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::Foundation::*;
use crate::MediaPlayer::*;

ns_enum!(
    #[underlying(NSInteger)]
    pub enum MPRemoteCommandHandlerStatus {
        MPRemoteCommandHandlerStatusSuccess = 0,
        MPRemoteCommandHandlerStatusNoSuchContent = 100,
        MPRemoteCommandHandlerStatusNoActionableNowPlayingItem = 110,
        MPRemoteCommandHandlerStatusDeviceNotFound = 120,
        MPRemoteCommandHandlerStatusCommandFailed = 200,
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "MediaPlayer_MPRemoteCommand")]
    pub struct MPRemoteCommand;

    #[cfg(feature = "MediaPlayer_MPRemoteCommand")]
    unsafe impl ClassType for MPRemoteCommand {
        type Super = NSObject;
    }
);

#[cfg(feature = "MediaPlayer_MPRemoteCommand")]
unsafe impl NSObjectProtocol for MPRemoteCommand {}

extern_methods!(
    #[cfg(feature = "MediaPlayer_MPRemoteCommand")]
    unsafe impl MPRemoteCommand {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Id<Self>;

        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

        /**
          Whether a button (for example) should be enabled and tappable for this
         particular command.
        */
        #[method(isEnabled)]
        pub unsafe fn isEnabled(&self) -> bool;

        /**
          Whether a button (for example) should be enabled and tappable for this
         particular command.
        */
        #[method(setEnabled:)]
        pub unsafe fn setEnabled(&self, enabled: bool);

        #[method(addTarget:action:)]
        pub unsafe fn addTarget_action(&self, target: &Object, action: Sel);

        #[method(removeTarget:action:)]
        pub unsafe fn removeTarget_action(&self, target: &Object, action: Option<Sel>);

        #[method(removeTarget:)]
        pub unsafe fn removeTarget(&self, target: Option<&Object>);

        #[cfg(feature = "MediaPlayer_MPRemoteCommandEvent")]
        #[method_id(@__retain_semantics Other addTargetWithHandler:)]
        pub unsafe fn addTargetWithHandler(
            &self,
            handler: &Block<(NonNull<MPRemoteCommandEvent>,), MPRemoteCommandHandlerStatus>,
        ) -> Id<Object>;
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "MediaPlayer_MPSkipIntervalCommand")]
    pub struct MPSkipIntervalCommand;

    #[cfg(feature = "MediaPlayer_MPSkipIntervalCommand")]
    unsafe impl ClassType for MPSkipIntervalCommand {
        #[inherits(NSObject)]
        type Super = MPRemoteCommand;
    }
);

#[cfg(feature = "MediaPlayer_MPSkipIntervalCommand")]
unsafe impl NSObjectProtocol for MPSkipIntervalCommand {}

extern_methods!(
    #[cfg(feature = "MediaPlayer_MPSkipIntervalCommand")]
    unsafe impl MPSkipIntervalCommand {
        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSNumber"))]
        /**
          An array of NSNumbers (NSTimeIntervals) that contain preferred skip intervals.
        */
        #[method_id(@__retain_semantics Other preferredIntervals)]
        pub unsafe fn preferredIntervals(&self) -> Id<NSArray<NSNumber>>;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSNumber"))]
        /**
          An array of NSNumbers (NSTimeIntervals) that contain preferred skip intervals.
        */
        #[method(setPreferredIntervals:)]
        pub unsafe fn setPreferredIntervals(&self, preferred_intervals: &NSArray<NSNumber>);
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "MediaPlayer_MPFeedbackCommand")]
    pub struct MPFeedbackCommand;

    #[cfg(feature = "MediaPlayer_MPFeedbackCommand")]
    unsafe impl ClassType for MPFeedbackCommand {
        #[inherits(NSObject)]
        type Super = MPRemoteCommand;
    }
);

#[cfg(feature = "MediaPlayer_MPFeedbackCommand")]
unsafe impl NSObjectProtocol for MPFeedbackCommand {}

extern_methods!(
    #[cfg(feature = "MediaPlayer_MPFeedbackCommand")]
    unsafe impl MPFeedbackCommand {
        /**
          Whether the feedback command is in an "active" state. An example of when a
         feedback command would be active is if the user already "liked" a particular
         content item.
        */
        #[method(isActive)]
        pub unsafe fn isActive(&self) -> bool;

        /**
          Whether the feedback command is in an "active" state. An example of when a
         feedback command would be active is if the user already "liked" a particular
         content item.
        */
        #[method(setActive:)]
        pub unsafe fn setActive(&self, active: bool);

        #[cfg(feature = "Foundation_NSString")]
        /**
          A localized string briefly describing the context of the command.
        */
        #[method_id(@__retain_semantics Other localizedTitle)]
        pub unsafe fn localizedTitle(&self) -> Id<NSString>;

        #[cfg(feature = "Foundation_NSString")]
        /**
          A localized string briefly describing the context of the command.
        */
        #[method(setLocalizedTitle:)]
        pub unsafe fn setLocalizedTitle(&self, localized_title: &NSString);

        #[cfg(feature = "Foundation_NSString")]
        /**
          An optional shorter version of the localized title for this feedback
         command. MediaPlayer uses this property to display this command's title on
         remote control interfaces with little screen space.
        */
        #[method_id(@__retain_semantics Other localizedShortTitle)]
        pub unsafe fn localizedShortTitle(&self) -> Id<NSString>;

        #[cfg(feature = "Foundation_NSString")]
        /**
          An optional shorter version of the localized title for this feedback
         command. MediaPlayer uses this property to display this command's title on
         remote control interfaces with little screen space.
        */
        #[method(setLocalizedShortTitle:)]
        pub unsafe fn setLocalizedShortTitle(&self, localized_short_title: &NSString);
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "MediaPlayer_MPRatingCommand")]
    pub struct MPRatingCommand;

    #[cfg(feature = "MediaPlayer_MPRatingCommand")]
    unsafe impl ClassType for MPRatingCommand {
        #[inherits(NSObject)]
        type Super = MPRemoteCommand;
    }
);

#[cfg(feature = "MediaPlayer_MPRatingCommand")]
unsafe impl NSObjectProtocol for MPRatingCommand {}

extern_methods!(
    #[cfg(feature = "MediaPlayer_MPRatingCommand")]
    unsafe impl MPRatingCommand {
        /**
          Minimum rating for the command.
        */
        #[method(minimumRating)]
        pub unsafe fn minimumRating(&self) -> c_float;

        /**
          Minimum rating for the command.
        */
        #[method(setMinimumRating:)]
        pub unsafe fn setMinimumRating(&self, minimum_rating: c_float);

        /**
          Maximum rating for the command.
        */
        #[method(maximumRating)]
        pub unsafe fn maximumRating(&self) -> c_float;

        /**
          Maximum rating for the command.
        */
        #[method(setMaximumRating:)]
        pub unsafe fn setMaximumRating(&self, maximum_rating: c_float);
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "MediaPlayer_MPChangePlaybackRateCommand")]
    pub struct MPChangePlaybackRateCommand;

    #[cfg(feature = "MediaPlayer_MPChangePlaybackRateCommand")]
    unsafe impl ClassType for MPChangePlaybackRateCommand {
        #[inherits(NSObject)]
        type Super = MPRemoteCommand;
    }
);

#[cfg(feature = "MediaPlayer_MPChangePlaybackRateCommand")]
unsafe impl NSObjectProtocol for MPChangePlaybackRateCommand {}

extern_methods!(
    #[cfg(feature = "MediaPlayer_MPChangePlaybackRateCommand")]
    unsafe impl MPChangePlaybackRateCommand {
        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSNumber"))]
        /**
          An array of NSNumbers (floats) that contain supported playback rates that
         the command can send.
        */
        #[method_id(@__retain_semantics Other supportedPlaybackRates)]
        pub unsafe fn supportedPlaybackRates(&self) -> Id<NSArray<NSNumber>>;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSNumber"))]
        /**
          An array of NSNumbers (floats) that contain supported playback rates that
         the command can send.
        */
        #[method(setSupportedPlaybackRates:)]
        pub unsafe fn setSupportedPlaybackRates(
            &self,
            supported_playback_rates: &NSArray<NSNumber>,
        );
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "MediaPlayer_MPChangePlaybackPositionCommand")]
    /**
      Command for changing the current playback position in a now playing item.
     Sends out MPChangePlaybackPositionCommandEvents.
    */
    pub struct MPChangePlaybackPositionCommand;

    #[cfg(feature = "MediaPlayer_MPChangePlaybackPositionCommand")]
    unsafe impl ClassType for MPChangePlaybackPositionCommand {
        #[inherits(NSObject)]
        type Super = MPRemoteCommand;
    }
);

#[cfg(feature = "MediaPlayer_MPChangePlaybackPositionCommand")]
/**
  Command for changing the current playback position in a now playing item.
 Sends out MPChangePlaybackPositionCommandEvents.
*/
unsafe impl NSObjectProtocol for MPChangePlaybackPositionCommand {}

extern_methods!(
    /**
      Command for changing the current playback position in a now playing item.
     Sends out MPChangePlaybackPositionCommandEvents.
    */
    #[cfg(feature = "MediaPlayer_MPChangePlaybackPositionCommand")]
    unsafe impl MPChangePlaybackPositionCommand {}
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "MediaPlayer_MPChangeShuffleModeCommand")]
    /**
      Command for changing the current shuffle mode to use during playback. To
     update the system's current representation of your app's shuffle mode, set
     the currentShuffleType property on this command to the proper shuffle type
     value.
    */
    pub struct MPChangeShuffleModeCommand;

    #[cfg(feature = "MediaPlayer_MPChangeShuffleModeCommand")]
    unsafe impl ClassType for MPChangeShuffleModeCommand {
        #[inherits(NSObject)]
        type Super = MPRemoteCommand;
    }
);

#[cfg(feature = "MediaPlayer_MPChangeShuffleModeCommand")]
/**
  Command for changing the current shuffle mode to use during playback. To
 update the system's current representation of your app's shuffle mode, set
 the currentShuffleType property on this command to the proper shuffle type
 value.
*/
unsafe impl NSObjectProtocol for MPChangeShuffleModeCommand {}

extern_methods!(
    /**
      Command for changing the current shuffle mode to use during playback. To
     update the system's current representation of your app's shuffle mode, set
     the currentShuffleType property on this command to the proper shuffle type
     value.
    */
    #[cfg(feature = "MediaPlayer_MPChangeShuffleModeCommand")]
    unsafe impl MPChangeShuffleModeCommand {
        /**
          The app's current shuffle type.
        */
        #[method(currentShuffleType)]
        pub unsafe fn currentShuffleType(&self) -> MPShuffleType;

        /**
          The app's current shuffle type.
        */
        #[method(setCurrentShuffleType:)]
        pub unsafe fn setCurrentShuffleType(&self, current_shuffle_type: MPShuffleType);
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "MediaPlayer_MPChangeRepeatModeCommand")]
    /**
      Command for changing the current repeat mode to use during playback. To
     update the system's current representation of your app's repeat mode, set
     the currentRepeatType property on this command to the proper repeat type
     value.
    */
    pub struct MPChangeRepeatModeCommand;

    #[cfg(feature = "MediaPlayer_MPChangeRepeatModeCommand")]
    unsafe impl ClassType for MPChangeRepeatModeCommand {
        #[inherits(NSObject)]
        type Super = MPRemoteCommand;
    }
);

#[cfg(feature = "MediaPlayer_MPChangeRepeatModeCommand")]
/**
  Command for changing the current repeat mode to use during playback. To
 update the system's current representation of your app's repeat mode, set
 the currentRepeatType property on this command to the proper repeat type
 value.
*/
unsafe impl NSObjectProtocol for MPChangeRepeatModeCommand {}

extern_methods!(
    /**
      Command for changing the current repeat mode to use during playback. To
     update the system's current representation of your app's repeat mode, set
     the currentRepeatType property on this command to the proper repeat type
     value.
    */
    #[cfg(feature = "MediaPlayer_MPChangeRepeatModeCommand")]
    unsafe impl MPChangeRepeatModeCommand {
        /**
          The app's current repeat mode.
        */
        #[method(currentRepeatType)]
        pub unsafe fn currentRepeatType(&self) -> MPRepeatType;

        /**
          The app's current repeat mode.
        */
        #[method(setCurrentRepeatType:)]
        pub unsafe fn setCurrentRepeatType(&self, current_repeat_type: MPRepeatType);
    }
);
