//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::Foundation::*;
use crate::MediaPlayer::*;

ns_enum!(
    #[underlying(NSInteger)]
    pub enum MPMusicPlaybackState {
        MPMusicPlaybackStateStopped = 0,
        MPMusicPlaybackStatePlaying = 1,
        MPMusicPlaybackStatePaused = 2,
        MPMusicPlaybackStateInterrupted = 3,
        MPMusicPlaybackStateSeekingForward = 4,
        MPMusicPlaybackStateSeekingBackward = 5,
    }
);

ns_enum!(
    #[underlying(NSInteger)]
    pub enum MPMusicRepeatMode {
        MPMusicRepeatModeDefault = 0,
        MPMusicRepeatModeNone = 1,
        MPMusicRepeatModeOne = 2,
        MPMusicRepeatModeAll = 3,
    }
);

ns_enum!(
    #[underlying(NSInteger)]
    pub enum MPMusicShuffleMode {
        MPMusicShuffleModeDefault = 0,
        MPMusicShuffleModeOff = 1,
        MPMusicShuffleModeSongs = 2,
        MPMusicShuffleModeAlbums = 3,
    }
);

extern_protocol!(
    pub unsafe trait MPSystemMusicPlayerController: NSObjectProtocol {
        #[cfg(feature = "MediaPlayer_MPMusicPlayerQueueDescriptor")]
        #[method(openToPlayQueueDescriptor:)]
        unsafe fn openToPlayQueueDescriptor(&self, queue_descriptor: &MPMusicPlayerQueueDescriptor);
    }

    unsafe impl ProtocolType for dyn MPSystemMusicPlayerController {}
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "MediaPlayer_MPMusicPlayerController")]
    /**
      MPMusicPlayerController allows playback of MPMediaItems through the Music application.
     See MPMediaPlayback.h for basic playback control.
    */
    pub struct MPMusicPlayerController;

    #[cfg(feature = "MediaPlayer_MPMusicPlayerController")]
    unsafe impl ClassType for MPMusicPlayerController {
        type Super = NSObject;
    }
);

#[cfg(feature = "MediaPlayer_MPMusicPlayerController")]
/**
  MPMusicPlayerController allows playback of MPMediaItems through the Music application.
 See MPMediaPlayback.h for basic playback control.
*/
unsafe impl MPMediaPlayback for MPMusicPlayerController {}

#[cfg(feature = "MediaPlayer_MPMusicPlayerController")]
/**
  MPMusicPlayerController allows playback of MPMediaItems through the Music application.
 See MPMediaPlayback.h for basic playback control.
*/
unsafe impl NSObjectProtocol for MPMusicPlayerController {}

extern_methods!(
    /**
      MPMusicPlayerController allows playback of MPMediaItems through the Music application.
     See MPMediaPlayback.h for basic playback control.
    */
    #[cfg(feature = "MediaPlayer_MPMusicPlayerController")]
    unsafe impl MPMusicPlayerController {
        /**
          Playing items with applicationMusicPlayer does not affect Music's playback state.
        */
        #[method_id(@__retain_semantics Other applicationMusicPlayer)]
        pub unsafe fn applicationMusicPlayer() -> Id<MPMusicPlayerController>;

        #[cfg(feature = "MediaPlayer_MPMusicPlayerApplicationController")]
        /**
          Similar to applicationMusicPlayer, but allows direct manipulation of the queue.
        */
        #[method_id(@__retain_semantics Other applicationQueuePlayer)]
        pub unsafe fn applicationQueuePlayer() -> Id<MPMusicPlayerApplicationController>;

        /**
          Playing media items with the systemMusicPlayer will replace the user's current Music state.
        */
        #[method_id(@__retain_semantics Other systemMusicPlayer)]
        pub unsafe fn systemMusicPlayer() -> Id<MPMusicPlayerController>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Id<Self>;

        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

        /**
          Returns the current playback state of the music player
        */
        #[method(playbackState)]
        pub unsafe fn playbackState(&self) -> MPMusicPlaybackState;

        /**
          Determines how music repeats after playback completes. Defaults to MPMusicRepeatModeDefault.
        */
        #[method(repeatMode)]
        pub unsafe fn repeatMode(&self) -> MPMusicRepeatMode;

        /**
          Determines how music repeats after playback completes. Defaults to MPMusicRepeatModeDefault.
        */
        #[method(setRepeatMode:)]
        pub unsafe fn setRepeatMode(&self, repeat_mode: MPMusicRepeatMode);

        /**
          Determines how music is shuffled when playing. Defaults to MPMusicShuffleModeDefault.
        */
        #[method(shuffleMode)]
        pub unsafe fn shuffleMode(&self) -> MPMusicShuffleMode;

        /**
          Determines how music is shuffled when playing. Defaults to MPMusicShuffleModeDefault.
        */
        #[method(setShuffleMode:)]
        pub unsafe fn setShuffleMode(&self, shuffle_mode: MPMusicShuffleMode);

        /**
          The current volume of playing music, in the range of 0.0 to 1.0.
         This property is deprecated -- use MPVolumeView for volume control instead.
        */
        #[deprecated = "Use MPVolumeView for volume control."]
        #[method(volume)]
        pub unsafe fn volume(&self) -> c_float;

        /**
          The current volume of playing music, in the range of 0.0 to 1.0.
         This property is deprecated -- use MPVolumeView for volume control instead.
        */
        #[deprecated = "Use MPVolumeView for volume control."]
        #[method(setVolume:)]
        pub unsafe fn setVolume(&self, volume: c_float);

        #[cfg(feature = "MediaPlayer_MPMediaItem")]
        /**
          Returns the currently playing media item, or nil if none is playing.
         Setting the nowPlayingItem to an item in the current queue will begin playback at that item.
        */
        #[method_id(@__retain_semantics Other nowPlayingItem)]
        pub unsafe fn nowPlayingItem(&self) -> Option<Id<MPMediaItem>>;

        #[cfg(feature = "MediaPlayer_MPMediaItem")]
        /**
          Returns the currently playing media item, or nil if none is playing.
         Setting the nowPlayingItem to an item in the current queue will begin playback at that item.
        */
        #[method(setNowPlayingItem:)]
        pub unsafe fn setNowPlayingItem(&self, now_playing_item: Option<&MPMediaItem>);

        /**
          Returns the index of the now playing item in the current playback queue.
         May return NSNotFound if the index is not valid (e.g. an empty queue or an infinite playlist).
        */
        #[method(indexOfNowPlayingItem)]
        pub unsafe fn indexOfNowPlayingItem(&self) -> NSUInteger;

        #[cfg(feature = "MediaPlayer_MPMediaQuery")]
        #[method(setQueueWithQuery:)]
        pub unsafe fn setQueueWithQuery(&self, query: &MPMediaQuery);

        #[cfg(feature = "MediaPlayer_MPMediaItemCollection")]
        #[method(setQueueWithItemCollection:)]
        pub unsafe fn setQueueWithItemCollection(&self, item_collection: &MPMediaItemCollection);

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method(setQueueWithStoreIDs:)]
        pub unsafe fn setQueueWithStoreIDs(&self, store_i_ds: &NSArray<NSString>);

        #[cfg(feature = "MediaPlayer_MPMusicPlayerQueueDescriptor")]
        #[method(setQueueWithDescriptor:)]
        pub unsafe fn setQueueWithDescriptor(&self, descriptor: &MPMusicPlayerQueueDescriptor);

        #[cfg(feature = "MediaPlayer_MPMusicPlayerQueueDescriptor")]
        #[method(prependQueueDescriptor:)]
        pub unsafe fn prependQueueDescriptor(&self, descriptor: &MPMusicPlayerQueueDescriptor);

        #[cfg(feature = "MediaPlayer_MPMusicPlayerQueueDescriptor")]
        #[method(appendQueueDescriptor:)]
        pub unsafe fn appendQueueDescriptor(&self, descriptor: &MPMusicPlayerQueueDescriptor);

        #[cfg(feature = "Foundation_NSError")]
        #[method(prepareToPlayWithCompletionHandler:)]
        pub unsafe fn prepareToPlayWithCompletionHandler(
            &self,
            completion_handler: &Block<(*mut NSError,), ()>,
        );

        #[method(skipToNextItem)]
        pub unsafe fn skipToNextItem(&self);

        #[method(skipToBeginning)]
        pub unsafe fn skipToBeginning(&self);

        #[method(skipToPreviousItem)]
        pub unsafe fn skipToPreviousItem(&self);

        #[method(beginGeneratingPlaybackNotifications)]
        pub unsafe fn beginGeneratingPlaybackNotifications(&self);

        #[method(endGeneratingPlaybackNotifications)]
        pub unsafe fn endGeneratingPlaybackNotifications(&self);

        #[deprecated]
        #[method_id(@__retain_semantics Other iPodMusicPlayer)]
        pub unsafe fn iPodMusicPlayer() -> Id<MPMusicPlayerController>;
    }
);

extern_static!(
    MPMusicPlayerControllerPlaybackStateDidChangeNotification: &'static NSNotificationName
);

extern_static!(
    MPMusicPlayerControllerNowPlayingItemDidChangeNotification: &'static NSNotificationName
);

extern_static!(MPMusicPlayerControllerVolumeDidChangeNotification: &'static NSNotificationName);
