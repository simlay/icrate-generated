//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreLocation::*;
use crate::Foundation::*;
use crate::PhotoKit::*;

__inner_extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "PhotoKit_PHFetchResult")]
    /**
      Accessing fetched results (fetches objects from the backing store in chunks on demand rather than all at once)
     Fetched objects will be kept in a cache and purged under memory pressure
    */
    pub struct PHFetchResult<ObjectType: Message = Object, ObjectTypeOwnership: Ownership = Shared> {
        _inner0: PhantomData<*mut (ObjectType, ObjectTypeOwnership)>,
        notunwindsafe: PhantomData<&'static mut ()>,
    }

    #[cfg(feature = "PhotoKit_PHFetchResult")]
    unsafe impl<ObjectType: Message, ObjectTypeOwnership: Ownership> ClassType
        for PHFetchResult<ObjectType, ObjectTypeOwnership>
    {
        type Super = NSObject;
    }
);

#[cfg(feature = "PhotoKit_PHFetchResult")]
/**
  Accessing fetched results (fetches objects from the backing store in chunks on demand rather than all at once)
 Fetched objects will be kept in a cache and purged under memory pressure
*/
unsafe impl<ObjectType: Message, ObjectTypeOwnership: Ownership> NSFastEnumeration
    for PHFetchResult<ObjectType, ObjectTypeOwnership>
{
}

#[cfg(feature = "PhotoKit_PHFetchResult")]
/**
  Accessing fetched results (fetches objects from the backing store in chunks on demand rather than all at once)
 Fetched objects will be kept in a cache and purged under memory pressure
*/
unsafe impl<ObjectType: Message, ObjectTypeOwnership: Ownership> NSObjectProtocol
    for PHFetchResult<ObjectType, ObjectTypeOwnership>
{
}

extern_methods!(
    /**
      Accessing fetched results (fetches objects from the backing store in chunks on demand rather than all at once)
     Fetched objects will be kept in a cache and purged under memory pressure
    */
    #[cfg(feature = "PhotoKit_PHFetchResult")]
    unsafe impl<ObjectType: Message, ObjectTypeOwnership: Ownership>
        PHFetchResult<ObjectType, ObjectTypeOwnership>
    {
        #[method(count)]
        pub unsafe fn count(&self) -> NSUInteger;

        #[method_id(@__retain_semantics Other objectAtIndex:)]
        pub unsafe fn objectAtIndex(
            &self,
            index: NSUInteger,
        ) -> Id<ObjectType, ObjectTypeOwnership>;

        #[method_id(@__retain_semantics Other objectAtIndexedSubscript:)]
        pub unsafe fn objectAtIndexedSubscript(
            &self,
            idx: NSUInteger,
        ) -> Id<ObjectType, ObjectTypeOwnership>;

        #[method(containsObject:)]
        pub unsafe fn containsObject(&self, an_object: &ObjectType) -> bool;

        #[method(indexOfObject:)]
        pub unsafe fn indexOfObject(&self, an_object: &ObjectType) -> NSUInteger;

        #[method(indexOfObject:inRange:)]
        pub unsafe fn indexOfObject_inRange(
            &self,
            an_object: &ObjectType,
            range: NSRange,
        ) -> NSUInteger;

        #[method_id(@__retain_semantics Other firstObject)]
        pub unsafe fn firstObject(&self) -> Option<Id<ObjectType, ObjectTypeOwnership>>;

        #[method_id(@__retain_semantics Other lastObject)]
        pub unsafe fn lastObject(&self) -> Option<Id<ObjectType, ObjectTypeOwnership>>;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSIndexSet"))]
        #[method_id(@__retain_semantics Other objectsAtIndexes:)]
        pub unsafe fn objectsAtIndexes(&self, indexes: &NSIndexSet) -> Id<NSArray<ObjectType>>;

        #[method(enumerateObjectsUsingBlock:)]
        pub unsafe fn enumerateObjectsUsingBlock(
            &self,
            block: &Block<(NonNull<ObjectType>, NSUInteger, NonNull<Bool>), ()>,
        );

        #[method(enumerateObjectsWithOptions:usingBlock:)]
        pub unsafe fn enumerateObjectsWithOptions_usingBlock(
            &self,
            opts: NSEnumerationOptions,
            block: &Block<(NonNull<ObjectType>, NSUInteger, NonNull<Bool>), ()>,
        );

        #[cfg(feature = "Foundation_NSIndexSet")]
        #[method(enumerateObjectsAtIndexes:options:usingBlock:)]
        pub unsafe fn enumerateObjectsAtIndexes_options_usingBlock(
            &self,
            s: &NSIndexSet,
            opts: NSEnumerationOptions,
            block: &Block<(NonNull<ObjectType>, NSUInteger, NonNull<Bool>), ()>,
        );

        #[method(countOfAssetsWithMediaType:)]
        pub unsafe fn countOfAssetsWithMediaType(&self, media_type: PHAssetMediaType)
            -> NSUInteger;
    }
);
