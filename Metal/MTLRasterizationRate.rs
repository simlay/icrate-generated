//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;
use crate::Metal::*;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "Metal_MTLRasterizationRateSampleArray")]
    /**
     @interface MTLRasterizationRateSampleArray
    @abstract A helper object for convient access to samples stored in an array.
    */
    pub struct MTLRasterizationRateSampleArray;

    #[cfg(feature = "Metal_MTLRasterizationRateSampleArray")]
    unsafe impl ClassType for MTLRasterizationRateSampleArray {
        type Super = NSObject;
    }
);

#[cfg(feature = "Metal_MTLRasterizationRateSampleArray")]
/**
 @interface MTLRasterizationRateSampleArray
@abstract A helper object for convient access to samples stored in an array.
*/
unsafe impl NSObjectProtocol for MTLRasterizationRateSampleArray {}

extern_methods!(
    /**
     @interface MTLRasterizationRateSampleArray
    @abstract A helper object for convient access to samples stored in an array.
    */
    #[cfg(feature = "Metal_MTLRasterizationRateSampleArray")]
    unsafe impl MTLRasterizationRateSampleArray {
        #[cfg(feature = "Foundation_NSNumber")]
        #[method_id(@__retain_semantics Other objectAtIndexedSubscript:)]
        pub unsafe fn objectAtIndexedSubscript(&self, index: NSUInteger) -> Id<NSNumber>;

        #[cfg(feature = "Foundation_NSNumber")]
        #[method(setObject:atIndexedSubscript:)]
        pub unsafe fn setObject_atIndexedSubscript(&self, value: &NSNumber, index: NSUInteger);
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "Metal_MTLRasterizationRateLayerDescriptor")]
    /**
     @interface MTLRasterizationRateLayerDescriptor
    @abstract Describes the minimum rasterization rate screen space using two piecewise linear functions.
    @discussion The two piecewise linear function (PLF) describe the desired rasterization quality on the horizontal and vertical axis separately.
    Each quality sample in the PLF is stored in an array as single precision floating point value between 0 (lowest quality) and 1 (highest quality).
    The first sample in the array describes the quality at the top (vertical) or left (horizontal) edge of screen space.
    The last sample in the array describes the quality at the bottom (vertical) or right (horizontal) edge of screen space.
    All other samples are spaced equidistant in screen space.
    MTLRasterizationRateLayerDescriptor instances will be stored inside a MTLRasterizationRateMapDescriptor which in turn is compiled by MTLDevice into a MTLRasterizationRateMap.
    Because MTLDevice may not support the requested granularity, the provided samples may be rounded up (towards higher quality) during compilation.
    */
    pub struct MTLRasterizationRateLayerDescriptor;

    #[cfg(feature = "Metal_MTLRasterizationRateLayerDescriptor")]
    unsafe impl ClassType for MTLRasterizationRateLayerDescriptor {
        type Super = NSObject;
    }
);

#[cfg(feature = "Metal_MTLRasterizationRateLayerDescriptor")]
/**
 @interface MTLRasterizationRateLayerDescriptor
@abstract Describes the minimum rasterization rate screen space using two piecewise linear functions.
@discussion The two piecewise linear function (PLF) describe the desired rasterization quality on the horizontal and vertical axis separately.
Each quality sample in the PLF is stored in an array as single precision floating point value between 0 (lowest quality) and 1 (highest quality).
The first sample in the array describes the quality at the top (vertical) or left (horizontal) edge of screen space.
The last sample in the array describes the quality at the bottom (vertical) or right (horizontal) edge of screen space.
All other samples are spaced equidistant in screen space.
MTLRasterizationRateLayerDescriptor instances will be stored inside a MTLRasterizationRateMapDescriptor which in turn is compiled by MTLDevice into a MTLRasterizationRateMap.
Because MTLDevice may not support the requested granularity, the provided samples may be rounded up (towards higher quality) during compilation.
*/
unsafe impl NSObjectProtocol for MTLRasterizationRateLayerDescriptor {}

extern_methods!(
    /**
     @interface MTLRasterizationRateLayerDescriptor
    @abstract Describes the minimum rasterization rate screen space using two piecewise linear functions.
    @discussion The two piecewise linear function (PLF) describe the desired rasterization quality on the horizontal and vertical axis separately.
    Each quality sample in the PLF is stored in an array as single precision floating point value between 0 (lowest quality) and 1 (highest quality).
    The first sample in the array describes the quality at the top (vertical) or left (horizontal) edge of screen space.
    The last sample in the array describes the quality at the bottom (vertical) or right (horizontal) edge of screen space.
    All other samples are spaced equidistant in screen space.
    MTLRasterizationRateLayerDescriptor instances will be stored inside a MTLRasterizationRateMapDescriptor which in turn is compiled by MTLDevice into a MTLRasterizationRateMap.
    Because MTLDevice may not support the requested granularity, the provided samples may be rounded up (towards higher quality) during compilation.
    */
    #[cfg(feature = "Metal_MTLRasterizationRateLayerDescriptor")]
    unsafe impl MTLRasterizationRateLayerDescriptor {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

        #[method_id(@__retain_semantics Init initWithSampleCount:)]
        pub unsafe fn initWithSampleCount(
            this: Option<Allocated<Self>>,
            sample_count: MTLSize,
        ) -> Id<Self>;

        #[method_id(@__retain_semantics Init initWithSampleCount:horizontal:vertical:)]
        pub unsafe fn initWithSampleCount_horizontal_vertical(
            this: Option<Allocated<Self>>,
            sample_count: MTLSize,
            horizontal: NonNull<c_float>,
            vertical: NonNull<c_float>,
        ) -> Id<Self>;

        /**
         @property maxSampleCount
        @return The maximum number of quality samples that this descriptor can use to describe its function, for the horizontal and vertical axis, this is the sampleCount that the descriptor was initialized with. The depth component of the returned MTLSize is always 0.
        */
        #[method(maxSampleCount)]
        pub unsafe fn maxSampleCount(&self) -> MTLSize;

        /**
         @property horizontalSampleStorage
        @abstract Provide direct access to the quality samples stored in the descriptor.
        @return Pointer to the (mutable) storage array for samples on the horizontal axis.
        @discussion The returned pointer points to the first element of an array of sampleCount.width elements.
        */
        #[method(horizontalSampleStorage)]
        pub unsafe fn horizontalSampleStorage(&self) -> NonNull<c_float>;

        /**
         @property verticalSampleStorage
        @abstract Provide direct access to the quality samples stored in the descriptor.
        @return Pointer to the (mutable) storage array for samples on the vertical axis.
        @discussion The returned pointer points to the first element of an array of sampleCount.height elements.
        */
        #[method(verticalSampleStorage)]
        pub unsafe fn verticalSampleStorage(&self) -> NonNull<c_float>;

        #[cfg(feature = "Metal_MTLRasterizationRateSampleArray")]
        /**
         @property horizontal
        @abstract Provide convenient bounds-checked access to the quality samples stored in the descriptor.
        @return Returns a syntactic sugar helper to get or set sample values on the horizontal axis.
        */
        #[method_id(@__retain_semantics Other horizontal)]
        pub unsafe fn horizontal(&self) -> Id<MTLRasterizationRateSampleArray>;

        #[cfg(feature = "Metal_MTLRasterizationRateSampleArray")]
        /**
         @property vertical
        @abstract Provide convenient bounds-checked access to the quality samples stored in the descriptor.
        @return Returns a syntactic sugar helper to get or set sample values on the vertical axis.
        */
        #[method_id(@__retain_semantics Other vertical)]
        pub unsafe fn vertical(&self) -> Id<MTLRasterizationRateSampleArray>;
    }
);

extern_methods!(
    #[cfg(feature = "Metal_MTLRasterizationRateLayerDescriptor")]
    unsafe impl MTLRasterizationRateLayerDescriptor {}
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "Metal_MTLRasterizationRateLayerArray")]
    /**
     @interface MTLRasterizationRateLayerArray
    @abstract Mutable array of MTLRasterizationRateLayerDescriptor
    */
    pub struct MTLRasterizationRateLayerArray;

    #[cfg(feature = "Metal_MTLRasterizationRateLayerArray")]
    unsafe impl ClassType for MTLRasterizationRateLayerArray {
        type Super = NSObject;
    }
);

#[cfg(feature = "Metal_MTLRasterizationRateLayerArray")]
/**
 @interface MTLRasterizationRateLayerArray
@abstract Mutable array of MTLRasterizationRateLayerDescriptor
*/
unsafe impl NSObjectProtocol for MTLRasterizationRateLayerArray {}

extern_methods!(
    /**
     @interface MTLRasterizationRateLayerArray
    @abstract Mutable array of MTLRasterizationRateLayerDescriptor
    */
    #[cfg(feature = "Metal_MTLRasterizationRateLayerArray")]
    unsafe impl MTLRasterizationRateLayerArray {
        #[cfg(feature = "Metal_MTLRasterizationRateLayerDescriptor")]
        #[method_id(@__retain_semantics Other objectAtIndexedSubscript:)]
        pub unsafe fn objectAtIndexedSubscript(
            &self,
            layer_index: NSUInteger,
        ) -> Option<Id<MTLRasterizationRateLayerDescriptor>>;

        #[cfg(feature = "Metal_MTLRasterizationRateLayerDescriptor")]
        #[method(setObject:atIndexedSubscript:)]
        pub unsafe fn setObject_atIndexedSubscript(
            &self,
            layer: Option<&MTLRasterizationRateLayerDescriptor>,
            layer_index: NSUInteger,
        );
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "Metal_MTLRasterizationRateMapDescriptor")]
    /**
     @interface MTLRasterizationRateMapDescriptor
    @abstract Describes a MTLRasterizationRateMap containing an arbitrary number of MTLRasterizationRateLayerDescriptor instances.
    @discussion An MTLRasterizationRateMapDescriptor is compiled into an MTLRasterizationRateMap using MTLDevice.
    */
    pub struct MTLRasterizationRateMapDescriptor;

    #[cfg(feature = "Metal_MTLRasterizationRateMapDescriptor")]
    unsafe impl ClassType for MTLRasterizationRateMapDescriptor {
        type Super = NSObject;
    }
);

#[cfg(feature = "Metal_MTLRasterizationRateMapDescriptor")]
/**
 @interface MTLRasterizationRateMapDescriptor
@abstract Describes a MTLRasterizationRateMap containing an arbitrary number of MTLRasterizationRateLayerDescriptor instances.
@discussion An MTLRasterizationRateMapDescriptor is compiled into an MTLRasterizationRateMap using MTLDevice.
*/
unsafe impl NSObjectProtocol for MTLRasterizationRateMapDescriptor {}

extern_methods!(
    /**
     @interface MTLRasterizationRateMapDescriptor
    @abstract Describes a MTLRasterizationRateMap containing an arbitrary number of MTLRasterizationRateLayerDescriptor instances.
    @discussion An MTLRasterizationRateMapDescriptor is compiled into an MTLRasterizationRateMap using MTLDevice.
    */
    #[cfg(feature = "Metal_MTLRasterizationRateMapDescriptor")]
    unsafe impl MTLRasterizationRateMapDescriptor {
        #[method_id(@__retain_semantics Other rasterizationRateMapDescriptorWithScreenSize:)]
        pub unsafe fn rasterizationRateMapDescriptorWithScreenSize(
            screen_size: MTLSize,
        ) -> Id<MTLRasterizationRateMapDescriptor>;

        #[cfg(feature = "Metal_MTLRasterizationRateLayerDescriptor")]
        #[method_id(@__retain_semantics Other rasterizationRateMapDescriptorWithScreenSize:layer:)]
        pub unsafe fn rasterizationRateMapDescriptorWithScreenSize_layer(
            screen_size: MTLSize,
            layer: &MTLRasterizationRateLayerDescriptor,
        ) -> Id<MTLRasterizationRateMapDescriptor>;

        #[cfg(feature = "Metal_MTLRasterizationRateLayerDescriptor")]
        #[method_id(@__retain_semantics Other rasterizationRateMapDescriptorWithScreenSize:layerCount:layers:)]
        pub unsafe fn rasterizationRateMapDescriptorWithScreenSize_layerCount_layers(
            screen_size: MTLSize,
            layer_count: NSUInteger,
            layers: &mut Id<MTLRasterizationRateLayerDescriptor>,
        ) -> Id<MTLRasterizationRateMapDescriptor>;

        #[cfg(feature = "Metal_MTLRasterizationRateLayerDescriptor")]
        #[method_id(@__retain_semantics Other layerAtIndex:)]
        pub unsafe fn layerAtIndex(
            &self,
            layer_index: NSUInteger,
        ) -> Option<Id<MTLRasterizationRateLayerDescriptor>>;

        #[cfg(feature = "Metal_MTLRasterizationRateLayerDescriptor")]
        #[method(setLayer:atIndex:)]
        pub unsafe fn setLayer_atIndex(
            &self,
            layer: Option<&MTLRasterizationRateLayerDescriptor>,
            layer_index: NSUInteger,
        );

        #[cfg(feature = "Metal_MTLRasterizationRateLayerArray")]
        /**
         @property layers
        @return A modifiable array of layers
        @discussion Accesses the layers currently stored in the descriptor.
        Syntactic sugar around "layerAtIndex:" and "setLayer:atIndex:"
        */
        #[method_id(@__retain_semantics Other layers)]
        pub unsafe fn layers(&self) -> Id<MTLRasterizationRateLayerArray>;

        /**
         @property screenSize
        @return The dimensions, in screen space pixels, of the region where variable rasterization is applied.
        @discussion The region always has its origin at [0, 0].
        The depth component of MTLSize is ignored.
        */
        #[method(screenSize)]
        pub unsafe fn screenSize(&self) -> MTLSize;

        /**
         @property screenSize
        @return The dimensions, in screen space pixels, of the region where variable rasterization is applied.
        @discussion The region always has its origin at [0, 0].
        The depth component of MTLSize is ignored.
        */
        #[method(setScreenSize:)]
        pub unsafe fn setScreenSize(&self, screen_size: MTLSize);

        #[cfg(feature = "Foundation_NSString")]
        /**
         @property label
        @abstract A string to help identify this object.
        @discussion The default value is nil.
        */
        #[method_id(@__retain_semantics Other label)]
        pub unsafe fn label(&self) -> Option<Id<NSString>>;

        #[cfg(feature = "Foundation_NSString")]
        /**
         @property label
        @abstract A string to help identify this object.
        @discussion The default value is nil.
        */
        #[method(setLabel:)]
        pub unsafe fn setLabel(&self, label: Option<&NSString>);

        /**
         @property layerCount
        @return The number of subsequent non-nil layer instances stored in the descriptor, starting at index 0.
        @discussion This property is modified by setting new layer instances using setLayer:atIndex: or assigning to layers[X]
        */
        #[method(layerCount)]
        pub unsafe fn layerCount(&self) -> NSUInteger;
    }
);

extern_protocol!(
    /**
     @protocol MTLRasterizationRateMap
    @abstract Compiled read-only object that determines how variable rasterization rate is applied when rendering.
    @discussion A variable rasterization rate map is compiled by MTLDevice from a MTLRasterizationRateMapDescriptor containing one or more MTLRasterizationRateLayerDescriptor.
    During compilation, the quality samples provided in the MTLRasterizationRateLayerDescriptor may be rounded up to the nearest supported value or granularity, depending on hardware support.
    However, the compilation will never round values down, so the actual rasterization will always happen at a quality level matching or exceeding the provided quality samples.
    During rasterization using the MTLRasterizationRateMap the screen space rendering is stored in a smaller area of the framebuffer, such that lower quality regions will not occupy as many texels as higher quality regions.
    The quality will never exceed 1:1 in any region of screen space.
    Because a smaller area of the framebuffer is populated, less fragment shader invocations are required to render content, and less bandwidth is consumed to store the shaded values.
    Use a rasterization rate map to reduce rendering quality in less-important or less-sampled regions of the framebuffer, such as the periphery of a VR/AR display or a far-away cascade of a shadow map.
    */
    pub unsafe trait MTLRasterizationRateMap: NSObjectProtocol {
        /**
         @property device
        @return The device on which the rasterization rate map was created
        */
        #[method_id(@__retain_semantics Other device)]
        unsafe fn device(&self) -> Id<ProtocolObject<dyn MTLDevice>>;

        #[cfg(feature = "Foundation_NSString")]
        /**
         @property label
        @abstract A string to help identify this object.
        */
        #[method_id(@__retain_semantics Other label)]
        unsafe fn label(&self) -> Option<Id<NSString>>;

        /**
         @property screenSize
        @return The dimensions, in screen space pixels, of the region where variable rasterization is applied.
        @discussion The region always has its origin at [0, 0].
        The depth component of the returned MTLSize is always 0.
        */
        #[method(screenSize)]
        unsafe fn screenSize(&self) -> MTLSize;

        /**
         @property physicalGranularity
        @return The granularity, in physical pixels, at which variable rasterization rate varies.
        @discussion Rendering algorithms that use binning or tiling in screen space may want to determine the screen space bin size using this value.
        The depth component of the returned MTLSize is always 0.
        */
        #[method(physicalGranularity)]
        unsafe fn physicalGranularity(&self) -> MTLSize;

        /**
         @property layerCount
        @return The number of different configured layers in the rasterization map.
        @discussion Different render-target layers may target different variable rasterization configurations.
        The rasterization rate layer for a primitive is selected on the [[render_target_layer_index]].
        */
        #[method(layerCount)]
        unsafe fn layerCount(&self) -> NSUInteger;

        /**
         @property parameterBufferSizeAndAlign
        @abstract Returns the size and alignment requirements of the parameter buffer for this rate map.
        @discussion The parameter data can be copied into a buffer with this size and alignment using copyParameterDataToBuffer:offset:
        */
        #[method(parameterBufferSizeAndAlign)]
        unsafe fn parameterBufferSizeAndAlign(&self) -> MTLSizeAndAlign;

        #[method(copyParameterDataToBuffer:offset:)]
        unsafe fn copyParameterDataToBuffer_offset(
            &self,
            buffer: &ProtocolObject<dyn MTLBuffer>,
            offset: NSUInteger,
        );

        #[method(physicalSizeForLayer:)]
        unsafe fn physicalSizeForLayer(&self, layer_index: NSUInteger) -> MTLSize;

        #[method(mapScreenToPhysicalCoordinates:forLayer:)]
        unsafe fn mapScreenToPhysicalCoordinates_forLayer(
            &self,
            screen_coordinates: MTLCoordinate2D,
            layer_index: NSUInteger,
        ) -> MTLCoordinate2D;

        #[method(mapPhysicalToScreenCoordinates:forLayer:)]
        unsafe fn mapPhysicalToScreenCoordinates_forLayer(
            &self,
            physical_coordinates: MTLCoordinate2D,
            layer_index: NSUInteger,
        ) -> MTLCoordinate2D;
    }

    unsafe impl ProtocolType for dyn MTLRasterizationRateMap {}
);
