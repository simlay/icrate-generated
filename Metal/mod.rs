//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
#![allow(unused_imports)]
#![allow(deprecated)]
#[path = "MTLAccelerationStructure.rs"]
mod __MTLAccelerationStructure;
#[path = "MTLAccelerationStructureCommandEncoder.rs"]
mod __MTLAccelerationStructureCommandEncoder;
#[path = "MTLAccelerationStructureTypes.rs"]
mod __MTLAccelerationStructureTypes;
#[path = "MTLArgument.rs"]
mod __MTLArgument;
#[path = "MTLArgumentEncoder.rs"]
mod __MTLArgumentEncoder;
#[path = "MTLBinaryArchive.rs"]
mod __MTLBinaryArchive;
#[path = "MTLBlitCommandEncoder.rs"]
mod __MTLBlitCommandEncoder;
#[path = "MTLBlitPass.rs"]
mod __MTLBlitPass;
#[path = "MTLBuffer.rs"]
mod __MTLBuffer;
#[path = "MTLCaptureManager.rs"]
mod __MTLCaptureManager;
#[path = "MTLCaptureScope.rs"]
mod __MTLCaptureScope;
#[path = "MTLCommandBuffer.rs"]
mod __MTLCommandBuffer;
#[path = "MTLCommandEncoder.rs"]
mod __MTLCommandEncoder;
#[path = "MTLCommandQueue.rs"]
mod __MTLCommandQueue;
#[path = "MTLComputeCommandEncoder.rs"]
mod __MTLComputeCommandEncoder;
#[path = "MTLComputePass.rs"]
mod __MTLComputePass;
#[path = "MTLComputePipeline.rs"]
mod __MTLComputePipeline;
#[path = "MTLCounters.rs"]
mod __MTLCounters;
#[path = "MTLDefines.rs"]
mod __MTLDefines;
#[path = "MTLDepthStencil.rs"]
mod __MTLDepthStencil;
#[path = "MTLDevice.rs"]
mod __MTLDevice;
#[path = "MTLDrawable.rs"]
mod __MTLDrawable;
#[path = "MTLDynamicLibrary.rs"]
mod __MTLDynamicLibrary;
#[path = "MTLEvent.rs"]
mod __MTLEvent;
#[path = "MTLFence.rs"]
mod __MTLFence;
#[path = "MTLFunctionConstantValues.rs"]
mod __MTLFunctionConstantValues;
#[path = "MTLFunctionDescriptor.rs"]
mod __MTLFunctionDescriptor;
#[path = "MTLFunctionHandle.rs"]
mod __MTLFunctionHandle;
#[path = "MTLFunctionLog.rs"]
mod __MTLFunctionLog;
#[path = "MTLFunctionStitching.rs"]
mod __MTLFunctionStitching;
#[path = "MTLHeap.rs"]
mod __MTLHeap;
#[path = "MTLIOCommandBuffer.rs"]
mod __MTLIOCommandBuffer;
#[path = "MTLIOCommandQueue.rs"]
mod __MTLIOCommandQueue;
#[path = "MTLIOCompressor.rs"]
mod __MTLIOCompressor;
#[path = "MTLIndirectCommandBuffer.rs"]
mod __MTLIndirectCommandBuffer;
#[path = "MTLIndirectCommandEncoder.rs"]
mod __MTLIndirectCommandEncoder;
#[path = "MTLIntersectionFunctionTable.rs"]
mod __MTLIntersectionFunctionTable;
#[path = "MTLLibrary.rs"]
mod __MTLLibrary;
#[path = "MTLLinkedFunctions.rs"]
mod __MTLLinkedFunctions;
#[path = "MTLParallelRenderCommandEncoder.rs"]
mod __MTLParallelRenderCommandEncoder;
#[path = "MTLPipeline.rs"]
mod __MTLPipeline;
#[path = "MTLPixelFormat.rs"]
mod __MTLPixelFormat;
#[path = "MTLRasterizationRate.rs"]
mod __MTLRasterizationRate;
#[path = "MTLRenderCommandEncoder.rs"]
mod __MTLRenderCommandEncoder;
#[path = "MTLRenderPass.rs"]
mod __MTLRenderPass;
#[path = "MTLRenderPipeline.rs"]
mod __MTLRenderPipeline;
#[path = "MTLResource.rs"]
mod __MTLResource;
#[path = "MTLResourceStateCommandEncoder.rs"]
mod __MTLResourceStateCommandEncoder;
#[path = "MTLResourceStatePass.rs"]
mod __MTLResourceStatePass;
#[path = "MTLSampler.rs"]
mod __MTLSampler;
#[path = "MTLStageInputOutputDescriptor.rs"]
mod __MTLStageInputOutputDescriptor;
#[path = "MTLTexture.rs"]
mod __MTLTexture;
#[path = "MTLTypes.rs"]
mod __MTLTypes;
#[path = "MTLVertexDescriptor.rs"]
mod __MTLVertexDescriptor;
#[path = "MTLVisibleFunctionTable.rs"]
mod __MTLVisibleFunctionTable;

pub use self::__MTLAccelerationStructure::MTLAccelerationStructure;
#[cfg(feature = "Metal_MTLAccelerationStructureBoundingBoxGeometryDescriptor")]
pub use self::__MTLAccelerationStructure::MTLAccelerationStructureBoundingBoxGeometryDescriptor;
#[cfg(feature = "Metal_MTLAccelerationStructureDescriptor")]
pub use self::__MTLAccelerationStructure::MTLAccelerationStructureDescriptor;
#[cfg(feature = "Metal_MTLAccelerationStructureGeometryDescriptor")]
pub use self::__MTLAccelerationStructure::MTLAccelerationStructureGeometryDescriptor;
pub use self::__MTLAccelerationStructure::MTLAccelerationStructureInstanceDescriptor;
pub use self::__MTLAccelerationStructure::MTLAccelerationStructureInstanceDescriptorType;
pub use self::__MTLAccelerationStructure::MTLAccelerationStructureInstanceDescriptorTypeDefault;
pub use self::__MTLAccelerationStructure::MTLAccelerationStructureInstanceDescriptorTypeMotion;
pub use self::__MTLAccelerationStructure::MTLAccelerationStructureInstanceDescriptorTypeUserID;
pub use self::__MTLAccelerationStructure::MTLAccelerationStructureInstanceOptionDisableTriangleCulling;
pub use self::__MTLAccelerationStructure::MTLAccelerationStructureInstanceOptionNonOpaque;
pub use self::__MTLAccelerationStructure::MTLAccelerationStructureInstanceOptionNone;
pub use self::__MTLAccelerationStructure::MTLAccelerationStructureInstanceOptionOpaque;
pub use self::__MTLAccelerationStructure::MTLAccelerationStructureInstanceOptionTriangleFrontFacingWindingCounterClockwise;
pub use self::__MTLAccelerationStructure::MTLAccelerationStructureInstanceOptions;
#[cfg(feature = "Metal_MTLAccelerationStructureMotionBoundingBoxGeometryDescriptor")]
pub use self::__MTLAccelerationStructure::MTLAccelerationStructureMotionBoundingBoxGeometryDescriptor;
pub use self::__MTLAccelerationStructure::MTLAccelerationStructureMotionInstanceDescriptor;
#[cfg(feature = "Metal_MTLAccelerationStructureMotionTriangleGeometryDescriptor")]
pub use self::__MTLAccelerationStructure::MTLAccelerationStructureMotionTriangleGeometryDescriptor;
#[cfg(feature = "Metal_MTLAccelerationStructureTriangleGeometryDescriptor")]
pub use self::__MTLAccelerationStructure::MTLAccelerationStructureTriangleGeometryDescriptor;
pub use self::__MTLAccelerationStructure::MTLAccelerationStructureUsage;
pub use self::__MTLAccelerationStructure::MTLAccelerationStructureUsageExtendedLimits;
pub use self::__MTLAccelerationStructure::MTLAccelerationStructureUsageNone;
pub use self::__MTLAccelerationStructure::MTLAccelerationStructureUsagePreferFastBuild;
pub use self::__MTLAccelerationStructure::MTLAccelerationStructureUsageRefit;
pub use self::__MTLAccelerationStructure::MTLAccelerationStructureUserIDInstanceDescriptor;
#[cfg(feature = "Metal_MTLInstanceAccelerationStructureDescriptor")]
pub use self::__MTLAccelerationStructure::MTLInstanceAccelerationStructureDescriptor;
pub use self::__MTLAccelerationStructure::MTLMotionBorderMode;
pub use self::__MTLAccelerationStructure::MTLMotionBorderModeClamp;
pub use self::__MTLAccelerationStructure::MTLMotionBorderModeVanish;
#[cfg(feature = "Metal_MTLMotionKeyframeData")]
pub use self::__MTLAccelerationStructure::MTLMotionKeyframeData;
#[cfg(feature = "Metal_MTLPrimitiveAccelerationStructureDescriptor")]
pub use self::__MTLAccelerationStructure::MTLPrimitiveAccelerationStructureDescriptor;
pub use self::__MTLAccelerationStructureCommandEncoder::MTLAccelerationStructureCommandEncoder;
#[cfg(feature = "Metal_MTLAccelerationStructurePassDescriptor")]
pub use self::__MTLAccelerationStructureCommandEncoder::MTLAccelerationStructurePassDescriptor;
#[cfg(feature = "Metal_MTLAccelerationStructurePassSampleBufferAttachmentDescriptor")]
pub use self::__MTLAccelerationStructureCommandEncoder::MTLAccelerationStructurePassSampleBufferAttachmentDescriptor;
#[cfg(feature = "Metal_MTLAccelerationStructurePassSampleBufferAttachmentDescriptorArray")]
pub use self::__MTLAccelerationStructureCommandEncoder::MTLAccelerationStructurePassSampleBufferAttachmentDescriptorArray;
pub use self::__MTLAccelerationStructureCommandEncoder::MTLAccelerationStructureRefitOptionPerPrimitiveData;
pub use self::__MTLAccelerationStructureCommandEncoder::MTLAccelerationStructureRefitOptionVertexData;
pub use self::__MTLAccelerationStructureCommandEncoder::MTLAccelerationStructureRefitOptions;
pub use self::__MTLAccelerationStructureTypes::MTLAxisAlignedBoundingBox;
pub use self::__MTLAccelerationStructureTypes::MTLPackedFloat4x3;
#[cfg(feature = "Metal_MTLArgument")]
pub use self::__MTLArgument::MTLArgument;
pub use self::__MTLArgument::MTLArgumentAccess;
pub use self::__MTLArgument::MTLArgumentAccessReadOnly;
pub use self::__MTLArgument::MTLArgumentAccessReadWrite;
pub use self::__MTLArgument::MTLArgumentAccessWriteOnly;
pub use self::__MTLArgument::MTLArgumentType;
pub use self::__MTLArgument::MTLArgumentTypeBuffer;
pub use self::__MTLArgument::MTLArgumentTypeImageblock;
pub use self::__MTLArgument::MTLArgumentTypeImageblockData;
pub use self::__MTLArgument::MTLArgumentTypeInstanceAccelerationStructure;
pub use self::__MTLArgument::MTLArgumentTypeIntersectionFunctionTable;
pub use self::__MTLArgument::MTLArgumentTypePrimitiveAccelerationStructure;
pub use self::__MTLArgument::MTLArgumentTypeSampler;
pub use self::__MTLArgument::MTLArgumentTypeTexture;
pub use self::__MTLArgument::MTLArgumentTypeThreadgroupMemory;
pub use self::__MTLArgument::MTLArgumentTypeVisibleFunctionTable;
#[cfg(feature = "Metal_MTLArrayType")]
pub use self::__MTLArgument::MTLArrayType;
pub use self::__MTLArgument::MTLBinding;
pub use self::__MTLArgument::MTLBindingType;
pub use self::__MTLArgument::MTLBindingTypeBuffer;
pub use self::__MTLArgument::MTLBindingTypeImageblock;
pub use self::__MTLArgument::MTLBindingTypeImageblockData;
pub use self::__MTLArgument::MTLBindingTypeInstanceAccelerationStructure;
pub use self::__MTLArgument::MTLBindingTypeIntersectionFunctionTable;
pub use self::__MTLArgument::MTLBindingTypeObjectPayload;
pub use self::__MTLArgument::MTLBindingTypePrimitiveAccelerationStructure;
pub use self::__MTLArgument::MTLBindingTypeSampler;
pub use self::__MTLArgument::MTLBindingTypeTexture;
pub use self::__MTLArgument::MTLBindingTypeThreadgroupMemory;
pub use self::__MTLArgument::MTLBindingTypeVisibleFunctionTable;
pub use self::__MTLArgument::MTLBufferBinding;
pub use self::__MTLArgument::MTLDataType;
pub use self::__MTLArgument::MTLDataTypeArray;
pub use self::__MTLArgument::MTLDataTypeBool;
pub use self::__MTLArgument::MTLDataTypeBool2;
pub use self::__MTLArgument::MTLDataTypeBool3;
pub use self::__MTLArgument::MTLDataTypeBool4;
pub use self::__MTLArgument::MTLDataTypeChar;
pub use self::__MTLArgument::MTLDataTypeChar2;
pub use self::__MTLArgument::MTLDataTypeChar3;
pub use self::__MTLArgument::MTLDataTypeChar4;
pub use self::__MTLArgument::MTLDataTypeComputePipeline;
pub use self::__MTLArgument::MTLDataTypeFloat;
pub use self::__MTLArgument::MTLDataTypeFloat2;
pub use self::__MTLArgument::MTLDataTypeFloat2x2;
pub use self::__MTLArgument::MTLDataTypeFloat2x3;
pub use self::__MTLArgument::MTLDataTypeFloat2x4;
pub use self::__MTLArgument::MTLDataTypeFloat3;
pub use self::__MTLArgument::MTLDataTypeFloat3x2;
pub use self::__MTLArgument::MTLDataTypeFloat3x3;
pub use self::__MTLArgument::MTLDataTypeFloat3x4;
pub use self::__MTLArgument::MTLDataTypeFloat4;
pub use self::__MTLArgument::MTLDataTypeFloat4x2;
pub use self::__MTLArgument::MTLDataTypeFloat4x3;
pub use self::__MTLArgument::MTLDataTypeFloat4x4;
pub use self::__MTLArgument::MTLDataTypeHalf;
pub use self::__MTLArgument::MTLDataTypeHalf2;
pub use self::__MTLArgument::MTLDataTypeHalf2x2;
pub use self::__MTLArgument::MTLDataTypeHalf2x3;
pub use self::__MTLArgument::MTLDataTypeHalf2x4;
pub use self::__MTLArgument::MTLDataTypeHalf3;
pub use self::__MTLArgument::MTLDataTypeHalf3x2;
pub use self::__MTLArgument::MTLDataTypeHalf3x3;
pub use self::__MTLArgument::MTLDataTypeHalf3x4;
pub use self::__MTLArgument::MTLDataTypeHalf4;
pub use self::__MTLArgument::MTLDataTypeHalf4x2;
pub use self::__MTLArgument::MTLDataTypeHalf4x3;
pub use self::__MTLArgument::MTLDataTypeHalf4x4;
pub use self::__MTLArgument::MTLDataTypeIndirectCommandBuffer;
pub use self::__MTLArgument::MTLDataTypeInstanceAccelerationStructure;
pub use self::__MTLArgument::MTLDataTypeInt;
pub use self::__MTLArgument::MTLDataTypeInt2;
pub use self::__MTLArgument::MTLDataTypeInt3;
pub use self::__MTLArgument::MTLDataTypeInt4;
pub use self::__MTLArgument::MTLDataTypeIntersectionFunctionTable;
pub use self::__MTLArgument::MTLDataTypeLong;
pub use self::__MTLArgument::MTLDataTypeLong2;
pub use self::__MTLArgument::MTLDataTypeLong3;
pub use self::__MTLArgument::MTLDataTypeLong4;
pub use self::__MTLArgument::MTLDataTypeNone;
pub use self::__MTLArgument::MTLDataTypePointer;
pub use self::__MTLArgument::MTLDataTypePrimitiveAccelerationStructure;
pub use self::__MTLArgument::MTLDataTypeR16Snorm;
pub use self::__MTLArgument::MTLDataTypeR16Unorm;
pub use self::__MTLArgument::MTLDataTypeR8Snorm;
pub use self::__MTLArgument::MTLDataTypeR8Unorm;
pub use self::__MTLArgument::MTLDataTypeRG11B10Float;
pub use self::__MTLArgument::MTLDataTypeRG16Snorm;
pub use self::__MTLArgument::MTLDataTypeRG16Unorm;
pub use self::__MTLArgument::MTLDataTypeRG8Snorm;
pub use self::__MTLArgument::MTLDataTypeRG8Unorm;
pub use self::__MTLArgument::MTLDataTypeRGB10A2Unorm;
pub use self::__MTLArgument::MTLDataTypeRGB9E5Float;
pub use self::__MTLArgument::MTLDataTypeRGBA16Snorm;
pub use self::__MTLArgument::MTLDataTypeRGBA16Unorm;
pub use self::__MTLArgument::MTLDataTypeRGBA8Snorm;
pub use self::__MTLArgument::MTLDataTypeRGBA8Unorm;
pub use self::__MTLArgument::MTLDataTypeRGBA8Unorm_sRGB;
pub use self::__MTLArgument::MTLDataTypeRenderPipeline;
pub use self::__MTLArgument::MTLDataTypeSampler;
pub use self::__MTLArgument::MTLDataTypeShort;
pub use self::__MTLArgument::MTLDataTypeShort2;
pub use self::__MTLArgument::MTLDataTypeShort3;
pub use self::__MTLArgument::MTLDataTypeShort4;
pub use self::__MTLArgument::MTLDataTypeStruct;
pub use self::__MTLArgument::MTLDataTypeTexture;
pub use self::__MTLArgument::MTLDataTypeUChar;
pub use self::__MTLArgument::MTLDataTypeUChar2;
pub use self::__MTLArgument::MTLDataTypeUChar3;
pub use self::__MTLArgument::MTLDataTypeUChar4;
pub use self::__MTLArgument::MTLDataTypeUInt;
pub use self::__MTLArgument::MTLDataTypeUInt2;
pub use self::__MTLArgument::MTLDataTypeUInt3;
pub use self::__MTLArgument::MTLDataTypeUInt4;
pub use self::__MTLArgument::MTLDataTypeULong;
pub use self::__MTLArgument::MTLDataTypeULong2;
pub use self::__MTLArgument::MTLDataTypeULong3;
pub use self::__MTLArgument::MTLDataTypeULong4;
pub use self::__MTLArgument::MTLDataTypeUShort;
pub use self::__MTLArgument::MTLDataTypeUShort2;
pub use self::__MTLArgument::MTLDataTypeUShort3;
pub use self::__MTLArgument::MTLDataTypeUShort4;
pub use self::__MTLArgument::MTLDataTypeVisibleFunctionTable;
pub use self::__MTLArgument::MTLObjectPayloadBinding;
#[cfg(feature = "Metal_MTLPointerType")]
pub use self::__MTLArgument::MTLPointerType;
#[cfg(feature = "Metal_MTLStructMember")]
pub use self::__MTLArgument::MTLStructMember;
#[cfg(feature = "Metal_MTLStructType")]
pub use self::__MTLArgument::MTLStructType;
pub use self::__MTLArgument::MTLTextureBinding;
#[cfg(feature = "Metal_MTLTextureReferenceType")]
pub use self::__MTLArgument::MTLTextureReferenceType;
pub use self::__MTLArgument::MTLThreadgroupBinding;
#[cfg(feature = "Metal_MTLType")]
pub use self::__MTLArgument::MTLType;
pub use self::__MTLArgumentEncoder::MTLArgumentEncoder;
pub use self::__MTLBinaryArchive::MTLBinaryArchive;
#[cfg(feature = "Metal_MTLBinaryArchiveDescriptor")]
pub use self::__MTLBinaryArchive::MTLBinaryArchiveDescriptor;
pub use self::__MTLBinaryArchive::MTLBinaryArchiveDomain;
pub use self::__MTLBinaryArchive::MTLBinaryArchiveError;
pub use self::__MTLBinaryArchive::MTLBinaryArchiveErrorCompilationFailure;
pub use self::__MTLBinaryArchive::MTLBinaryArchiveErrorInternalError;
pub use self::__MTLBinaryArchive::MTLBinaryArchiveErrorInvalidFile;
pub use self::__MTLBinaryArchive::MTLBinaryArchiveErrorNone;
pub use self::__MTLBinaryArchive::MTLBinaryArchiveErrorUnexpectedElement;
pub use self::__MTLBlitCommandEncoder::MTLBlitCommandEncoder;
pub use self::__MTLBlitCommandEncoder::MTLBlitOption;
pub use self::__MTLBlitCommandEncoder::MTLBlitOptionDepthFromDepthStencil;
pub use self::__MTLBlitCommandEncoder::MTLBlitOptionNone;
pub use self::__MTLBlitCommandEncoder::MTLBlitOptionRowLinearPVRTC;
pub use self::__MTLBlitCommandEncoder::MTLBlitOptionStencilFromDepthStencil;
#[cfg(feature = "Metal_MTLBlitPassDescriptor")]
pub use self::__MTLBlitPass::MTLBlitPassDescriptor;
#[cfg(feature = "Metal_MTLBlitPassSampleBufferAttachmentDescriptor")]
pub use self::__MTLBlitPass::MTLBlitPassSampleBufferAttachmentDescriptor;
#[cfg(feature = "Metal_MTLBlitPassSampleBufferAttachmentDescriptorArray")]
pub use self::__MTLBlitPass::MTLBlitPassSampleBufferAttachmentDescriptorArray;
pub use self::__MTLBuffer::MTLBuffer;
#[cfg(feature = "Metal_MTLCaptureDescriptor")]
pub use self::__MTLCaptureManager::MTLCaptureDescriptor;
pub use self::__MTLCaptureManager::MTLCaptureDestination;
pub use self::__MTLCaptureManager::MTLCaptureDestinationDeveloperTools;
pub use self::__MTLCaptureManager::MTLCaptureDestinationGPUTraceDocument;
pub use self::__MTLCaptureManager::MTLCaptureError;
pub use self::__MTLCaptureManager::MTLCaptureErrorAlreadyCapturing;
pub use self::__MTLCaptureManager::MTLCaptureErrorDomain;
pub use self::__MTLCaptureManager::MTLCaptureErrorInvalidDescriptor;
pub use self::__MTLCaptureManager::MTLCaptureErrorNotSupported;
#[cfg(feature = "Metal_MTLCaptureManager")]
pub use self::__MTLCaptureManager::MTLCaptureManager;
pub use self::__MTLCaptureScope::MTLCaptureScope;
pub use self::__MTLCommandBuffer::MTLCommandBuffer;
#[cfg(feature = "Metal_MTLCommandBufferDescriptor")]
pub use self::__MTLCommandBuffer::MTLCommandBufferDescriptor;
pub use self::__MTLCommandBuffer::MTLCommandBufferEncoderInfo;
pub use self::__MTLCommandBuffer::MTLCommandBufferEncoderInfoErrorKey;
pub use self::__MTLCommandBuffer::MTLCommandBufferError;
pub use self::__MTLCommandBuffer::MTLCommandBufferErrorAccessRevoked;
pub use self::__MTLCommandBuffer::MTLCommandBufferErrorBlacklisted;
#[cfg(not(any(target_os = "ios")))]
pub use self::__MTLCommandBuffer::MTLCommandBufferErrorDeviceRemoved;
pub use self::__MTLCommandBuffer::MTLCommandBufferErrorDomain;
pub use self::__MTLCommandBuffer::MTLCommandBufferErrorInternal;
pub use self::__MTLCommandBuffer::MTLCommandBufferErrorInvalidResource;
pub use self::__MTLCommandBuffer::MTLCommandBufferErrorMemoryless;
pub use self::__MTLCommandBuffer::MTLCommandBufferErrorNone;
pub use self::__MTLCommandBuffer::MTLCommandBufferErrorNotPermitted;
pub use self::__MTLCommandBuffer::MTLCommandBufferErrorOption;
pub use self::__MTLCommandBuffer::MTLCommandBufferErrorOptionEncoderExecutionStatus;
pub use self::__MTLCommandBuffer::MTLCommandBufferErrorOptionNone;
pub use self::__MTLCommandBuffer::MTLCommandBufferErrorOutOfMemory;
pub use self::__MTLCommandBuffer::MTLCommandBufferErrorPageFault;
pub use self::__MTLCommandBuffer::MTLCommandBufferErrorStackOverflow;
pub use self::__MTLCommandBuffer::MTLCommandBufferErrorTimeout;
pub use self::__MTLCommandBuffer::MTLCommandBufferHandler;
pub use self::__MTLCommandBuffer::MTLCommandBufferStatus;
pub use self::__MTLCommandBuffer::MTLCommandBufferStatusCommitted;
pub use self::__MTLCommandBuffer::MTLCommandBufferStatusCompleted;
pub use self::__MTLCommandBuffer::MTLCommandBufferStatusEnqueued;
pub use self::__MTLCommandBuffer::MTLCommandBufferStatusError;
pub use self::__MTLCommandBuffer::MTLCommandBufferStatusNotEnqueued;
pub use self::__MTLCommandBuffer::MTLCommandBufferStatusScheduled;
pub use self::__MTLCommandBuffer::MTLCommandEncoderErrorState;
pub use self::__MTLCommandBuffer::MTLCommandEncoderErrorStateAffected;
pub use self::__MTLCommandBuffer::MTLCommandEncoderErrorStateCompleted;
pub use self::__MTLCommandBuffer::MTLCommandEncoderErrorStateFaulted;
pub use self::__MTLCommandBuffer::MTLCommandEncoderErrorStatePending;
pub use self::__MTLCommandBuffer::MTLCommandEncoderErrorStateUnknown;
pub use self::__MTLCommandBuffer::MTLDispatchType;
pub use self::__MTLCommandBuffer::MTLDispatchTypeConcurrent;
pub use self::__MTLCommandBuffer::MTLDispatchTypeSerial;
pub use self::__MTLCommandEncoder::MTLBarrierScope;
pub use self::__MTLCommandEncoder::MTLBarrierScopeBuffers;
#[cfg(not(any(target_os = "ios")))]
pub use self::__MTLCommandEncoder::MTLBarrierScopeRenderTargets;
pub use self::__MTLCommandEncoder::MTLBarrierScopeTextures;
pub use self::__MTLCommandEncoder::MTLCommandEncoder;
pub use self::__MTLCommandEncoder::MTLResourceUsage;
pub use self::__MTLCommandEncoder::MTLResourceUsageRead;
pub use self::__MTLCommandEncoder::MTLResourceUsageSample;
pub use self::__MTLCommandEncoder::MTLResourceUsageWrite;
pub use self::__MTLCommandQueue::MTLCommandQueue;
pub use self::__MTLComputeCommandEncoder::MTLComputeCommandEncoder;
pub use self::__MTLComputeCommandEncoder::MTLDispatchThreadgroupsIndirectArguments;
pub use self::__MTLComputeCommandEncoder::MTLStageInRegionIndirectArguments;
#[cfg(feature = "Metal_MTLComputePassDescriptor")]
pub use self::__MTLComputePass::MTLComputePassDescriptor;
#[cfg(feature = "Metal_MTLComputePassSampleBufferAttachmentDescriptor")]
pub use self::__MTLComputePass::MTLComputePassSampleBufferAttachmentDescriptor;
#[cfg(feature = "Metal_MTLComputePassSampleBufferAttachmentDescriptorArray")]
pub use self::__MTLComputePass::MTLComputePassSampleBufferAttachmentDescriptorArray;
#[cfg(feature = "Metal_MTLComputePipelineDescriptor")]
pub use self::__MTLComputePipeline::MTLComputePipelineDescriptor;
#[cfg(feature = "Metal_MTLComputePipelineReflection")]
pub use self::__MTLComputePipeline::MTLComputePipelineReflection;
pub use self::__MTLComputePipeline::MTLComputePipelineState;
pub use self::__MTLCounters::MTLCommonCounter;
pub use self::__MTLCounters::MTLCommonCounterClipperInvocations;
pub use self::__MTLCounters::MTLCommonCounterClipperPrimitivesOut;
pub use self::__MTLCounters::MTLCommonCounterComputeKernelInvocations;
pub use self::__MTLCounters::MTLCommonCounterFragmentCycles;
pub use self::__MTLCounters::MTLCommonCounterFragmentInvocations;
pub use self::__MTLCounters::MTLCommonCounterFragmentsPassed;
pub use self::__MTLCounters::MTLCommonCounterPostTessellationVertexCycles;
pub use self::__MTLCounters::MTLCommonCounterPostTessellationVertexInvocations;
pub use self::__MTLCounters::MTLCommonCounterRenderTargetWriteCycles;
pub use self::__MTLCounters::MTLCommonCounterSet;
pub use self::__MTLCounters::MTLCommonCounterSetStageUtilization;
pub use self::__MTLCounters::MTLCommonCounterSetStatistic;
pub use self::__MTLCounters::MTLCommonCounterSetTimestamp;
pub use self::__MTLCounters::MTLCommonCounterTessellationCycles;
pub use self::__MTLCounters::MTLCommonCounterTessellationInputPatches;
pub use self::__MTLCounters::MTLCommonCounterTimestamp;
pub use self::__MTLCounters::MTLCommonCounterTotalCycles;
pub use self::__MTLCounters::MTLCommonCounterVertexCycles;
pub use self::__MTLCounters::MTLCommonCounterVertexInvocations;
pub use self::__MTLCounters::MTLCounter;
pub use self::__MTLCounters::MTLCounterErrorDomain;
pub use self::__MTLCounters::MTLCounterResultStageUtilization;
pub use self::__MTLCounters::MTLCounterResultStatistic;
pub use self::__MTLCounters::MTLCounterResultTimestamp;
pub use self::__MTLCounters::MTLCounterSampleBuffer;
#[cfg(feature = "Metal_MTLCounterSampleBufferDescriptor")]
pub use self::__MTLCounters::MTLCounterSampleBufferDescriptor;
pub use self::__MTLCounters::MTLCounterSampleBufferError;
pub use self::__MTLCounters::MTLCounterSampleBufferErrorInternal;
pub use self::__MTLCounters::MTLCounterSampleBufferErrorInvalid;
pub use self::__MTLCounters::MTLCounterSampleBufferErrorOutOfMemory;
pub use self::__MTLCounters::MTLCounterSet;
pub use self::__MTLDepthStencil::MTLCompareFunction;
pub use self::__MTLDepthStencil::MTLCompareFunctionAlways;
pub use self::__MTLDepthStencil::MTLCompareFunctionEqual;
pub use self::__MTLDepthStencil::MTLCompareFunctionGreater;
pub use self::__MTLDepthStencil::MTLCompareFunctionGreaterEqual;
pub use self::__MTLDepthStencil::MTLCompareFunctionLess;
pub use self::__MTLDepthStencil::MTLCompareFunctionLessEqual;
pub use self::__MTLDepthStencil::MTLCompareFunctionNever;
pub use self::__MTLDepthStencil::MTLCompareFunctionNotEqual;
#[cfg(feature = "Metal_MTLDepthStencilDescriptor")]
pub use self::__MTLDepthStencil::MTLDepthStencilDescriptor;
pub use self::__MTLDepthStencil::MTLDepthStencilState;
#[cfg(feature = "Metal_MTLStencilDescriptor")]
pub use self::__MTLDepthStencil::MTLStencilDescriptor;
pub use self::__MTLDepthStencil::MTLStencilOperation;
pub use self::__MTLDepthStencil::MTLStencilOperationDecrementClamp;
pub use self::__MTLDepthStencil::MTLStencilOperationDecrementWrap;
pub use self::__MTLDepthStencil::MTLStencilOperationIncrementClamp;
pub use self::__MTLDepthStencil::MTLStencilOperationIncrementWrap;
pub use self::__MTLDepthStencil::MTLStencilOperationInvert;
pub use self::__MTLDepthStencil::MTLStencilOperationKeep;
pub use self::__MTLDepthStencil::MTLStencilOperationReplace;
pub use self::__MTLDepthStencil::MTLStencilOperationZero;
pub use self::__MTLDevice::MTLAccelerationStructureSizes;
pub use self::__MTLDevice::MTLArgumentBuffersTier;
pub use self::__MTLDevice::MTLArgumentBuffersTier1;
pub use self::__MTLDevice::MTLArgumentBuffersTier2;
#[cfg(feature = "Metal_MTLArgumentDescriptor")]
pub use self::__MTLDevice::MTLArgumentDescriptor;
#[cfg(feature = "Foundation_NSArray")]
#[cfg(not(any(target_os = "ios")))]
pub use self::__MTLDevice::MTLCopyAllDevices;
pub use self::__MTLDevice::MTLCounterSamplingPoint;
pub use self::__MTLDevice::MTLCounterSamplingPointAtBlitBoundary;
pub use self::__MTLDevice::MTLCounterSamplingPointAtDispatchBoundary;
pub use self::__MTLDevice::MTLCounterSamplingPointAtDrawBoundary;
pub use self::__MTLDevice::MTLCounterSamplingPointAtStageBoundary;
pub use self::__MTLDevice::MTLCounterSamplingPointAtTileDispatchBoundary;
pub use self::__MTLDevice::MTLCreateSystemDefaultDevice;
pub use self::__MTLDevice::MTLDevice;
#[cfg(not(any(target_os = "ios")))]
pub use self::__MTLDevice::MTLDeviceLocation;
#[cfg(not(any(target_os = "ios")))]
pub use self::__MTLDevice::MTLDeviceLocationBuiltIn;
#[cfg(not(any(target_os = "ios")))]
pub use self::__MTLDevice::MTLDeviceLocationExternal;
#[cfg(not(any(target_os = "ios")))]
pub use self::__MTLDevice::MTLDeviceLocationSlot;
#[cfg(not(any(target_os = "ios")))]
pub use self::__MTLDevice::MTLDeviceLocationUnspecified;
#[cfg(not(any(target_os = "ios")))]
pub use self::__MTLDevice::MTLDeviceNotificationHandler;
#[cfg(not(any(target_os = "ios")))]
pub use self::__MTLDevice::MTLDeviceNotificationName;
#[cfg(not(any(target_os = "ios")))]
pub use self::__MTLDevice::MTLDeviceRemovalRequestedNotification;
#[cfg(not(any(target_os = "ios")))]
pub use self::__MTLDevice::MTLDeviceWasAddedNotification;
#[cfg(not(any(target_os = "ios")))]
pub use self::__MTLDevice::MTLDeviceWasRemovedNotification;
pub use self::__MTLDevice::MTLFeatureSet;
#[cfg(not(any(target_os = "ios")))]
pub use self::__MTLDevice::MTLFeatureSet_OSX_GPUFamily1_v1;
#[cfg(not(any(target_os = "ios")))]
pub use self::__MTLDevice::MTLFeatureSet_OSX_GPUFamily1_v2;
#[cfg(not(any(target_os = "ios")))]
pub use self::__MTLDevice::MTLFeatureSet_OSX_ReadWriteTextureTier2;
#[cfg(not(any(target_os = "ios", target_os = "macos")))]
pub use self::__MTLDevice::MTLFeatureSet_TVOS_GPUFamily1_v1;
#[cfg(not(any(target_os = "macos", target_os = "tvos")))]
pub use self::__MTLDevice::MTLFeatureSet_iOS_GPUFamily1_v1;
#[cfg(not(any(target_os = "macos", target_os = "tvos")))]
pub use self::__MTLDevice::MTLFeatureSet_iOS_GPUFamily1_v2;
#[cfg(not(any(target_os = "macos", target_os = "tvos")))]
pub use self::__MTLDevice::MTLFeatureSet_iOS_GPUFamily1_v3;
#[cfg(not(any(target_os = "macos", target_os = "tvos")))]
pub use self::__MTLDevice::MTLFeatureSet_iOS_GPUFamily1_v4;
#[cfg(not(any(target_os = "macos", target_os = "tvos")))]
pub use self::__MTLDevice::MTLFeatureSet_iOS_GPUFamily1_v5;
#[cfg(not(any(target_os = "macos", target_os = "tvos")))]
pub use self::__MTLDevice::MTLFeatureSet_iOS_GPUFamily2_v1;
#[cfg(not(any(target_os = "macos", target_os = "tvos")))]
pub use self::__MTLDevice::MTLFeatureSet_iOS_GPUFamily2_v2;
#[cfg(not(any(target_os = "macos", target_os = "tvos")))]
pub use self::__MTLDevice::MTLFeatureSet_iOS_GPUFamily2_v3;
#[cfg(not(any(target_os = "macos", target_os = "tvos")))]
pub use self::__MTLDevice::MTLFeatureSet_iOS_GPUFamily2_v4;
#[cfg(not(any(target_os = "macos", target_os = "tvos")))]
pub use self::__MTLDevice::MTLFeatureSet_iOS_GPUFamily2_v5;
#[cfg(not(any(target_os = "macos", target_os = "tvos")))]
pub use self::__MTLDevice::MTLFeatureSet_iOS_GPUFamily3_v1;
#[cfg(not(any(target_os = "macos", target_os = "tvos")))]
pub use self::__MTLDevice::MTLFeatureSet_iOS_GPUFamily3_v2;
#[cfg(not(any(target_os = "macos", target_os = "tvos")))]
pub use self::__MTLDevice::MTLFeatureSet_iOS_GPUFamily3_v3;
#[cfg(not(any(target_os = "macos", target_os = "tvos")))]
pub use self::__MTLDevice::MTLFeatureSet_iOS_GPUFamily3_v4;
#[cfg(not(any(target_os = "macos", target_os = "tvos")))]
pub use self::__MTLDevice::MTLFeatureSet_iOS_GPUFamily4_v1;
#[cfg(not(any(target_os = "macos", target_os = "tvos")))]
pub use self::__MTLDevice::MTLFeatureSet_iOS_GPUFamily4_v2;
#[cfg(not(any(target_os = "macos", target_os = "tvos")))]
pub use self::__MTLDevice::MTLFeatureSet_iOS_GPUFamily5_v1;
#[cfg(not(any(target_os = "ios")))]
pub use self::__MTLDevice::MTLFeatureSet_macOS_GPUFamily1_v1;
#[cfg(not(any(target_os = "ios")))]
pub use self::__MTLDevice::MTLFeatureSet_macOS_GPUFamily1_v2;
#[cfg(not(any(target_os = "ios")))]
pub use self::__MTLDevice::MTLFeatureSet_macOS_GPUFamily1_v3;
#[cfg(not(any(target_os = "ios")))]
pub use self::__MTLDevice::MTLFeatureSet_macOS_GPUFamily1_v4;
#[cfg(not(any(target_os = "ios")))]
pub use self::__MTLDevice::MTLFeatureSet_macOS_GPUFamily2_v1;
#[cfg(not(any(target_os = "ios")))]
pub use self::__MTLDevice::MTLFeatureSet_macOS_ReadWriteTextureTier2;
#[cfg(not(any(target_os = "ios", target_os = "macos")))]
pub use self::__MTLDevice::MTLFeatureSet_tvOS_GPUFamily1_v1;
#[cfg(not(any(target_os = "ios", target_os = "macos")))]
pub use self::__MTLDevice::MTLFeatureSet_tvOS_GPUFamily1_v2;
#[cfg(not(any(target_os = "ios", target_os = "macos")))]
pub use self::__MTLDevice::MTLFeatureSet_tvOS_GPUFamily1_v3;
#[cfg(not(any(target_os = "ios", target_os = "macos")))]
pub use self::__MTLDevice::MTLFeatureSet_tvOS_GPUFamily1_v4;
#[cfg(not(any(target_os = "ios", target_os = "macos")))]
pub use self::__MTLDevice::MTLFeatureSet_tvOS_GPUFamily2_v1;
#[cfg(not(any(target_os = "ios", target_os = "macos")))]
pub use self::__MTLDevice::MTLFeatureSet_tvOS_GPUFamily2_v2;
pub use self::__MTLDevice::MTLGPUFamily;
pub use self::__MTLDevice::MTLGPUFamilyApple1;
pub use self::__MTLDevice::MTLGPUFamilyApple2;
pub use self::__MTLDevice::MTLGPUFamilyApple3;
pub use self::__MTLDevice::MTLGPUFamilyApple4;
pub use self::__MTLDevice::MTLGPUFamilyApple5;
pub use self::__MTLDevice::MTLGPUFamilyApple6;
pub use self::__MTLDevice::MTLGPUFamilyApple7;
pub use self::__MTLDevice::MTLGPUFamilyApple8;
pub use self::__MTLDevice::MTLGPUFamilyCommon1;
pub use self::__MTLDevice::MTLGPUFamilyCommon2;
pub use self::__MTLDevice::MTLGPUFamilyCommon3;
pub use self::__MTLDevice::MTLGPUFamilyMac1;
pub use self::__MTLDevice::MTLGPUFamilyMac2;
pub use self::__MTLDevice::MTLGPUFamilyMacCatalyst1;
pub use self::__MTLDevice::MTLGPUFamilyMacCatalyst2;
pub use self::__MTLDevice::MTLGPUFamilyMetal3;
pub use self::__MTLDevice::MTLIOCompressionMethod;
pub use self::__MTLDevice::MTLIOCompressionMethodLZ4;
pub use self::__MTLDevice::MTLIOCompressionMethodLZBitmap;
pub use self::__MTLDevice::MTLIOCompressionMethodLZFSE;
pub use self::__MTLDevice::MTLIOCompressionMethodLZMA;
pub use self::__MTLDevice::MTLIOCompressionMethodZlib;
pub use self::__MTLDevice::MTLNewComputePipelineStateCompletionHandler;
pub use self::__MTLDevice::MTLNewComputePipelineStateWithReflectionCompletionHandler;
pub use self::__MTLDevice::MTLNewLibraryCompletionHandler;
pub use self::__MTLDevice::MTLNewRenderPipelineStateCompletionHandler;
pub use self::__MTLDevice::MTLNewRenderPipelineStateWithReflectionCompletionHandler;
pub use self::__MTLDevice::MTLPipelineOption;
pub use self::__MTLDevice::MTLPipelineOptionArgumentInfo;
pub use self::__MTLDevice::MTLPipelineOptionBufferTypeInfo;
pub use self::__MTLDevice::MTLPipelineOptionFailOnBinaryArchiveMiss;
pub use self::__MTLDevice::MTLPipelineOptionNone;
pub use self::__MTLDevice::MTLReadWriteTextureTier;
pub use self::__MTLDevice::MTLReadWriteTextureTier1;
pub use self::__MTLDevice::MTLReadWriteTextureTier2;
pub use self::__MTLDevice::MTLReadWriteTextureTierNone;
#[cfg(not(any(target_os = "ios")))]
pub use self::__MTLDevice::MTLRemoveDeviceObserver;
pub use self::__MTLDevice::MTLSizeAndAlign;
pub use self::__MTLDevice::MTLSparsePageSize;
pub use self::__MTLDevice::MTLSparsePageSize16;
pub use self::__MTLDevice::MTLSparsePageSize256;
pub use self::__MTLDevice::MTLSparsePageSize64;
pub use self::__MTLDevice::MTLSparseTextureRegionAlignmentMode;
pub use self::__MTLDevice::MTLSparseTextureRegionAlignmentModeInward;
pub use self::__MTLDevice::MTLSparseTextureRegionAlignmentModeOutward;
pub use self::__MTLDevice::MTLTimestamp;
pub use self::__MTLDrawable::MTLDrawable;
pub use self::__MTLDrawable::MTLDrawablePresentedHandler;
pub use self::__MTLDynamicLibrary::MTLDynamicLibrary;
pub use self::__MTLDynamicLibrary::MTLDynamicLibraryDomain;
pub use self::__MTLDynamicLibrary::MTLDynamicLibraryError;
pub use self::__MTLDynamicLibrary::MTLDynamicLibraryErrorCompilationFailure;
pub use self::__MTLDynamicLibrary::MTLDynamicLibraryErrorDependencyLoadFailure;
pub use self::__MTLDynamicLibrary::MTLDynamicLibraryErrorInvalidFile;
pub use self::__MTLDynamicLibrary::MTLDynamicLibraryErrorNone;
pub use self::__MTLDynamicLibrary::MTLDynamicLibraryErrorUnresolvedInstallName;
pub use self::__MTLDynamicLibrary::MTLDynamicLibraryErrorUnsupported;
pub use self::__MTLEvent::MTLEvent;
pub use self::__MTLEvent::MTLSharedEvent;
#[cfg(feature = "Metal_MTLSharedEventHandle")]
pub use self::__MTLEvent::MTLSharedEventHandle;
#[cfg(feature = "Metal_MTLSharedEventListener")]
pub use self::__MTLEvent::MTLSharedEventListener;
pub use self::__MTLEvent::MTLSharedEventNotificationBlock;
pub use self::__MTLFence::MTLFence;
#[cfg(feature = "Metal_MTLFunctionConstantValues")]
pub use self::__MTLFunctionConstantValues::MTLFunctionConstantValues;
#[cfg(feature = "Metal_MTLFunctionDescriptor")]
pub use self::__MTLFunctionDescriptor::MTLFunctionDescriptor;
pub use self::__MTLFunctionDescriptor::MTLFunctionOptionCompileToBinary;
pub use self::__MTLFunctionDescriptor::MTLFunctionOptionNone;
pub use self::__MTLFunctionDescriptor::MTLFunctionOptions;
#[cfg(feature = "Metal_MTLIntersectionFunctionDescriptor")]
pub use self::__MTLFunctionDescriptor::MTLIntersectionFunctionDescriptor;
pub use self::__MTLFunctionHandle::MTLFunctionHandle;
pub use self::__MTLFunctionLog::MTLFunctionLog;
pub use self::__MTLFunctionLog::MTLFunctionLogDebugLocation;
pub use self::__MTLFunctionLog::MTLFunctionLogType;
pub use self::__MTLFunctionLog::MTLFunctionLogTypeValidation;
pub use self::__MTLFunctionLog::MTLLogContainer;
pub use self::__MTLFunctionStitching::MTLFunctionStitchingAttribute;
#[cfg(feature = "Metal_MTLFunctionStitchingAttributeAlwaysInline")]
pub use self::__MTLFunctionStitching::MTLFunctionStitchingAttributeAlwaysInline;
#[cfg(feature = "Metal_MTLFunctionStitchingFunctionNode")]
pub use self::__MTLFunctionStitching::MTLFunctionStitchingFunctionNode;
#[cfg(feature = "Metal_MTLFunctionStitchingGraph")]
pub use self::__MTLFunctionStitching::MTLFunctionStitchingGraph;
#[cfg(feature = "Metal_MTLFunctionStitchingInputNode")]
pub use self::__MTLFunctionStitching::MTLFunctionStitchingInputNode;
pub use self::__MTLFunctionStitching::MTLFunctionStitchingNode;
#[cfg(feature = "Metal_MTLStitchedLibraryDescriptor")]
pub use self::__MTLFunctionStitching::MTLStitchedLibraryDescriptor;
pub use self::__MTLHeap::MTLHeap;
#[cfg(feature = "Metal_MTLHeapDescriptor")]
pub use self::__MTLHeap::MTLHeapDescriptor;
pub use self::__MTLHeap::MTLHeapType;
pub use self::__MTLHeap::MTLHeapTypeAutomatic;
pub use self::__MTLHeap::MTLHeapTypePlacement;
pub use self::__MTLHeap::MTLHeapTypeSparse;
pub use self::__MTLIOCommandBuffer::MTLIOCommandBuffer;
pub use self::__MTLIOCommandBuffer::MTLIOCommandBufferHandler;
pub use self::__MTLIOCommandBuffer::MTLIOStatus;
pub use self::__MTLIOCommandBuffer::MTLIOStatusCancelled;
pub use self::__MTLIOCommandBuffer::MTLIOStatusComplete;
pub use self::__MTLIOCommandBuffer::MTLIOStatusError;
pub use self::__MTLIOCommandBuffer::MTLIOStatusPending;
pub use self::__MTLIOCommandQueue::MTLIOCommandQueue;
#[cfg(feature = "Metal_MTLIOCommandQueueDescriptor")]
pub use self::__MTLIOCommandQueue::MTLIOCommandQueueDescriptor;
pub use self::__MTLIOCommandQueue::MTLIOCommandQueueType;
pub use self::__MTLIOCommandQueue::MTLIOCommandQueueTypeConcurrent;
pub use self::__MTLIOCommandQueue::MTLIOCommandQueueTypeSerial;
pub use self::__MTLIOCommandQueue::MTLIOError;
pub use self::__MTLIOCommandQueue::MTLIOErrorDomain;
pub use self::__MTLIOCommandQueue::MTLIOErrorInternal;
pub use self::__MTLIOCommandQueue::MTLIOErrorURLInvalid;
pub use self::__MTLIOCommandQueue::MTLIOFileHandle;
pub use self::__MTLIOCommandQueue::MTLIOPriority;
pub use self::__MTLIOCommandQueue::MTLIOPriorityHigh;
pub use self::__MTLIOCommandQueue::MTLIOPriorityLow;
pub use self::__MTLIOCommandQueue::MTLIOPriorityNormal;
pub use self::__MTLIOCommandQueue::MTLIOScratchBuffer;
pub use self::__MTLIOCommandQueue::MTLIOScratchBufferAllocator;
pub use self::__MTLIOCompressor::MTLIOCompressionContext;
pub use self::__MTLIOCompressor::MTLIOCompressionContextAppendData;
pub use self::__MTLIOCompressor::MTLIOCompressionContextDefaultChunkSize;
pub use self::__MTLIOCompressor::MTLIOCompressionStatus;
pub use self::__MTLIOCompressor::MTLIOCompressionStatusComplete;
pub use self::__MTLIOCompressor::MTLIOCompressionStatusError;
pub use self::__MTLIOCompressor::MTLIOCreateCompressionContext;
pub use self::__MTLIOCompressor::MTLIOFlushAndDestroyCompressionContext;
pub use self::__MTLIndirectCommandBuffer::MTLIndirectCommandBuffer;
#[cfg(feature = "Metal_MTLIndirectCommandBufferDescriptor")]
pub use self::__MTLIndirectCommandBuffer::MTLIndirectCommandBufferDescriptor;
pub use self::__MTLIndirectCommandBuffer::MTLIndirectCommandBufferExecutionRange;
pub use self::__MTLIndirectCommandBuffer::MTLIndirectCommandType;
pub use self::__MTLIndirectCommandBuffer::MTLIndirectCommandTypeConcurrentDispatch;
pub use self::__MTLIndirectCommandBuffer::MTLIndirectCommandTypeConcurrentDispatchThreads;
pub use self::__MTLIndirectCommandBuffer::MTLIndirectCommandTypeDraw;
pub use self::__MTLIndirectCommandBuffer::MTLIndirectCommandTypeDrawIndexed;
pub use self::__MTLIndirectCommandBuffer::MTLIndirectCommandTypeDrawIndexedPatches;
pub use self::__MTLIndirectCommandBuffer::MTLIndirectCommandTypeDrawPatches;
pub use self::__MTLIndirectCommandEncoder::MTLIndirectComputeCommand;
pub use self::__MTLIndirectCommandEncoder::MTLIndirectRenderCommand;
pub use self::__MTLIntersectionFunctionTable::MTLIntersectionFunctionSignature;
pub use self::__MTLIntersectionFunctionTable::MTLIntersectionFunctionSignatureExtendedLimits;
pub use self::__MTLIntersectionFunctionTable::MTLIntersectionFunctionSignatureInstanceMotion;
pub use self::__MTLIntersectionFunctionTable::MTLIntersectionFunctionSignatureInstancing;
pub use self::__MTLIntersectionFunctionTable::MTLIntersectionFunctionSignatureNone;
pub use self::__MTLIntersectionFunctionTable::MTLIntersectionFunctionSignaturePrimitiveMotion;
pub use self::__MTLIntersectionFunctionTable::MTLIntersectionFunctionSignatureTriangleData;
pub use self::__MTLIntersectionFunctionTable::MTLIntersectionFunctionSignatureWorldSpaceData;
pub use self::__MTLIntersectionFunctionTable::MTLIntersectionFunctionTable;
#[cfg(feature = "Metal_MTLIntersectionFunctionTableDescriptor")]
pub use self::__MTLIntersectionFunctionTable::MTLIntersectionFunctionTableDescriptor;
#[cfg(feature = "Metal_MTLAttribute")]
pub use self::__MTLLibrary::MTLAttribute;
#[cfg(feature = "Metal_MTLCompileOptions")]
pub use self::__MTLLibrary::MTLCompileOptions;
pub use self::__MTLLibrary::MTLFunction;
#[cfg(feature = "Metal_MTLFunctionConstant")]
pub use self::__MTLLibrary::MTLFunctionConstant;
pub use self::__MTLLibrary::MTLFunctionType;
pub use self::__MTLLibrary::MTLFunctionTypeFragment;
pub use self::__MTLLibrary::MTLFunctionTypeIntersection;
pub use self::__MTLLibrary::MTLFunctionTypeKernel;
pub use self::__MTLLibrary::MTLFunctionTypeMesh;
pub use self::__MTLLibrary::MTLFunctionTypeObject;
pub use self::__MTLLibrary::MTLFunctionTypeVertex;
pub use self::__MTLLibrary::MTLFunctionTypeVisible;
pub use self::__MTLLibrary::MTLLanguageVersion;
#[cfg(not(any(target_os = "macos")))]
pub use self::__MTLLibrary::MTLLanguageVersion1_0;
pub use self::__MTLLibrary::MTLLanguageVersion1_1;
pub use self::__MTLLibrary::MTLLanguageVersion1_2;
pub use self::__MTLLibrary::MTLLanguageVersion2_0;
pub use self::__MTLLibrary::MTLLanguageVersion2_1;
pub use self::__MTLLibrary::MTLLanguageVersion2_2;
pub use self::__MTLLibrary::MTLLanguageVersion2_3;
pub use self::__MTLLibrary::MTLLanguageVersion2_4;
pub use self::__MTLLibrary::MTLLanguageVersion3_0;
pub use self::__MTLLibrary::MTLLibrary;
pub use self::__MTLLibrary::MTLLibraryError;
pub use self::__MTLLibrary::MTLLibraryErrorCompileFailure;
pub use self::__MTLLibrary::MTLLibraryErrorCompileWarning;
pub use self::__MTLLibrary::MTLLibraryErrorDomain;
pub use self::__MTLLibrary::MTLLibraryErrorFileNotFound;
pub use self::__MTLLibrary::MTLLibraryErrorFunctionNotFound;
pub use self::__MTLLibrary::MTLLibraryErrorInternal;
pub use self::__MTLLibrary::MTLLibraryErrorUnsupported;
pub use self::__MTLLibrary::MTLLibraryOptimizationLevel;
pub use self::__MTLLibrary::MTLLibraryOptimizationLevelDefault;
pub use self::__MTLLibrary::MTLLibraryOptimizationLevelSize;
pub use self::__MTLLibrary::MTLLibraryType;
pub use self::__MTLLibrary::MTLLibraryTypeDynamic;
pub use self::__MTLLibrary::MTLLibraryTypeExecutable;
pub use self::__MTLLibrary::MTLPatchType;
pub use self::__MTLLibrary::MTLPatchTypeNone;
pub use self::__MTLLibrary::MTLPatchTypeQuad;
pub use self::__MTLLibrary::MTLPatchTypeTriangle;
#[cfg(feature = "Metal_MTLVertexAttribute")]
pub use self::__MTLLibrary::MTLVertexAttribute;
#[cfg(feature = "Metal_MTLLinkedFunctions")]
pub use self::__MTLLinkedFunctions::MTLLinkedFunctions;
pub use self::__MTLParallelRenderCommandEncoder::MTLParallelRenderCommandEncoder;
pub use self::__MTLPipeline::MTLMutability;
pub use self::__MTLPipeline::MTLMutabilityDefault;
pub use self::__MTLPipeline::MTLMutabilityImmutable;
pub use self::__MTLPipeline::MTLMutabilityMutable;
#[cfg(feature = "Metal_MTLPipelineBufferDescriptor")]
pub use self::__MTLPipeline::MTLPipelineBufferDescriptor;
#[cfg(feature = "Metal_MTLPipelineBufferDescriptorArray")]
pub use self::__MTLPipeline::MTLPipelineBufferDescriptorArray;
pub use self::__MTLPixelFormat::MTLPixelFormat;
pub use self::__MTLPixelFormat::MTLPixelFormatA1BGR5Unorm;
pub use self::__MTLPixelFormat::MTLPixelFormatA8Unorm;
pub use self::__MTLPixelFormat::MTLPixelFormatABGR4Unorm;
pub use self::__MTLPixelFormat::MTLPixelFormatASTC_10x10_HDR;
pub use self::__MTLPixelFormat::MTLPixelFormatASTC_10x10_LDR;
pub use self::__MTLPixelFormat::MTLPixelFormatASTC_10x10_sRGB;
pub use self::__MTLPixelFormat::MTLPixelFormatASTC_10x5_HDR;
pub use self::__MTLPixelFormat::MTLPixelFormatASTC_10x5_LDR;
pub use self::__MTLPixelFormat::MTLPixelFormatASTC_10x5_sRGB;
pub use self::__MTLPixelFormat::MTLPixelFormatASTC_10x6_HDR;
pub use self::__MTLPixelFormat::MTLPixelFormatASTC_10x6_LDR;
pub use self::__MTLPixelFormat::MTLPixelFormatASTC_10x6_sRGB;
pub use self::__MTLPixelFormat::MTLPixelFormatASTC_10x8_HDR;
pub use self::__MTLPixelFormat::MTLPixelFormatASTC_10x8_LDR;
pub use self::__MTLPixelFormat::MTLPixelFormatASTC_10x8_sRGB;
pub use self::__MTLPixelFormat::MTLPixelFormatASTC_12x10_HDR;
pub use self::__MTLPixelFormat::MTLPixelFormatASTC_12x10_LDR;
pub use self::__MTLPixelFormat::MTLPixelFormatASTC_12x10_sRGB;
pub use self::__MTLPixelFormat::MTLPixelFormatASTC_12x12_HDR;
pub use self::__MTLPixelFormat::MTLPixelFormatASTC_12x12_LDR;
pub use self::__MTLPixelFormat::MTLPixelFormatASTC_12x12_sRGB;
pub use self::__MTLPixelFormat::MTLPixelFormatASTC_4x4_HDR;
pub use self::__MTLPixelFormat::MTLPixelFormatASTC_4x4_LDR;
pub use self::__MTLPixelFormat::MTLPixelFormatASTC_4x4_sRGB;
pub use self::__MTLPixelFormat::MTLPixelFormatASTC_5x4_HDR;
pub use self::__MTLPixelFormat::MTLPixelFormatASTC_5x4_LDR;
pub use self::__MTLPixelFormat::MTLPixelFormatASTC_5x4_sRGB;
pub use self::__MTLPixelFormat::MTLPixelFormatASTC_5x5_HDR;
pub use self::__MTLPixelFormat::MTLPixelFormatASTC_5x5_LDR;
pub use self::__MTLPixelFormat::MTLPixelFormatASTC_5x5_sRGB;
pub use self::__MTLPixelFormat::MTLPixelFormatASTC_6x5_HDR;
pub use self::__MTLPixelFormat::MTLPixelFormatASTC_6x5_LDR;
pub use self::__MTLPixelFormat::MTLPixelFormatASTC_6x5_sRGB;
pub use self::__MTLPixelFormat::MTLPixelFormatASTC_6x6_HDR;
pub use self::__MTLPixelFormat::MTLPixelFormatASTC_6x6_LDR;
pub use self::__MTLPixelFormat::MTLPixelFormatASTC_6x6_sRGB;
pub use self::__MTLPixelFormat::MTLPixelFormatASTC_8x5_HDR;
pub use self::__MTLPixelFormat::MTLPixelFormatASTC_8x5_LDR;
pub use self::__MTLPixelFormat::MTLPixelFormatASTC_8x5_sRGB;
pub use self::__MTLPixelFormat::MTLPixelFormatASTC_8x6_HDR;
pub use self::__MTLPixelFormat::MTLPixelFormatASTC_8x6_LDR;
pub use self::__MTLPixelFormat::MTLPixelFormatASTC_8x6_sRGB;
pub use self::__MTLPixelFormat::MTLPixelFormatASTC_8x8_HDR;
pub use self::__MTLPixelFormat::MTLPixelFormatASTC_8x8_LDR;
pub use self::__MTLPixelFormat::MTLPixelFormatASTC_8x8_sRGB;
pub use self::__MTLPixelFormat::MTLPixelFormatB5G6R5Unorm;
#[cfg(not(any(target_os = "ios")))]
pub use self::__MTLPixelFormat::MTLPixelFormatBC1_RGBA;
#[cfg(not(any(target_os = "ios")))]
pub use self::__MTLPixelFormat::MTLPixelFormatBC1_RGBA_sRGB;
#[cfg(not(any(target_os = "ios")))]
pub use self::__MTLPixelFormat::MTLPixelFormatBC2_RGBA;
#[cfg(not(any(target_os = "ios")))]
pub use self::__MTLPixelFormat::MTLPixelFormatBC2_RGBA_sRGB;
#[cfg(not(any(target_os = "ios")))]
pub use self::__MTLPixelFormat::MTLPixelFormatBC3_RGBA;
#[cfg(not(any(target_os = "ios")))]
pub use self::__MTLPixelFormat::MTLPixelFormatBC3_RGBA_sRGB;
#[cfg(not(any(target_os = "ios")))]
pub use self::__MTLPixelFormat::MTLPixelFormatBC4_RSnorm;
#[cfg(not(any(target_os = "ios")))]
pub use self::__MTLPixelFormat::MTLPixelFormatBC4_RUnorm;
#[cfg(not(any(target_os = "ios")))]
pub use self::__MTLPixelFormat::MTLPixelFormatBC5_RGSnorm;
#[cfg(not(any(target_os = "ios")))]
pub use self::__MTLPixelFormat::MTLPixelFormatBC5_RGUnorm;
#[cfg(not(any(target_os = "ios")))]
pub use self::__MTLPixelFormat::MTLPixelFormatBC6H_RGBFloat;
#[cfg(not(any(target_os = "ios")))]
pub use self::__MTLPixelFormat::MTLPixelFormatBC6H_RGBUfloat;
#[cfg(not(any(target_os = "ios")))]
pub use self::__MTLPixelFormat::MTLPixelFormatBC7_RGBAUnorm;
#[cfg(not(any(target_os = "ios")))]
pub use self::__MTLPixelFormat::MTLPixelFormatBC7_RGBAUnorm_sRGB;
pub use self::__MTLPixelFormat::MTLPixelFormatBGR10A2Unorm;
pub use self::__MTLPixelFormat::MTLPixelFormatBGR10_XR;
pub use self::__MTLPixelFormat::MTLPixelFormatBGR10_XR_sRGB;
pub use self::__MTLPixelFormat::MTLPixelFormatBGR5A1Unorm;
pub use self::__MTLPixelFormat::MTLPixelFormatBGRA10_XR;
pub use self::__MTLPixelFormat::MTLPixelFormatBGRA10_XR_sRGB;
pub use self::__MTLPixelFormat::MTLPixelFormatBGRA8Unorm;
pub use self::__MTLPixelFormat::MTLPixelFormatBGRA8Unorm_sRGB;
pub use self::__MTLPixelFormat::MTLPixelFormatBGRG422;
pub use self::__MTLPixelFormat::MTLPixelFormatDepth16Unorm;
#[cfg(not(any(target_os = "ios")))]
pub use self::__MTLPixelFormat::MTLPixelFormatDepth24Unorm_Stencil8;
pub use self::__MTLPixelFormat::MTLPixelFormatDepth32Float;
pub use self::__MTLPixelFormat::MTLPixelFormatDepth32Float_Stencil8;
pub use self::__MTLPixelFormat::MTLPixelFormatEAC_R11Snorm;
pub use self::__MTLPixelFormat::MTLPixelFormatEAC_R11Unorm;
pub use self::__MTLPixelFormat::MTLPixelFormatEAC_RG11Snorm;
pub use self::__MTLPixelFormat::MTLPixelFormatEAC_RG11Unorm;
pub use self::__MTLPixelFormat::MTLPixelFormatEAC_RGBA8;
pub use self::__MTLPixelFormat::MTLPixelFormatEAC_RGBA8_sRGB;
pub use self::__MTLPixelFormat::MTLPixelFormatETC2_RGB8;
pub use self::__MTLPixelFormat::MTLPixelFormatETC2_RGB8A1;
pub use self::__MTLPixelFormat::MTLPixelFormatETC2_RGB8A1_sRGB;
pub use self::__MTLPixelFormat::MTLPixelFormatETC2_RGB8_sRGB;
pub use self::__MTLPixelFormat::MTLPixelFormatGBGR422;
pub use self::__MTLPixelFormat::MTLPixelFormatInvalid;
pub use self::__MTLPixelFormat::MTLPixelFormatPVRTC_RGBA_2BPP;
pub use self::__MTLPixelFormat::MTLPixelFormatPVRTC_RGBA_2BPP_sRGB;
pub use self::__MTLPixelFormat::MTLPixelFormatPVRTC_RGBA_4BPP;
pub use self::__MTLPixelFormat::MTLPixelFormatPVRTC_RGBA_4BPP_sRGB;
pub use self::__MTLPixelFormat::MTLPixelFormatPVRTC_RGB_2BPP;
pub use self::__MTLPixelFormat::MTLPixelFormatPVRTC_RGB_2BPP_sRGB;
pub use self::__MTLPixelFormat::MTLPixelFormatPVRTC_RGB_4BPP;
pub use self::__MTLPixelFormat::MTLPixelFormatPVRTC_RGB_4BPP_sRGB;
pub use self::__MTLPixelFormat::MTLPixelFormatR16Float;
pub use self::__MTLPixelFormat::MTLPixelFormatR16Sint;
pub use self::__MTLPixelFormat::MTLPixelFormatR16Snorm;
pub use self::__MTLPixelFormat::MTLPixelFormatR16Uint;
pub use self::__MTLPixelFormat::MTLPixelFormatR16Unorm;
pub use self::__MTLPixelFormat::MTLPixelFormatR32Float;
pub use self::__MTLPixelFormat::MTLPixelFormatR32Sint;
pub use self::__MTLPixelFormat::MTLPixelFormatR32Uint;
pub use self::__MTLPixelFormat::MTLPixelFormatR8Sint;
pub use self::__MTLPixelFormat::MTLPixelFormatR8Snorm;
pub use self::__MTLPixelFormat::MTLPixelFormatR8Uint;
pub use self::__MTLPixelFormat::MTLPixelFormatR8Unorm;
pub use self::__MTLPixelFormat::MTLPixelFormatR8Unorm_sRGB;
pub use self::__MTLPixelFormat::MTLPixelFormatRG11B10Float;
pub use self::__MTLPixelFormat::MTLPixelFormatRG16Float;
pub use self::__MTLPixelFormat::MTLPixelFormatRG16Sint;
pub use self::__MTLPixelFormat::MTLPixelFormatRG16Snorm;
pub use self::__MTLPixelFormat::MTLPixelFormatRG16Uint;
pub use self::__MTLPixelFormat::MTLPixelFormatRG16Unorm;
pub use self::__MTLPixelFormat::MTLPixelFormatRG32Float;
pub use self::__MTLPixelFormat::MTLPixelFormatRG32Sint;
pub use self::__MTLPixelFormat::MTLPixelFormatRG32Uint;
pub use self::__MTLPixelFormat::MTLPixelFormatRG8Sint;
pub use self::__MTLPixelFormat::MTLPixelFormatRG8Snorm;
pub use self::__MTLPixelFormat::MTLPixelFormatRG8Uint;
pub use self::__MTLPixelFormat::MTLPixelFormatRG8Unorm;
pub use self::__MTLPixelFormat::MTLPixelFormatRG8Unorm_sRGB;
pub use self::__MTLPixelFormat::MTLPixelFormatRGB10A2Uint;
pub use self::__MTLPixelFormat::MTLPixelFormatRGB10A2Unorm;
pub use self::__MTLPixelFormat::MTLPixelFormatRGB9E5Float;
pub use self::__MTLPixelFormat::MTLPixelFormatRGBA16Float;
pub use self::__MTLPixelFormat::MTLPixelFormatRGBA16Sint;
pub use self::__MTLPixelFormat::MTLPixelFormatRGBA16Snorm;
pub use self::__MTLPixelFormat::MTLPixelFormatRGBA16Uint;
pub use self::__MTLPixelFormat::MTLPixelFormatRGBA16Unorm;
pub use self::__MTLPixelFormat::MTLPixelFormatRGBA32Float;
pub use self::__MTLPixelFormat::MTLPixelFormatRGBA32Sint;
pub use self::__MTLPixelFormat::MTLPixelFormatRGBA32Uint;
pub use self::__MTLPixelFormat::MTLPixelFormatRGBA8Sint;
pub use self::__MTLPixelFormat::MTLPixelFormatRGBA8Snorm;
pub use self::__MTLPixelFormat::MTLPixelFormatRGBA8Uint;
pub use self::__MTLPixelFormat::MTLPixelFormatRGBA8Unorm;
pub use self::__MTLPixelFormat::MTLPixelFormatRGBA8Unorm_sRGB;
pub use self::__MTLPixelFormat::MTLPixelFormatStencil8;
#[cfg(not(any(target_os = "ios")))]
pub use self::__MTLPixelFormat::MTLPixelFormatX24_Stencil8;
pub use self::__MTLPixelFormat::MTLPixelFormatX32_Stencil8;
#[cfg(feature = "Metal_MTLRasterizationRateLayerArray")]
pub use self::__MTLRasterizationRate::MTLRasterizationRateLayerArray;
#[cfg(feature = "Metal_MTLRasterizationRateLayerDescriptor")]
pub use self::__MTLRasterizationRate::MTLRasterizationRateLayerDescriptor;
pub use self::__MTLRasterizationRate::MTLRasterizationRateMap;
#[cfg(feature = "Metal_MTLRasterizationRateMapDescriptor")]
pub use self::__MTLRasterizationRate::MTLRasterizationRateMapDescriptor;
#[cfg(feature = "Metal_MTLRasterizationRateSampleArray")]
pub use self::__MTLRasterizationRate::MTLRasterizationRateSampleArray;
pub use self::__MTLRenderCommandEncoder::MTLCullMode;
pub use self::__MTLRenderCommandEncoder::MTLCullModeBack;
pub use self::__MTLRenderCommandEncoder::MTLCullModeFront;
pub use self::__MTLRenderCommandEncoder::MTLCullModeNone;
pub use self::__MTLRenderCommandEncoder::MTLDepthClipMode;
pub use self::__MTLRenderCommandEncoder::MTLDepthClipModeClamp;
pub use self::__MTLRenderCommandEncoder::MTLDepthClipModeClip;
pub use self::__MTLRenderCommandEncoder::MTLDrawIndexedPrimitivesIndirectArguments;
pub use self::__MTLRenderCommandEncoder::MTLDrawPatchIndirectArguments;
pub use self::__MTLRenderCommandEncoder::MTLDrawPrimitivesIndirectArguments;
pub use self::__MTLRenderCommandEncoder::MTLPrimitiveType;
pub use self::__MTLRenderCommandEncoder::MTLPrimitiveTypeLine;
pub use self::__MTLRenderCommandEncoder::MTLPrimitiveTypeLineStrip;
pub use self::__MTLRenderCommandEncoder::MTLPrimitiveTypePoint;
pub use self::__MTLRenderCommandEncoder::MTLPrimitiveTypeTriangle;
pub use self::__MTLRenderCommandEncoder::MTLPrimitiveTypeTriangleStrip;
pub use self::__MTLRenderCommandEncoder::MTLQuadTessellationFactorsHalf;
pub use self::__MTLRenderCommandEncoder::MTLRenderCommandEncoder;
pub use self::__MTLRenderCommandEncoder::MTLRenderStageFragment;
pub use self::__MTLRenderCommandEncoder::MTLRenderStageMesh;
pub use self::__MTLRenderCommandEncoder::MTLRenderStageObject;
pub use self::__MTLRenderCommandEncoder::MTLRenderStageTile;
pub use self::__MTLRenderCommandEncoder::MTLRenderStageVertex;
pub use self::__MTLRenderCommandEncoder::MTLRenderStages;
pub use self::__MTLRenderCommandEncoder::MTLScissorRect;
pub use self::__MTLRenderCommandEncoder::MTLTriangleFillMode;
pub use self::__MTLRenderCommandEncoder::MTLTriangleFillModeFill;
pub use self::__MTLRenderCommandEncoder::MTLTriangleFillModeLines;
pub use self::__MTLRenderCommandEncoder::MTLTriangleTessellationFactorsHalf;
pub use self::__MTLRenderCommandEncoder::MTLVertexAmplificationViewMapping;
pub use self::__MTLRenderCommandEncoder::MTLViewport;
pub use self::__MTLRenderCommandEncoder::MTLVisibilityResultMode;
pub use self::__MTLRenderCommandEncoder::MTLVisibilityResultModeBoolean;
pub use self::__MTLRenderCommandEncoder::MTLVisibilityResultModeCounting;
pub use self::__MTLRenderCommandEncoder::MTLVisibilityResultModeDisabled;
pub use self::__MTLRenderCommandEncoder::MTLWinding;
pub use self::__MTLRenderCommandEncoder::MTLWindingClockwise;
pub use self::__MTLRenderCommandEncoder::MTLWindingCounterClockwise;
pub use self::__MTLRenderPass::MTLClearColor;
pub use self::__MTLRenderPass::MTLLoadAction;
pub use self::__MTLRenderPass::MTLLoadActionClear;
pub use self::__MTLRenderPass::MTLLoadActionDontCare;
pub use self::__MTLRenderPass::MTLLoadActionLoad;
pub use self::__MTLRenderPass::MTLMultisampleDepthResolveFilter;
pub use self::__MTLRenderPass::MTLMultisampleDepthResolveFilterMax;
pub use self::__MTLRenderPass::MTLMultisampleDepthResolveFilterMin;
pub use self::__MTLRenderPass::MTLMultisampleDepthResolveFilterSample0;
pub use self::__MTLRenderPass::MTLMultisampleStencilResolveFilter;
pub use self::__MTLRenderPass::MTLMultisampleStencilResolveFilterDepthResolvedSample;
pub use self::__MTLRenderPass::MTLMultisampleStencilResolveFilterSample0;
#[cfg(feature = "Metal_MTLRenderPassAttachmentDescriptor")]
pub use self::__MTLRenderPass::MTLRenderPassAttachmentDescriptor;
#[cfg(feature = "Metal_MTLRenderPassColorAttachmentDescriptor")]
pub use self::__MTLRenderPass::MTLRenderPassColorAttachmentDescriptor;
#[cfg(feature = "Metal_MTLRenderPassColorAttachmentDescriptorArray")]
pub use self::__MTLRenderPass::MTLRenderPassColorAttachmentDescriptorArray;
#[cfg(feature = "Metal_MTLRenderPassDepthAttachmentDescriptor")]
pub use self::__MTLRenderPass::MTLRenderPassDepthAttachmentDescriptor;
#[cfg(feature = "Metal_MTLRenderPassDescriptor")]
pub use self::__MTLRenderPass::MTLRenderPassDescriptor;
#[cfg(feature = "Metal_MTLRenderPassSampleBufferAttachmentDescriptor")]
pub use self::__MTLRenderPass::MTLRenderPassSampleBufferAttachmentDescriptor;
#[cfg(feature = "Metal_MTLRenderPassSampleBufferAttachmentDescriptorArray")]
pub use self::__MTLRenderPass::MTLRenderPassSampleBufferAttachmentDescriptorArray;
#[cfg(feature = "Metal_MTLRenderPassStencilAttachmentDescriptor")]
pub use self::__MTLRenderPass::MTLRenderPassStencilAttachmentDescriptor;
pub use self::__MTLRenderPass::MTLStoreAction;
pub use self::__MTLRenderPass::MTLStoreActionCustomSampleDepthStore;
pub use self::__MTLRenderPass::MTLStoreActionDontCare;
pub use self::__MTLRenderPass::MTLStoreActionMultisampleResolve;
pub use self::__MTLRenderPass::MTLStoreActionOptionCustomSamplePositions;
pub use self::__MTLRenderPass::MTLStoreActionOptionNone;
pub use self::__MTLRenderPass::MTLStoreActionOptions;
pub use self::__MTLRenderPass::MTLStoreActionStore;
pub use self::__MTLRenderPass::MTLStoreActionStoreAndMultisampleResolve;
pub use self::__MTLRenderPass::MTLStoreActionUnknown;
pub use self::__MTLRenderPipeline::MTLBlendFactor;
pub use self::__MTLRenderPipeline::MTLBlendFactorBlendAlpha;
pub use self::__MTLRenderPipeline::MTLBlendFactorBlendColor;
pub use self::__MTLRenderPipeline::MTLBlendFactorDestinationAlpha;
pub use self::__MTLRenderPipeline::MTLBlendFactorDestinationColor;
pub use self::__MTLRenderPipeline::MTLBlendFactorOne;
pub use self::__MTLRenderPipeline::MTLBlendFactorOneMinusBlendAlpha;
pub use self::__MTLRenderPipeline::MTLBlendFactorOneMinusBlendColor;
pub use self::__MTLRenderPipeline::MTLBlendFactorOneMinusDestinationAlpha;
pub use self::__MTLRenderPipeline::MTLBlendFactorOneMinusDestinationColor;
pub use self::__MTLRenderPipeline::MTLBlendFactorOneMinusSource1Alpha;
pub use self::__MTLRenderPipeline::MTLBlendFactorOneMinusSource1Color;
pub use self::__MTLRenderPipeline::MTLBlendFactorOneMinusSourceAlpha;
pub use self::__MTLRenderPipeline::MTLBlendFactorOneMinusSourceColor;
pub use self::__MTLRenderPipeline::MTLBlendFactorSource1Alpha;
pub use self::__MTLRenderPipeline::MTLBlendFactorSource1Color;
pub use self::__MTLRenderPipeline::MTLBlendFactorSourceAlpha;
pub use self::__MTLRenderPipeline::MTLBlendFactorSourceAlphaSaturated;
pub use self::__MTLRenderPipeline::MTLBlendFactorSourceColor;
pub use self::__MTLRenderPipeline::MTLBlendFactorZero;
pub use self::__MTLRenderPipeline::MTLBlendOperation;
pub use self::__MTLRenderPipeline::MTLBlendOperationAdd;
pub use self::__MTLRenderPipeline::MTLBlendOperationMax;
pub use self::__MTLRenderPipeline::MTLBlendOperationMin;
pub use self::__MTLRenderPipeline::MTLBlendOperationReverseSubtract;
pub use self::__MTLRenderPipeline::MTLBlendOperationSubtract;
pub use self::__MTLRenderPipeline::MTLColorWriteMask;
pub use self::__MTLRenderPipeline::MTLColorWriteMaskAll;
pub use self::__MTLRenderPipeline::MTLColorWriteMaskAlpha;
pub use self::__MTLRenderPipeline::MTLColorWriteMaskBlue;
pub use self::__MTLRenderPipeline::MTLColorWriteMaskGreen;
pub use self::__MTLRenderPipeline::MTLColorWriteMaskNone;
pub use self::__MTLRenderPipeline::MTLColorWriteMaskRed;
#[cfg(feature = "Metal_MTLMeshRenderPipelineDescriptor")]
pub use self::__MTLRenderPipeline::MTLMeshRenderPipelineDescriptor;
pub use self::__MTLRenderPipeline::MTLPrimitiveTopologyClass;
pub use self::__MTLRenderPipeline::MTLPrimitiveTopologyClassLine;
pub use self::__MTLRenderPipeline::MTLPrimitiveTopologyClassPoint;
pub use self::__MTLRenderPipeline::MTLPrimitiveTopologyClassTriangle;
pub use self::__MTLRenderPipeline::MTLPrimitiveTopologyClassUnspecified;
#[cfg(feature = "Metal_MTLRenderPipelineColorAttachmentDescriptor")]
pub use self::__MTLRenderPipeline::MTLRenderPipelineColorAttachmentDescriptor;
#[cfg(feature = "Metal_MTLRenderPipelineColorAttachmentDescriptorArray")]
pub use self::__MTLRenderPipeline::MTLRenderPipelineColorAttachmentDescriptorArray;
#[cfg(feature = "Metal_MTLRenderPipelineDescriptor")]
pub use self::__MTLRenderPipeline::MTLRenderPipelineDescriptor;
#[cfg(feature = "Metal_MTLRenderPipelineFunctionsDescriptor")]
pub use self::__MTLRenderPipeline::MTLRenderPipelineFunctionsDescriptor;
#[cfg(feature = "Metal_MTLRenderPipelineReflection")]
pub use self::__MTLRenderPipeline::MTLRenderPipelineReflection;
pub use self::__MTLRenderPipeline::MTLRenderPipelineState;
pub use self::__MTLRenderPipeline::MTLTessellationControlPointIndexType;
pub use self::__MTLRenderPipeline::MTLTessellationControlPointIndexTypeNone;
pub use self::__MTLRenderPipeline::MTLTessellationControlPointIndexTypeUInt16;
pub use self::__MTLRenderPipeline::MTLTessellationControlPointIndexTypeUInt32;
pub use self::__MTLRenderPipeline::MTLTessellationFactorFormat;
pub use self::__MTLRenderPipeline::MTLTessellationFactorFormatHalf;
pub use self::__MTLRenderPipeline::MTLTessellationFactorStepFunction;
pub use self::__MTLRenderPipeline::MTLTessellationFactorStepFunctionConstant;
pub use self::__MTLRenderPipeline::MTLTessellationFactorStepFunctionPerInstance;
pub use self::__MTLRenderPipeline::MTLTessellationFactorStepFunctionPerPatch;
pub use self::__MTLRenderPipeline::MTLTessellationFactorStepFunctionPerPatchAndPerInstance;
pub use self::__MTLRenderPipeline::MTLTessellationPartitionMode;
pub use self::__MTLRenderPipeline::MTLTessellationPartitionModeFractionalEven;
pub use self::__MTLRenderPipeline::MTLTessellationPartitionModeFractionalOdd;
pub use self::__MTLRenderPipeline::MTLTessellationPartitionModeInteger;
pub use self::__MTLRenderPipeline::MTLTessellationPartitionModePow2;
#[cfg(feature = "Metal_MTLTileRenderPipelineColorAttachmentDescriptor")]
pub use self::__MTLRenderPipeline::MTLTileRenderPipelineColorAttachmentDescriptor;
#[cfg(feature = "Metal_MTLTileRenderPipelineColorAttachmentDescriptorArray")]
pub use self::__MTLRenderPipeline::MTLTileRenderPipelineColorAttachmentDescriptorArray;
#[cfg(feature = "Metal_MTLTileRenderPipelineDescriptor")]
pub use self::__MTLRenderPipeline::MTLTileRenderPipelineDescriptor;
pub use self::__MTLResource::MTLCPUCacheMode;
pub use self::__MTLResource::MTLCPUCacheModeDefaultCache;
pub use self::__MTLResource::MTLCPUCacheModeWriteCombined;
pub use self::__MTLResource::MTLHazardTrackingMode;
pub use self::__MTLResource::MTLHazardTrackingModeDefault;
pub use self::__MTLResource::MTLHazardTrackingModeTracked;
pub use self::__MTLResource::MTLHazardTrackingModeUntracked;
pub use self::__MTLResource::MTLPurgeableState;
pub use self::__MTLResource::MTLPurgeableStateEmpty;
pub use self::__MTLResource::MTLPurgeableStateKeepCurrent;
pub use self::__MTLResource::MTLPurgeableStateNonVolatile;
pub use self::__MTLResource::MTLPurgeableStateVolatile;
pub use self::__MTLResource::MTLResource;
pub use self::__MTLResource::MTLResourceCPUCacheModeDefaultCache;
pub use self::__MTLResource::MTLResourceCPUCacheModeWriteCombined;
pub use self::__MTLResource::MTLResourceHazardTrackingModeDefault;
pub use self::__MTLResource::MTLResourceHazardTrackingModeTracked;
pub use self::__MTLResource::MTLResourceHazardTrackingModeUntracked;
pub use self::__MTLResource::MTLResourceOptionCPUCacheModeDefault;
pub use self::__MTLResource::MTLResourceOptionCPUCacheModeWriteCombined;
pub use self::__MTLResource::MTLResourceOptions;
#[cfg(not(any(target_os = "ios")))]
pub use self::__MTLResource::MTLResourceStorageModeManaged;
pub use self::__MTLResource::MTLResourceStorageModeMemoryless;
pub use self::__MTLResource::MTLResourceStorageModePrivate;
pub use self::__MTLResource::MTLResourceStorageModeShared;
pub use self::__MTLResource::MTLStorageMode;
#[cfg(not(any(target_os = "ios")))]
pub use self::__MTLResource::MTLStorageModeManaged;
pub use self::__MTLResource::MTLStorageModeMemoryless;
pub use self::__MTLResource::MTLStorageModePrivate;
pub use self::__MTLResource::MTLStorageModeShared;
pub use self::__MTLResourceStateCommandEncoder::MTLMapIndirectArguments;
pub use self::__MTLResourceStateCommandEncoder::MTLResourceStateCommandEncoder;
pub use self::__MTLResourceStateCommandEncoder::MTLSparseTextureMappingMode;
pub use self::__MTLResourceStateCommandEncoder::MTLSparseTextureMappingModeMap;
pub use self::__MTLResourceStateCommandEncoder::MTLSparseTextureMappingModeUnmap;
#[cfg(feature = "Metal_MTLResourceStatePassDescriptor")]
pub use self::__MTLResourceStatePass::MTLResourceStatePassDescriptor;
#[cfg(feature = "Metal_MTLResourceStatePassSampleBufferAttachmentDescriptor")]
pub use self::__MTLResourceStatePass::MTLResourceStatePassSampleBufferAttachmentDescriptor;
#[cfg(feature = "Metal_MTLResourceStatePassSampleBufferAttachmentDescriptorArray")]
pub use self::__MTLResourceStatePass::MTLResourceStatePassSampleBufferAttachmentDescriptorArray;
pub use self::__MTLSampler::MTLSamplerAddressMode;
pub use self::__MTLSampler::MTLSamplerAddressModeClampToBorderColor;
pub use self::__MTLSampler::MTLSamplerAddressModeClampToEdge;
pub use self::__MTLSampler::MTLSamplerAddressModeClampToZero;
pub use self::__MTLSampler::MTLSamplerAddressModeMirrorClampToEdge;
pub use self::__MTLSampler::MTLSamplerAddressModeMirrorRepeat;
pub use self::__MTLSampler::MTLSamplerAddressModeRepeat;
pub use self::__MTLSampler::MTLSamplerBorderColor;
pub use self::__MTLSampler::MTLSamplerBorderColorOpaqueBlack;
pub use self::__MTLSampler::MTLSamplerBorderColorOpaqueWhite;
pub use self::__MTLSampler::MTLSamplerBorderColorTransparentBlack;
#[cfg(feature = "Metal_MTLSamplerDescriptor")]
pub use self::__MTLSampler::MTLSamplerDescriptor;
pub use self::__MTLSampler::MTLSamplerMinMagFilter;
pub use self::__MTLSampler::MTLSamplerMinMagFilterLinear;
pub use self::__MTLSampler::MTLSamplerMinMagFilterNearest;
pub use self::__MTLSampler::MTLSamplerMipFilter;
pub use self::__MTLSampler::MTLSamplerMipFilterLinear;
pub use self::__MTLSampler::MTLSamplerMipFilterNearest;
pub use self::__MTLSampler::MTLSamplerMipFilterNotMipmapped;
pub use self::__MTLSampler::MTLSamplerState;
#[cfg(feature = "Metal_MTLAttributeDescriptor")]
pub use self::__MTLStageInputOutputDescriptor::MTLAttributeDescriptor;
#[cfg(feature = "Metal_MTLAttributeDescriptorArray")]
pub use self::__MTLStageInputOutputDescriptor::MTLAttributeDescriptorArray;
pub use self::__MTLStageInputOutputDescriptor::MTLAttributeFormat;
pub use self::__MTLStageInputOutputDescriptor::MTLAttributeFormatChar;
pub use self::__MTLStageInputOutputDescriptor::MTLAttributeFormatChar2;
pub use self::__MTLStageInputOutputDescriptor::MTLAttributeFormatChar2Normalized;
pub use self::__MTLStageInputOutputDescriptor::MTLAttributeFormatChar3;
pub use self::__MTLStageInputOutputDescriptor::MTLAttributeFormatChar3Normalized;
pub use self::__MTLStageInputOutputDescriptor::MTLAttributeFormatChar4;
pub use self::__MTLStageInputOutputDescriptor::MTLAttributeFormatChar4Normalized;
pub use self::__MTLStageInputOutputDescriptor::MTLAttributeFormatCharNormalized;
pub use self::__MTLStageInputOutputDescriptor::MTLAttributeFormatFloat;
pub use self::__MTLStageInputOutputDescriptor::MTLAttributeFormatFloat2;
pub use self::__MTLStageInputOutputDescriptor::MTLAttributeFormatFloat3;
pub use self::__MTLStageInputOutputDescriptor::MTLAttributeFormatFloat4;
pub use self::__MTLStageInputOutputDescriptor::MTLAttributeFormatHalf;
pub use self::__MTLStageInputOutputDescriptor::MTLAttributeFormatHalf2;
pub use self::__MTLStageInputOutputDescriptor::MTLAttributeFormatHalf3;
pub use self::__MTLStageInputOutputDescriptor::MTLAttributeFormatHalf4;
pub use self::__MTLStageInputOutputDescriptor::MTLAttributeFormatInt;
pub use self::__MTLStageInputOutputDescriptor::MTLAttributeFormatInt1010102Normalized;
pub use self::__MTLStageInputOutputDescriptor::MTLAttributeFormatInt2;
pub use self::__MTLStageInputOutputDescriptor::MTLAttributeFormatInt3;
pub use self::__MTLStageInputOutputDescriptor::MTLAttributeFormatInt4;
pub use self::__MTLStageInputOutputDescriptor::MTLAttributeFormatInvalid;
pub use self::__MTLStageInputOutputDescriptor::MTLAttributeFormatShort;
pub use self::__MTLStageInputOutputDescriptor::MTLAttributeFormatShort2;
pub use self::__MTLStageInputOutputDescriptor::MTLAttributeFormatShort2Normalized;
pub use self::__MTLStageInputOutputDescriptor::MTLAttributeFormatShort3;
pub use self::__MTLStageInputOutputDescriptor::MTLAttributeFormatShort3Normalized;
pub use self::__MTLStageInputOutputDescriptor::MTLAttributeFormatShort4;
pub use self::__MTLStageInputOutputDescriptor::MTLAttributeFormatShort4Normalized;
pub use self::__MTLStageInputOutputDescriptor::MTLAttributeFormatShortNormalized;
pub use self::__MTLStageInputOutputDescriptor::MTLAttributeFormatUChar;
pub use self::__MTLStageInputOutputDescriptor::MTLAttributeFormatUChar2;
pub use self::__MTLStageInputOutputDescriptor::MTLAttributeFormatUChar2Normalized;
pub use self::__MTLStageInputOutputDescriptor::MTLAttributeFormatUChar3;
pub use self::__MTLStageInputOutputDescriptor::MTLAttributeFormatUChar3Normalized;
pub use self::__MTLStageInputOutputDescriptor::MTLAttributeFormatUChar4;
pub use self::__MTLStageInputOutputDescriptor::MTLAttributeFormatUChar4Normalized;
pub use self::__MTLStageInputOutputDescriptor::MTLAttributeFormatUChar4Normalized_BGRA;
pub use self::__MTLStageInputOutputDescriptor::MTLAttributeFormatUCharNormalized;
pub use self::__MTLStageInputOutputDescriptor::MTLAttributeFormatUInt;
pub use self::__MTLStageInputOutputDescriptor::MTLAttributeFormatUInt1010102Normalized;
pub use self::__MTLStageInputOutputDescriptor::MTLAttributeFormatUInt2;
pub use self::__MTLStageInputOutputDescriptor::MTLAttributeFormatUInt3;
pub use self::__MTLStageInputOutputDescriptor::MTLAttributeFormatUInt4;
pub use self::__MTLStageInputOutputDescriptor::MTLAttributeFormatUShort;
pub use self::__MTLStageInputOutputDescriptor::MTLAttributeFormatUShort2;
pub use self::__MTLStageInputOutputDescriptor::MTLAttributeFormatUShort2Normalized;
pub use self::__MTLStageInputOutputDescriptor::MTLAttributeFormatUShort3;
pub use self::__MTLStageInputOutputDescriptor::MTLAttributeFormatUShort3Normalized;
pub use self::__MTLStageInputOutputDescriptor::MTLAttributeFormatUShort4;
pub use self::__MTLStageInputOutputDescriptor::MTLAttributeFormatUShort4Normalized;
pub use self::__MTLStageInputOutputDescriptor::MTLAttributeFormatUShortNormalized;
#[cfg(feature = "Metal_MTLBufferLayoutDescriptor")]
pub use self::__MTLStageInputOutputDescriptor::MTLBufferLayoutDescriptor;
#[cfg(feature = "Metal_MTLBufferLayoutDescriptorArray")]
pub use self::__MTLStageInputOutputDescriptor::MTLBufferLayoutDescriptorArray;
pub use self::__MTLStageInputOutputDescriptor::MTLIndexType;
pub use self::__MTLStageInputOutputDescriptor::MTLIndexTypeUInt16;
pub use self::__MTLStageInputOutputDescriptor::MTLIndexTypeUInt32;
#[cfg(feature = "Metal_MTLStageInputOutputDescriptor")]
pub use self::__MTLStageInputOutputDescriptor::MTLStageInputOutputDescriptor;
pub use self::__MTLStageInputOutputDescriptor::MTLStepFunction;
pub use self::__MTLStageInputOutputDescriptor::MTLStepFunctionConstant;
pub use self::__MTLStageInputOutputDescriptor::MTLStepFunctionPerInstance;
pub use self::__MTLStageInputOutputDescriptor::MTLStepFunctionPerPatch;
pub use self::__MTLStageInputOutputDescriptor::MTLStepFunctionPerPatchControlPoint;
pub use self::__MTLStageInputOutputDescriptor::MTLStepFunctionPerVertex;
pub use self::__MTLStageInputOutputDescriptor::MTLStepFunctionThreadPositionInGridX;
pub use self::__MTLStageInputOutputDescriptor::MTLStepFunctionThreadPositionInGridXIndexed;
pub use self::__MTLStageInputOutputDescriptor::MTLStepFunctionThreadPositionInGridY;
pub use self::__MTLStageInputOutputDescriptor::MTLStepFunctionThreadPositionInGridYIndexed;
#[cfg(feature = "Metal_MTLSharedTextureHandle")]
pub use self::__MTLTexture::MTLSharedTextureHandle;
pub use self::__MTLTexture::MTLTexture;
pub use self::__MTLTexture::MTLTextureCompressionType;
pub use self::__MTLTexture::MTLTextureCompressionTypeLossless;
pub use self::__MTLTexture::MTLTextureCompressionTypeLossy;
#[cfg(feature = "Metal_MTLTextureDescriptor")]
pub use self::__MTLTexture::MTLTextureDescriptor;
pub use self::__MTLTexture::MTLTextureSwizzle;
pub use self::__MTLTexture::MTLTextureSwizzleAlpha;
pub use self::__MTLTexture::MTLTextureSwizzleBlue;
pub use self::__MTLTexture::MTLTextureSwizzleChannels;
pub use self::__MTLTexture::MTLTextureSwizzleGreen;
pub use self::__MTLTexture::MTLTextureSwizzleOne;
pub use self::__MTLTexture::MTLTextureSwizzleRed;
pub use self::__MTLTexture::MTLTextureSwizzleZero;
pub use self::__MTLTexture::MTLTextureType;
pub use self::__MTLTexture::MTLTextureType1D;
pub use self::__MTLTexture::MTLTextureType1DArray;
pub use self::__MTLTexture::MTLTextureType2D;
pub use self::__MTLTexture::MTLTextureType2DArray;
pub use self::__MTLTexture::MTLTextureType2DMultisample;
pub use self::__MTLTexture::MTLTextureType2DMultisampleArray;
pub use self::__MTLTexture::MTLTextureType3D;
pub use self::__MTLTexture::MTLTextureTypeCube;
pub use self::__MTLTexture::MTLTextureTypeCubeArray;
pub use self::__MTLTexture::MTLTextureTypeTextureBuffer;
pub use self::__MTLTexture::MTLTextureUsage;
pub use self::__MTLTexture::MTLTextureUsagePixelFormatView;
pub use self::__MTLTexture::MTLTextureUsageRenderTarget;
pub use self::__MTLTexture::MTLTextureUsageShaderRead;
pub use self::__MTLTexture::MTLTextureUsageShaderWrite;
pub use self::__MTLTexture::MTLTextureUsageUnknown;
pub use self::__MTLTypes::MTLCoordinate2D;
pub use self::__MTLTypes::MTLOrigin;
pub use self::__MTLTypes::MTLRegion;
pub use self::__MTLTypes::MTLResourceID;
pub use self::__MTLTypes::MTLSamplePosition;
pub use self::__MTLTypes::MTLSize;
#[cfg(feature = "Metal_MTLVertexAttributeDescriptor")]
pub use self::__MTLVertexDescriptor::MTLVertexAttributeDescriptor;
#[cfg(feature = "Metal_MTLVertexAttributeDescriptorArray")]
pub use self::__MTLVertexDescriptor::MTLVertexAttributeDescriptorArray;
#[cfg(feature = "Metal_MTLVertexBufferLayoutDescriptor")]
pub use self::__MTLVertexDescriptor::MTLVertexBufferLayoutDescriptor;
#[cfg(feature = "Metal_MTLVertexBufferLayoutDescriptorArray")]
pub use self::__MTLVertexDescriptor::MTLVertexBufferLayoutDescriptorArray;
#[cfg(feature = "Metal_MTLVertexDescriptor")]
pub use self::__MTLVertexDescriptor::MTLVertexDescriptor;
pub use self::__MTLVertexDescriptor::MTLVertexFormat;
pub use self::__MTLVertexDescriptor::MTLVertexFormatChar;
pub use self::__MTLVertexDescriptor::MTLVertexFormatChar2;
pub use self::__MTLVertexDescriptor::MTLVertexFormatChar2Normalized;
pub use self::__MTLVertexDescriptor::MTLVertexFormatChar3;
pub use self::__MTLVertexDescriptor::MTLVertexFormatChar3Normalized;
pub use self::__MTLVertexDescriptor::MTLVertexFormatChar4;
pub use self::__MTLVertexDescriptor::MTLVertexFormatChar4Normalized;
pub use self::__MTLVertexDescriptor::MTLVertexFormatCharNormalized;
pub use self::__MTLVertexDescriptor::MTLVertexFormatFloat;
pub use self::__MTLVertexDescriptor::MTLVertexFormatFloat2;
pub use self::__MTLVertexDescriptor::MTLVertexFormatFloat3;
pub use self::__MTLVertexDescriptor::MTLVertexFormatFloat4;
pub use self::__MTLVertexDescriptor::MTLVertexFormatHalf;
pub use self::__MTLVertexDescriptor::MTLVertexFormatHalf2;
pub use self::__MTLVertexDescriptor::MTLVertexFormatHalf3;
pub use self::__MTLVertexDescriptor::MTLVertexFormatHalf4;
pub use self::__MTLVertexDescriptor::MTLVertexFormatInt;
pub use self::__MTLVertexDescriptor::MTLVertexFormatInt1010102Normalized;
pub use self::__MTLVertexDescriptor::MTLVertexFormatInt2;
pub use self::__MTLVertexDescriptor::MTLVertexFormatInt3;
pub use self::__MTLVertexDescriptor::MTLVertexFormatInt4;
pub use self::__MTLVertexDescriptor::MTLVertexFormatInvalid;
pub use self::__MTLVertexDescriptor::MTLVertexFormatShort;
pub use self::__MTLVertexDescriptor::MTLVertexFormatShort2;
pub use self::__MTLVertexDescriptor::MTLVertexFormatShort2Normalized;
pub use self::__MTLVertexDescriptor::MTLVertexFormatShort3;
pub use self::__MTLVertexDescriptor::MTLVertexFormatShort3Normalized;
pub use self::__MTLVertexDescriptor::MTLVertexFormatShort4;
pub use self::__MTLVertexDescriptor::MTLVertexFormatShort4Normalized;
pub use self::__MTLVertexDescriptor::MTLVertexFormatShortNormalized;
pub use self::__MTLVertexDescriptor::MTLVertexFormatUChar;
pub use self::__MTLVertexDescriptor::MTLVertexFormatUChar2;
pub use self::__MTLVertexDescriptor::MTLVertexFormatUChar2Normalized;
pub use self::__MTLVertexDescriptor::MTLVertexFormatUChar3;
pub use self::__MTLVertexDescriptor::MTLVertexFormatUChar3Normalized;
pub use self::__MTLVertexDescriptor::MTLVertexFormatUChar4;
pub use self::__MTLVertexDescriptor::MTLVertexFormatUChar4Normalized;
pub use self::__MTLVertexDescriptor::MTLVertexFormatUChar4Normalized_BGRA;
pub use self::__MTLVertexDescriptor::MTLVertexFormatUCharNormalized;
pub use self::__MTLVertexDescriptor::MTLVertexFormatUInt;
pub use self::__MTLVertexDescriptor::MTLVertexFormatUInt1010102Normalized;
pub use self::__MTLVertexDescriptor::MTLVertexFormatUInt2;
pub use self::__MTLVertexDescriptor::MTLVertexFormatUInt3;
pub use self::__MTLVertexDescriptor::MTLVertexFormatUInt4;
pub use self::__MTLVertexDescriptor::MTLVertexFormatUShort;
pub use self::__MTLVertexDescriptor::MTLVertexFormatUShort2;
pub use self::__MTLVertexDescriptor::MTLVertexFormatUShort2Normalized;
pub use self::__MTLVertexDescriptor::MTLVertexFormatUShort3;
pub use self::__MTLVertexDescriptor::MTLVertexFormatUShort3Normalized;
pub use self::__MTLVertexDescriptor::MTLVertexFormatUShort4;
pub use self::__MTLVertexDescriptor::MTLVertexFormatUShort4Normalized;
pub use self::__MTLVertexDescriptor::MTLVertexFormatUShortNormalized;
pub use self::__MTLVertexDescriptor::MTLVertexStepFunction;
pub use self::__MTLVertexDescriptor::MTLVertexStepFunctionConstant;
pub use self::__MTLVertexDescriptor::MTLVertexStepFunctionPerInstance;
pub use self::__MTLVertexDescriptor::MTLVertexStepFunctionPerPatch;
pub use self::__MTLVertexDescriptor::MTLVertexStepFunctionPerPatchControlPoint;
pub use self::__MTLVertexDescriptor::MTLVertexStepFunctionPerVertex;
pub use self::__MTLVisibleFunctionTable::MTLVisibleFunctionTable;
#[cfg(feature = "Metal_MTLVisibleFunctionTableDescriptor")]
pub use self::__MTLVisibleFunctionTable::MTLVisibleFunctionTableDescriptor;
