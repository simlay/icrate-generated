//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;
use crate::Metal::*;

ns_enum!(
    #[underlying(NSInteger)]
    /**
      Used in MTLIOCommandQueueDescriptor to set the MTLIOQueue priority at creation time.
    */
    pub enum MTLIOPriority {
        MTLIOPriorityHigh = 0,
        MTLIOPriorityNormal = 1,
        MTLIOPriorityLow = 2,
    }
);

ns_enum!(
    #[underlying(NSInteger)]
    /**
      Used in MTLIOCommandQueueDescriptor to set the MTLIOQueue type at creation time.
    */
    pub enum MTLIOCommandQueueType {
        MTLIOCommandQueueTypeConcurrent = 0,
        MTLIOCommandQueueTypeSerial = 1,
    }
);

extern_static!(MTLIOErrorDomain: &'static NSErrorDomain);

ns_error_enum!(
    #[underlying(NSInteger)]
    /**
      Used by MTLIOFileHandle creation functions to indicate an error.
    */
    pub enum MTLIOError {
        MTLIOErrorURLInvalid = 1,
        MTLIOErrorInternal = 2,
    }
);

extern_protocol!(
    /**
     @protocol MTLIOCommandQueue
    @abstract Represents a queue that schedules command buffers containing command that
    read from handle objects and write to MTLResource objects.
    */
    pub unsafe trait MTLIOCommandQueue: NSObjectProtocol {
        #[method(enqueueBarrier)]
        unsafe fn enqueueBarrier(&self);

        #[method_id(@__retain_semantics Other commandBuffer)]
        unsafe fn commandBuffer(&self) -> Id<ProtocolObject<dyn MTLIOCommandBuffer>>;

        #[method_id(@__retain_semantics Other commandBufferWithUnretainedReferences)]
        unsafe fn commandBufferWithUnretainedReferences(
            &self,
        ) -> Id<ProtocolObject<dyn MTLIOCommandBuffer>>;

        #[cfg(feature = "Foundation_NSString")]
        /**
         @property label
        @abstract An optional label for this handle.
        */
        #[method_id(@__retain_semantics Other label)]
        unsafe fn label(&self) -> Option<Id<NSString>>;

        #[cfg(feature = "Foundation_NSString")]
        /**
         @property label
        @abstract An optional label for this handle.
        */
        #[method(setLabel:)]
        unsafe fn setLabel(&self, label: Option<&NSString>);
    }

    unsafe impl ProtocolType for dyn MTLIOCommandQueue {}
);

extern_protocol!(
    /**
     @protocol MTLIOScratchBuffer
    @abstract An extendible protocol that can be used to wrap the buffers vended by
    a custom allocator. The underlying buffer is used as scratch space for IO commands
    that need it.
    */
    pub unsafe trait MTLIOScratchBuffer: NSObjectProtocol {
        #[method_id(@__retain_semantics Other buffer)]
        unsafe fn buffer(&self) -> Id<ProtocolObject<dyn MTLBuffer>>;
    }

    unsafe impl ProtocolType for dyn MTLIOScratchBuffer {}
);

extern_protocol!(
    /**
     @protocol MTLIOScratchBufferAllocator
    @abstract An extendible protocol that can implement a custom allocator passed
    to the queue descriptor.
    @discussion If provided, the queue will call newScratchBufferWithMinimumSize
    when it needs scratch storage for IO commands. When the commands that use the memory
    complete they return the storage by dealloc'ing the MTLIOScratchBuffer objects (where
    the application can optionally pool the memory for use by future commands.
    */
    pub unsafe trait MTLIOScratchBufferAllocator: NSObjectProtocol {
        #[method_id(@__retain_semantics New newScratchBufferWithMinimumSize:)]
        unsafe fn newScratchBufferWithMinimumSize(
            &self,
            minimum_size: NSUInteger,
        ) -> Option<Id<ProtocolObject<dyn MTLIOScratchBuffer>>>;
    }

    unsafe impl ProtocolType for dyn MTLIOScratchBufferAllocator {}
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "Metal_MTLIOCommandQueueDescriptor")]
    /**
     @interface MTLIOCommandQueueDescriptor
    @abstract Represents a descriptor to create a MTLIOCommandQueue.
    */
    pub struct MTLIOCommandQueueDescriptor;

    #[cfg(feature = "Metal_MTLIOCommandQueueDescriptor")]
    unsafe impl ClassType for MTLIOCommandQueueDescriptor {
        type Super = NSObject;
    }
);

#[cfg(feature = "Metal_MTLIOCommandQueueDescriptor")]
/**
 @interface MTLIOCommandQueueDescriptor
@abstract Represents a descriptor to create a MTLIOCommandQueue.
*/
unsafe impl NSObjectProtocol for MTLIOCommandQueueDescriptor {}

extern_methods!(
    /**
     @interface MTLIOCommandQueueDescriptor
    @abstract Represents a descriptor to create a MTLIOCommandQueue.
    */
    #[cfg(feature = "Metal_MTLIOCommandQueueDescriptor")]
    unsafe impl MTLIOCommandQueueDescriptor {
        /**
         @property maxCommandBufferCount
        @abstract The maximum number of commandBuffers that can be in flight at a given time for the queue.
        */
        #[method(maxCommandBufferCount)]
        pub unsafe fn maxCommandBufferCount(&self) -> NSUInteger;

        /**
         @property maxCommandBufferCount
        @abstract The maximum number of commandBuffers that can be in flight at a given time for the queue.
        */
        #[method(setMaxCommandBufferCount:)]
        pub unsafe fn setMaxCommandBufferCount(&self, max_command_buffer_count: NSUInteger);

        /**
         @property priority
        @abstract The priority of the commands executed by this queue.
        */
        #[method(priority)]
        pub unsafe fn priority(&self) -> MTLIOPriority;

        /**
         @property priority
        @abstract The priority of the commands executed by this queue.
        */
        #[method(setPriority:)]
        pub unsafe fn setPriority(&self, priority: MTLIOPriority);

        /**
         @property type
        @abstract The type (serial or concurrent) of the queue.
        */
        #[method(type)]
        pub unsafe fn r#type(&self) -> MTLIOCommandQueueType;

        /**
         @property type
        @abstract The type (serial or concurrent) of the queue.
        */
        #[method(setType:)]
        pub unsafe fn setType(&self, r#type: MTLIOCommandQueueType);

        /**
         @property maxCommandsInFlight
        @abstract The maximum number of IO commands that can be in flight at a given time for the queue.
        @discussion A zero value defaults to the system dependent maximum value, a smaller number can be
        provided to bound the utilization of the storage device.
        */
        #[method(maxCommandsInFlight)]
        pub unsafe fn maxCommandsInFlight(&self) -> NSUInteger;

        /**
         @property maxCommandsInFlight
        @abstract The maximum number of IO commands that can be in flight at a given time for the queue.
        @discussion A zero value defaults to the system dependent maximum value, a smaller number can be
        provided to bound the utilization of the storage device.
        */
        #[method(setMaxCommandsInFlight:)]
        pub unsafe fn setMaxCommandsInFlight(&self, max_commands_in_flight: NSUInteger);

        /**
         @property scratchBufferAllocator
        @abstract An optional property that allows setting a custom allocator for scratch buffers by the queue.
        @discussion An application can manage scratch buffers manually by implemeting a class  conforming
        to the MTLIOScratchBufferAllocator protocol and creating an instance that is passed in here.
        */
        #[method_id(@__retain_semantics Other scratchBufferAllocator)]
        pub unsafe fn scratchBufferAllocator(
            &self,
        ) -> Option<Id<ProtocolObject<dyn MTLIOScratchBufferAllocator>>>;

        /**
         @property scratchBufferAllocator
        @abstract An optional property that allows setting a custom allocator for scratch buffers by the queue.
        @discussion An application can manage scratch buffers manually by implemeting a class  conforming
        to the MTLIOScratchBufferAllocator protocol and creating an instance that is passed in here.
        */
        #[method(setScratchBufferAllocator:)]
        pub unsafe fn setScratchBufferAllocator(
            &self,
            scratch_buffer_allocator: Option<&ProtocolObject<dyn MTLIOScratchBufferAllocator>>,
        );
    }
);

extern_protocol!(
    /**
     @protocol MTLIOFileHandle
    @abstract Represents a  file (raw or compressed) that can be used as a source
    for load commands encoded in a MTLIOCommandBuffer.
    */
    pub unsafe trait MTLIOFileHandle: NSObjectProtocol {
        #[cfg(feature = "Foundation_NSString")]
        /**
         @property label
        @abstract An optional label for this handle.
        */
        #[method_id(@__retain_semantics Other label)]
        unsafe fn label(&self) -> Option<Id<NSString>>;

        #[cfg(feature = "Foundation_NSString")]
        /**
         @property label
        @abstract An optional label for this handle.
        */
        #[method(setLabel:)]
        unsafe fn setLabel(&self, label: Option<&NSString>);
    }

    unsafe impl ProtocolType for dyn MTLIOFileHandle {}
);
