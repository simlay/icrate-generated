//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;
use crate::Metal::*;

extern_struct!(
    #[encoding_name("?")]
    /**
     @struct MTLOrigin
    @abstract Identify a pixel in an image. MTLOrigin is ususally used as the upper-left corner of a region of a texture.
    */
    pub struct MTLOrigin {
        pub x: NSUInteger,
        pub y: NSUInteger,
        pub z: NSUInteger,
    }
);

inline_fn!(
    pub unsafe fn MTLOriginMake(x: NSUInteger, y: NSUInteger, z: NSUInteger) -> MTLOrigin {
        todo!()
    }
);

extern_struct!(
    #[encoding_name("?")]
    /**
     @typedef MTLSize
    @abstract A set of dimensions to declare the size of an object, such as an image, texture, threadgroup, or grid.
    */
    pub struct MTLSize {
        pub width: NSUInteger,
        pub height: NSUInteger,
        pub depth: NSUInteger,
    }
);

inline_fn!(
    pub unsafe fn MTLSizeMake(width: NSUInteger, height: NSUInteger, depth: NSUInteger) -> MTLSize {
        todo!()
    }
);

extern_struct!(
    #[encoding_name("?")]
    /**
     @struct MTLRegion
    @abstract Identify a region in an image or texture.
    */
    pub struct MTLRegion {
        pub origin: MTLOrigin,
        pub size: MTLSize,
    }
);

inline_fn!(
    pub unsafe fn MTLRegionMake1D(x: NSUInteger, width: NSUInteger) -> MTLRegion {
        todo!()
    }
);

inline_fn!(
    pub unsafe fn MTLRegionMake2D(
        x: NSUInteger,
        y: NSUInteger,
        width: NSUInteger,
        height: NSUInteger,
    ) -> MTLRegion {
        todo!()
    }
);

inline_fn!(
    pub unsafe fn MTLRegionMake3D(
        x: NSUInteger,
        y: NSUInteger,
        z: NSUInteger,
        width: NSUInteger,
        height: NSUInteger,
        depth: NSUInteger,
    ) -> MTLRegion {
        todo!()
    }
);

extern_struct!(
    #[encoding_name("?")]
    /**
     @struct MTLSamplePosition
    @abstract Identify a sample within a pixel. Origin is top-left with a range [0,1) for both x and y.
    */
    pub struct MTLSamplePosition {
        pub x: c_float,
        pub y: c_float,
    }
);

inline_fn!(
    pub unsafe fn MTLSamplePositionMake(x: c_float, y: c_float) -> MTLSamplePosition {
        todo!()
    }
);

pub type MTLCoordinate2D = MTLSamplePosition;

inline_fn!(
    pub unsafe fn MTLCoordinate2DMake(x: c_float, y: c_float) -> MTLCoordinate2D {
        todo!()
    }
);

extern_struct!(
    /**
     @typedef MTLResourceID
    @abstract Handle of the GPU resource suitable for storing in an Argument Buffer
    @discussion
    A MTLResourceID represents a specific GPU resource, mutating this handle is undefined unless the mutation results in the value equalling an already existing handle of the same resource type.
    */
    pub struct MTLResourceID {
        _impl: u64,
    }
);
